#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "weather_station1"
  https://create.arduino.cc/cloud/things/001b9706-5f07-447a-873d-02961e3cf54c 

  Arduino IoT Cloud Properties description

  The following variables are automatically generated and updated when changes are made to the Thing properties

  float Wind_Dir;
  float Humidity;
  float Temp;
  float pressure_hg;
  float Wind_Speed;

  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

char current_scan[7],current_temp[7],current_humidity[7],current_pressure[7],current_speed[7],current_direction[7],current_uv[7];
void data_stream_parse(void);

void setup()
 {

   // Open USB CDC port

  Serial.begin(38400);
  delay(1500); 

  // open serial port on Pin 13/14 (sensor data stream)
  Serial1.begin(38400);
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  delay(5000);
  printWifiStatus();
  delay(5000);


  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop()
 {
   
  read_sensor_data();
  data_stream_print();
  convert_data();
  ArduinoCloud.update();    // push to Arduino Cloud
  // delay(1000);  
}


void data_stream_print(void)
{
	
	Serial.println("Waiting for sensor data stream");
	read_sensor_data();
	
	Serial.println("extracted data");
	Serial.print(current_scan);
	Serial.print(' ');
	Serial.print(current_temp);
	Serial.print(' ');
	Serial.print(current_humidity);
	Serial.print(' ');
	Serial.print(current_pressure);
	Serial.print(' ');
	Serial.print(current_speed);
	Serial.print(' ');
	Serial.print(current_direction);
	Serial.print(' ');
	Serial.println(current_uv);
		
}

/*
    float Wind_Dir;
    float Humidity;
    float Temp;
    float pressure_hg;
    float Wind_Speed;
*/

void convert_data(void)
{

    Wind_Dir = atof(current_direction);
    Humidity = atof(current_humidity);
    Temp = atof(current_temp);
    pressure_hg = atof(current_pressure);
    Wind_Speed = atof(current_speed);
    
}




char frame_buffer[100];
enum {FRAME_IDLE,FRAME_READ};

void read_sensor_data(void)
{
	uint8_t done = false;
	uint8_t index,data_index;
	uint8_t frame_state = FRAME_IDLE;
	char buffer_data;
	
	for(index = 0;index < 100;index++)		// clear frame buffer
		frame_buffer[index] = 0;
	
	while(!done)
	{
		
		// if(read_rx_buffer(&buffer_data))
		if(Serial1.available() > 0)
		{
				
			buffer_data = Serial1.read();	
		
			if(buffer_data == '@'&& frame_state == FRAME_IDLE)
			{
				index = 0;
				frame_state = FRAME_READ;
				frame_buffer[index] = buffer_data;
				index++;
				
			}
			
			else if(buffer_data == '*' && frame_state == FRAME_READ)
			{
				frame_buffer[index++] = '*';
				frame_buffer[index] = 0;
				frame_state = FRAME_IDLE;
				done = true;
				
				
			}
			else frame_buffer[index++] = buffer_data;
		}		
			
	} // end while not done
	Serial.println(frame_buffer);
	
	
	// extract current scan
	
	done = false;
	index = 0;
	while(!done)
	{
		if(frame_buffer[index++] == 's')
		{
			index++;			// move past ':'			
			data_index = 0;
			while(frame_buffer[index] != ' ')
				current_scan[data_index++] = frame_buffer[index++];
			current_scan[data_index] = 0;
			done = true;
			
		}
		
	}
	
	// extract temp
	
	done = false;
	index = 0;
	while(!done)
	{
		if(frame_buffer[index++] == 't')
		{
			index++;			// move past ':'			
			data_index = 0;
			while(frame_buffer[index] != ' ')
				current_temp[data_index++] = frame_buffer[index++];
			current_temp[data_index] = 0;
			done = true;
			
		}
		
	}
	
	// extract humidity
	
	done = false;
	index = 0;
	while(!done)
	{
		if(frame_buffer[index++] == 'h')
		{
			index++;			// move past ':'			
			data_index = 0;
			while(frame_buffer[index] != ' ')
				current_humidity[data_index++] = frame_buffer[index++];
			current_humidity[data_index] = 0;
			done = true;
			
		}
		
	}
	
	// extract pressure
	
	done = false;
	index = 0;
	while(!done)
	{
		if(frame_buffer[index++] == 'p')
		{
			index++;			// move past ':'			
			data_index = 0;
			while(frame_buffer[index] != ' ')
				current_pressure[data_index++] = frame_buffer[index++];
			current_pressure[data_index] = 0;
			done = true;
			
		}
		
	}
	
	// extract wind speed
	
	done = false;
	index = 0;
	while(!done)
	{
		if(frame_buffer[index++] == 'v')
		{
			index++;			// move past ':'			
			data_index = 0;
			while(frame_buffer[index] != ' ')
				current_speed[data_index++] = frame_buffer[index++];
			current_speed[index] = 0;
			done = true;
			
		}
		
	}
	
	
	// extract wind direction
	
	done = false;
	index = 0;
	while(!done)
	{
		if(frame_buffer[index++] == 'd')
		{
			index++;			// move past ':'			
			data_index = 0;
			while(frame_buffer[index] != ' ')
				current_direction[data_index++] = frame_buffer[index++];
			current_direction[index] = 0;
			done = true;
			
		}
		
	}
	
	// extract uv index
	done = false;
	index = 0;
	while(!done)
	{
		if(frame_buffer[index++] == 'i')
		{
			index++;			// move past ':'			
			data_index = 0;
			while(frame_buffer[index] != ' ')
				current_uv[data_index++] = frame_buffer[index++];
			current_uv[index] = 0;
			done = true;
			
		}
		
	}
		
} // end read_sensor_data

void printWifiStatus() 
{
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your board's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}
