
windsensor_core.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000154  00800100  0000363c  000036d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000363c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f6  00800254  00800254  00003824  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003854  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f8  00000000  00000000  00003894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000facc  00000000  00000000  00003f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032d2  00000000  00000000  00013a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003fc0  00000000  00000000  00016d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014fc  00000000  00000000  0001acec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003fae  00000000  00000000  0001c1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006b19  00000000  00000000  00020196  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  00026caf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__vector_13>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__vector_16>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__vector_18>
      4c:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__vector_19>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__vector_24>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	0d 0a       	sbc	r0, r29
      6a:	3e 3e       	cpi	r19, 0xEE	; 238
      6c:	20 57       	subi	r18, 0x70	; 112
      6e:	65 61       	ori	r22, 0x15	; 21
      70:	74 68       	ori	r23, 0x84	; 132
      72:	65 72       	andi	r22, 0x25	; 37
      74:	20 53       	subi	r18, 0x30	; 48
      76:	74 61       	ori	r23, 0x14	; 20
      78:	74 69       	ori	r23, 0x94	; 148
      7a:	6f 6e       	ori	r22, 0xEF	; 239
      7c:	20 76       	andi	r18, 0x60	; 96
      7e:	31 2e       	mov	r3, r17
      80:	30 00       	.word	0x0030	; ????

00000082 <digital_pin_to_timer_PGM>:
      82:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      92:	00 00 00 00                                         ....

00000096 <digital_pin_to_bit_mask_PGM>:
      96:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a6:	04 08 10 20                                         ... 

000000aa <digital_pin_to_port_PGM>:
      aa:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ba:	03 03 03 03                                         ....

000000be <port_to_input_PGM>:
      be:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000c8 <port_to_output_PGM>:
      c8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000d2 <port_to_mode_PGM>:
      d2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000dc <__ctors_start>:
      dc:	47 03       	mulsu	r20, r23
      de:	f8 06       	cpc	r15, r24
      e0:	80 16       	cp	r8, r16

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf ef       	ldi	r28, 0xFF	; 255
      e8:	d8 e0       	ldi	r29, 0x08	; 8
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_copy_data>:
      ee:	12 e0       	ldi	r17, 0x02	; 2
      f0:	a0 e0       	ldi	r26, 0x00	; 0
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	ec e3       	ldi	r30, 0x3C	; 60
      f6:	f6 e3       	ldi	r31, 0x36	; 54
      f8:	02 c0       	rjmp	.+4      	; 0xfe <__do_copy_data+0x10>
      fa:	05 90       	lpm	r0, Z+
      fc:	0d 92       	st	X+, r0
      fe:	a4 35       	cpi	r26, 0x54	; 84
     100:	b1 07       	cpc	r27, r17
     102:	d9 f7       	brne	.-10     	; 0xfa <__do_copy_data+0xc>

00000104 <__do_clear_bss>:
     104:	24 e0       	ldi	r18, 0x04	; 4
     106:	a4 e5       	ldi	r26, 0x54	; 84
     108:	b2 e0       	ldi	r27, 0x02	; 2
     10a:	01 c0       	rjmp	.+2      	; 0x10e <.do_clear_bss_start>

0000010c <.do_clear_bss_loop>:
     10c:	1d 92       	st	X+, r1

0000010e <.do_clear_bss_start>:
     10e:	aa 34       	cpi	r26, 0x4A	; 74
     110:	b2 07       	cpc	r27, r18
     112:	e1 f7       	brne	.-8      	; 0x10c <.do_clear_bss_loop>

00000114 <__do_global_ctors>:
     114:	10 e0       	ldi	r17, 0x00	; 0
     116:	c1 e7       	ldi	r28, 0x71	; 113
     118:	d0 e0       	ldi	r29, 0x00	; 0
     11a:	04 c0       	rjmp	.+8      	; 0x124 <__do_global_ctors+0x10>
     11c:	21 97       	sbiw	r28, 0x01	; 1
     11e:	fe 01       	movw	r30, r28
     120:	0e 94 07 1b 	call	0x360e	; 0x360e <__tablejump2__>
     124:	ce 36       	cpi	r28, 0x6E	; 110
     126:	d1 07       	cpc	r29, r17
     128:	c9 f7       	brne	.-14     	; 0x11c <__do_global_ctors+0x8>
     12a:	0e 94 26 07 	call	0xe4c	; 0xe4c <main>
     12e:	0c 94 1c 1b 	jmp	0x3638	; 0x3638 <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <_Z6T1_isrv>:
void clear_sample_timer(void)
{
	
	noInterrupts();
	sample_timer = 0;
	interrupts();
     136:	40 91 5c 02 	lds	r20, 0x025C	; 0x80025c <debounce_timer>
     13a:	50 91 5d 02 	lds	r21, 0x025D	; 0x80025d <debounce_timer+0x1>
     13e:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <debounce_timer+0x2>
     142:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <debounce_timer+0x3>
     146:	4f 5f       	subi	r20, 0xFF	; 255
     148:	5f 4f       	sbci	r21, 0xFF	; 255
     14a:	6f 4f       	sbci	r22, 0xFF	; 255
     14c:	7f 4f       	sbci	r23, 0xFF	; 255
     14e:	40 93 5c 02 	sts	0x025C, r20	; 0x80025c <debounce_timer>
     152:	50 93 5d 02 	sts	0x025D, r21	; 0x80025d <debounce_timer+0x1>
     156:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <debounce_timer+0x2>
     15a:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <debounce_timer+0x3>
     15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     162:	88 23       	and	r24, r24
     164:	99 f0       	breq	.+38     	; 0x18c <_Z6T1_isrv+0x56>
     166:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <sample_timer>
     16a:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <sample_timer+0x1>
     16e:	a0 91 5a 02 	lds	r26, 0x025A	; 0x80025a <sample_timer+0x2>
     172:	b0 91 5b 02 	lds	r27, 0x025B	; 0x80025b <sample_timer+0x3>
     176:	01 96       	adiw	r24, 0x01	; 1
     178:	a1 1d       	adc	r26, r1
     17a:	b1 1d       	adc	r27, r1
     17c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <sample_timer>
     180:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <sample_timer+0x1>
     184:	a0 93 5a 02 	sts	0x025A, r26	; 0x80025a <sample_timer+0x2>
     188:	b0 93 5b 02 	sts	0x025B, r27	; 0x80025b <sample_timer+0x3>
     18c:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <sample_timer>
     190:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <sample_timer+0x1>
     194:	a0 91 5a 02 	lds	r26, 0x025A	; 0x80025a <sample_timer+0x2>
     198:	b0 91 5b 02 	lds	r27, 0x025B	; 0x80025b <sample_timer+0x3>
     19c:	88 3e       	cpi	r24, 0xE8	; 232
     19e:	93 40       	sbci	r25, 0x03	; 3
     1a0:	a1 05       	cpc	r26, r1
     1a2:	b1 05       	cpc	r27, r1
     1a4:	68 f0       	brcs	.+26     	; 0x1c0 <_Z6T1_isrv+0x8a>
     1a6:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <sample_timer>
     1aa:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <sample_timer+0x1>
     1ae:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <sample_timer+0x2>
     1b2:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <sample_timer+0x3>
     1b6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <new_wind_sample>
     1c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     1c4:	83 30       	cpi	r24, 0x03	; 3
     1c6:	21 f1       	breq	.+72     	; 0x210 <_Z6T1_isrv+0xda>
     1c8:	28 f4       	brcc	.+10     	; 0x1d4 <_Z6T1_isrv+0x9e>
     1ca:	81 30       	cpi	r24, 0x01	; 1
     1cc:	41 f0       	breq	.+16     	; 0x1de <_Z6T1_isrv+0xa8>
     1ce:	82 30       	cpi	r24, 0x02	; 2
     1d0:	99 f0       	breq	.+38     	; 0x1f8 <_Z6T1_isrv+0xc2>
     1d2:	08 95       	ret
     1d4:	84 30       	cpi	r24, 0x04	; 4
     1d6:	79 f1       	breq	.+94     	; 0x236 <_Z6T1_isrv+0x100>
     1d8:	85 30       	cpi	r24, 0x05	; 5
     1da:	c9 f1       	breq	.+114    	; 0x24e <_Z6T1_isrv+0x118>
     1dc:	08 95       	ret
     1de:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <pulse_count+0x1>
     1e2:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <pulse_count>
     1e6:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <sample_timer>
     1ea:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <sample_timer+0x1>
     1ee:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <sample_timer+0x2>
     1f2:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <sample_timer+0x3>
     1f6:	13 c0       	rjmp	.+38     	; 0x21e <_Z6T1_isrv+0xe8>
     1f8:	1a 99       	sbic	0x03, 2	; 3
     1fa:	33 c0       	rjmp	.+102    	; 0x262 <_Z6T1_isrv+0x12c>
     1fc:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <debounce_timer>
     200:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <debounce_timer+0x1>
     204:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <debounce_timer+0x2>
     208:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <debounce_timer+0x3>
     20c:	83 e0       	ldi	r24, 0x03	; 3
     20e:	27 c0       	rjmp	.+78     	; 0x25e <_Z6T1_isrv+0x128>
     210:	42 30       	cpi	r20, 0x02	; 2
     212:	51 05       	cpc	r21, r1
     214:	61 05       	cpc	r22, r1
     216:	71 05       	cpc	r23, r1
     218:	21 f5       	brne	.+72     	; 0x262 <_Z6T1_isrv+0x12c>
     21a:	1a 9b       	sbis	0x03, 2	; 3
     21c:	02 c0       	rjmp	.+4      	; 0x222 <_Z6T1_isrv+0xec>
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	1e c0       	rjmp	.+60     	; 0x25e <_Z6T1_isrv+0x128>
     222:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <pulse_count>
     226:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <pulse_count+0x1>
     22a:	01 96       	adiw	r24, 0x01	; 1
     22c:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <pulse_count+0x1>
     230:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <pulse_count>
     234:	13 c0       	rjmp	.+38     	; 0x25c <_Z6T1_isrv+0x126>
     236:	1a 9b       	sbis	0x03, 2	; 3
     238:	14 c0       	rjmp	.+40     	; 0x262 <_Z6T1_isrv+0x12c>
     23a:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <debounce_timer>
     23e:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <debounce_timer+0x1>
     242:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <debounce_timer+0x2>
     246:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <debounce_timer+0x3>
     24a:	85 e0       	ldi	r24, 0x05	; 5
     24c:	08 c0       	rjmp	.+16     	; 0x25e <_Z6T1_isrv+0x128>
     24e:	42 30       	cpi	r20, 0x02	; 2
     250:	51 05       	cpc	r21, r1
     252:	61 05       	cpc	r22, r1
     254:	71 05       	cpc	r23, r1
     256:	29 f4       	brne	.+10     	; 0x262 <_Z6T1_isrv+0x12c>
     258:	1a 99       	sbic	0x03, 2	; 3
     25a:	e1 cf       	rjmp	.-62     	; 0x21e <_Z6T1_isrv+0xe8>
     25c:	84 e0       	ldi	r24, 0x04	; 4
     25e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     262:	08 95       	ret

00000264 <_Z11timer1_initv>:
     264:	48 e8       	ldi	r20, 0x88	; 136
     266:	53 e1       	ldi	r21, 0x13	; 19
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	80 e8       	ldi	r24, 0x80	; 128
     26e:	93 e0       	ldi	r25, 0x03	; 3
     270:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN8TimerOne10initializeEl>
     274:	2f ef       	ldi	r18, 0xFF	; 255
     276:	3f ef       	ldi	r19, 0xFF	; 255
     278:	a9 01       	movw	r20, r18
     27a:	6b e9       	ldi	r22, 0x9B	; 155
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	80 e8       	ldi	r24, 0x80	; 128
     280:	93 e0       	ldi	r25, 0x03	; 3
     282:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <_ZN8TimerOne15attachInterruptEPFvvEl>

00000286 <setup>:
     286:	0f 93       	push	r16
     288:	1f 93       	push	r17
     28a:	8b eb       	ldi	r24, 0xBB	; 187
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <psensor_data+0x1>
     292:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <psensor_data>
     296:	26 e0       	ldi	r18, 0x06	; 6
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	56 e9       	ldi	r21, 0x96	; 150
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	86 ed       	ldi	r24, 0xD6	; 214
     2a2:	92 e0       	ldi	r25, 0x02	; 2
     2a4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <_ZN14HardwareSerial5beginEmh>
     2a8:	68 e6       	ldi	r22, 0x68	; 104
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	86 ed       	ldi	r24, 0xD6	; 214
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN5Print7printlnEPK19__FlashStringHelper>
     2b4:	80 e6       	ldi	r24, 0x60	; 96
     2b6:	92 e0       	ldi	r25, 0x02	; 2
     2b8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_ZN15Adafruit_BME2805beginEv>
     2bc:	81 11       	cpse	r24, r1
     2be:	07 c0       	rjmp	.+14     	; 0x2ce <setup+0x48>
     2c0:	62 e8       	ldi	r22, 0x82	; 130
     2c2:	71 e0       	ldi	r23, 0x01	; 1
     2c4:	86 ed       	ldi	r24, 0xD6	; 214
     2c6:	92 e0       	ldi	r25, 0x02	; 2
     2c8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN5Print7printlnEPKc>
     2cc:	ff cf       	rjmp	.-2      	; 0x2cc <setup+0x46>
     2ce:	6b e9       	ldi	r22, 0x9B	; 155
     2d0:	71 e0       	ldi	r23, 0x01	; 1
     2d2:	86 ed       	ldi	r24, 0xD6	; 214
     2d4:	92 e0       	ldi	r25, 0x02	; 2
     2d6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN5Print7printlnEPKc>
     2da:	06 e8       	ldi	r16, 0x86	; 134
     2dc:	13 e0       	ldi	r17, 0x03	; 3
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	40 e0       	ldi	r20, 0x00	; 0
     2e2:	61 e0       	ldi	r22, 0x01	; 1
     2e4:	83 e9       	ldi	r24, 0x93	; 147
     2e6:	92 e0       	ldi	r25, 0x02	; 2
     2e8:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN17Adafruit_VEML60755beginE24veml6075_integrationtimebbP7TwoWire>
     2ec:	81 11       	cpse	r24, r1
     2ee:	07 c0       	rjmp	.+14     	; 0x2fe <setup+0x78>
     2f0:	66 eb       	ldi	r22, 0xB6	; 182
     2f2:	71 e0       	ldi	r23, 0x01	; 1
     2f4:	86 ed       	ldi	r24, 0xD6	; 214
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN5Print7printlnEPKc>
     2fc:	ff cf       	rjmp	.-2      	; 0x2fc <setup+0x76>
     2fe:	61 ed       	ldi	r22, 0xD1	; 209
     300:	71 e0       	ldi	r23, 0x01	; 1
     302:	86 ed       	ldi	r24, 0xD6	; 214
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN5Print7printlnEPKc>
     30a:	0e 94 32 01 	call	0x264	; 0x264 <_Z11timer1_initv>
     30e:	6c ee       	ldi	r22, 0xEC	; 236
     310:	71 e0       	ldi	r23, 0x01	; 1
     312:	86 ed       	ldi	r24, 0xD6	; 214
     314:	92 e0       	ldi	r25, 0x02	; 2
     316:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN5Print7printlnEPKc>
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	72 e0       	ldi	r23, 0x02	; 2
     31e:	86 ed       	ldi	r24, 0xD6	; 214
     320:	92 e0       	ldi	r25, 0x02	; 2
     322:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN5Print7printlnEPKc>
     326:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <psensor_data>
     32a:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <psensor_data+0x1>
     32e:	14 82       	std	Z+4, r1	; 0x04
     330:	15 82       	std	Z+5, r1	; 0x05
     332:	16 82       	std	Z+6, r1	; 0x06
     334:	17 82       	std	Z+7, r1	; 0x07
     336:	10 82       	st	Z, r1
     338:	11 82       	std	Z+1, r1	; 0x01
     33a:	12 82       	std	Z+2, r1	; 0x02
     33c:	13 82       	std	Z+3, r1	; 0x03
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	08 95       	ret

00000344 <_Z13sample_bme280v>:
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	80 e6       	ldi	r24, 0x60	; 96
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN15Adafruit_BME28015readTemperatureEv>
     350:	c0 91 b9 02 	lds	r28, 0x02B9	; 0x8002b9 <psensor_data>
     354:	d0 91 ba 02 	lds	r29, 0x02BA	; 0x8002ba <psensor_data+0x1>
     358:	26 e6       	ldi	r18, 0x66	; 102
     35a:	36 e6       	ldi	r19, 0x66	; 102
     35c:	46 ee       	ldi	r20, 0xE6	; 230
     35e:	5f e3       	ldi	r21, 0x3F	; 63
     360:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	52 e4       	ldi	r21, 0x42	; 66
     36c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__addsf3>
     370:	68 87       	std	Y+8, r22	; 0x08
     372:	79 87       	std	Y+9, r23	; 0x09
     374:	8a 87       	std	Y+10, r24	; 0x0a
     376:	9b 87       	std	Y+11, r25	; 0x0b
     378:	80 e6       	ldi	r24, 0x60	; 96
     37a:	92 e0       	ldi	r25, 0x02	; 2
     37c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <_ZN15Adafruit_BME28012readHumidityEv>
     380:	68 8b       	std	Y+16, r22	; 0x10
     382:	79 8b       	std	Y+17, r23	; 0x11
     384:	8a 8b       	std	Y+18, r24	; 0x12
     386:	9b 8b       	std	Y+19, r25	; 0x13
     388:	80 e6       	ldi	r24, 0x60	; 96
     38a:	92 e0       	ldi	r25, 0x02	; 2
     38c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <_ZN15Adafruit_BME28012readPressureEv>
     390:	c0 91 b9 02 	lds	r28, 0x02B9	; 0x8002b9 <psensor_data>
     394:	d0 91 ba 02 	lds	r29, 0x02BA	; 0x8002ba <psensor_data+0x1>
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	48 ec       	ldi	r20, 0xC8	; 200
     39e:	52 e4       	ldi	r21, 0x42	; 66
     3a0:	0e 94 c1 03 	call	0x782	; 0x782 <__divsf3>
     3a4:	2d ee       	ldi	r18, 0xED	; 237
     3a6:	33 ed       	ldi	r19, 0xD3	; 211
     3a8:	41 ef       	ldi	r20, 0xF1	; 241
     3aa:	5c e3       	ldi	r21, 0x3C	; 60
     3ac:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
     3b0:	6c 8b       	std	Y+20, r22	; 0x14
     3b2:	7d 8b       	std	Y+21, r23	; 0x15
     3b4:	8e 8b       	std	Y+22, r24	; 0x16
     3b6:	9f 8b       	std	Y+23, r25	; 0x17
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <_Z9sample_uvv>:
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	c0 91 b9 02 	lds	r28, 0x02B9	; 0x8002b9 <psensor_data>
     3c6:	d0 91 ba 02 	lds	r29, 0x02BA	; 0x8002ba <psensor_data+0x1>
     3ca:	83 e9       	ldi	r24, 0x93	; 147
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <_ZN17Adafruit_VEML60757readUVIEv>
     3d2:	6c 87       	std	Y+12, r22	; 0x0c
     3d4:	7d 87       	std	Y+13, r23	; 0x0d
     3d6:	8e 87       	std	Y+14, r24	; 0x0e
     3d8:	9f 87       	std	Y+15, r25	; 0x0f
     3da:	c0 91 b9 02 	lds	r28, 0x02B9	; 0x8002b9 <psensor_data>
     3de:	d0 91 ba 02 	lds	r29, 0x02BA	; 0x8002ba <psensor_data+0x1>
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	a9 01       	movw	r20, r18
     3e8:	6c 85       	ldd	r22, Y+12	; 0x0c
     3ea:	7d 85       	ldd	r23, Y+13	; 0x0d
     3ec:	8e 85       	ldd	r24, Y+14	; 0x0e
     3ee:	9f 85       	ldd	r25, Y+15	; 0x0f
     3f0:	0e 94 bc 03 	call	0x778	; 0x778 <__cmpsf2>
     3f4:	87 ff       	sbrs	r24, 7
     3f6:	04 c0       	rjmp	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
     3f8:	1c 86       	std	Y+12, r1	; 0x0c
     3fa:	1d 86       	std	Y+13, r1	; 0x0d
     3fc:	1e 86       	std	Y+14, r1	; 0x0e
     3fe:	1f 86       	std	Y+15, r1	; 0x0f
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <_Z7tx_datav>:
     406:	62 e0       	ldi	r22, 0x02	; 2
     408:	72 e0       	ldi	r23, 0x02	; 2
     40a:	86 ed       	ldi	r24, 0xD6	; 214
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	0e 94 98 07 	call	0xf30	; 0xf30 <_ZN5Print5printEPKc>
     412:	40 91 54 02 	lds	r20, 0x0254	; 0x800254 <__data_end>
     416:	50 91 55 02 	lds	r21, 0x0255	; 0x800255 <__data_end+0x1>
     41a:	60 91 56 02 	lds	r22, 0x0256	; 0x800256 <__data_end+0x2>
     41e:	70 91 57 02 	lds	r23, 0x0257	; 0x800257 <__data_end+0x3>
     422:	db 01       	movw	r26, r22
     424:	ca 01       	movw	r24, r20
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	a1 1d       	adc	r26, r1
     42a:	b1 1d       	adc	r27, r1
     42c:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__data_end>
     430:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <__data_end+0x1>
     434:	a0 93 56 02 	sts	0x0256, r26	; 0x800256 <__data_end+0x2>
     438:	b0 93 57 02 	sts	0x0257, r27	; 0x800257 <__data_end+0x3>
     43c:	2a e0       	ldi	r18, 0x0A	; 10
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	86 ed       	ldi	r24, 0xD6	; 214
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Print5printEmi>
     448:	66 e0       	ldi	r22, 0x06	; 6
     44a:	72 e0       	ldi	r23, 0x02	; 2
     44c:	86 ed       	ldi	r24, 0xD6	; 214
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	0e 94 98 07 	call	0xf30	; 0xf30 <_ZN5Print5printEPKc>
     454:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <psensor_data>
     458:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <psensor_data+0x1>
     45c:	40 85       	ldd	r20, Z+8	; 0x08
     45e:	51 85       	ldd	r21, Z+9	; 0x09
     460:	62 85       	ldd	r22, Z+10	; 0x0a
     462:	73 85       	ldd	r23, Z+11	; 0x0b
     464:	22 e0       	ldi	r18, 0x02	; 2
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	86 ed       	ldi	r24, 0xD6	; 214
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN5Print5printEdi>
     470:	6a e0       	ldi	r22, 0x0A	; 10
     472:	72 e0       	ldi	r23, 0x02	; 2
     474:	86 ed       	ldi	r24, 0xD6	; 214
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	0e 94 98 07 	call	0xf30	; 0xf30 <_ZN5Print5printEPKc>
     47c:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <psensor_data>
     480:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <psensor_data+0x1>
     484:	40 89       	ldd	r20, Z+16	; 0x10
     486:	51 89       	ldd	r21, Z+17	; 0x11
     488:	62 89       	ldd	r22, Z+18	; 0x12
     48a:	73 89       	ldd	r23, Z+19	; 0x13
     48c:	22 e0       	ldi	r18, 0x02	; 2
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	86 ed       	ldi	r24, 0xD6	; 214
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN5Print5printEdi>
     498:	6e e0       	ldi	r22, 0x0E	; 14
     49a:	72 e0       	ldi	r23, 0x02	; 2
     49c:	86 ed       	ldi	r24, 0xD6	; 214
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	0e 94 98 07 	call	0xf30	; 0xf30 <_ZN5Print5printEPKc>
     4a4:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <psensor_data>
     4a8:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <psensor_data+0x1>
     4ac:	44 89       	ldd	r20, Z+20	; 0x14
     4ae:	55 89       	ldd	r21, Z+21	; 0x15
     4b0:	66 89       	ldd	r22, Z+22	; 0x16
     4b2:	77 89       	ldd	r23, Z+23	; 0x17
     4b4:	22 e0       	ldi	r18, 0x02	; 2
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	86 ed       	ldi	r24, 0xD6	; 214
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN5Print5printEdi>
     4c0:	62 e1       	ldi	r22, 0x12	; 18
     4c2:	72 e0       	ldi	r23, 0x02	; 2
     4c4:	86 ed       	ldi	r24, 0xD6	; 214
     4c6:	92 e0       	ldi	r25, 0x02	; 2
     4c8:	0e 94 98 07 	call	0xf30	; 0xf30 <_ZN5Print5printEPKc>
     4cc:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <psensor_data>
     4d0:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <psensor_data+0x1>
     4d4:	40 81       	ld	r20, Z
     4d6:	51 81       	ldd	r21, Z+1	; 0x01
     4d8:	62 81       	ldd	r22, Z+2	; 0x02
     4da:	73 81       	ldd	r23, Z+3	; 0x03
     4dc:	22 e0       	ldi	r18, 0x02	; 2
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	86 ed       	ldi	r24, 0xD6	; 214
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN5Print5printEdi>
     4e8:	66 e1       	ldi	r22, 0x16	; 22
     4ea:	72 e0       	ldi	r23, 0x02	; 2
     4ec:	86 ed       	ldi	r24, 0xD6	; 214
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	0e 94 98 07 	call	0xf30	; 0xf30 <_ZN5Print5printEPKc>
     4f4:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <psensor_data>
     4f8:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <psensor_data+0x1>
     4fc:	44 81       	ldd	r20, Z+4	; 0x04
     4fe:	55 81       	ldd	r21, Z+5	; 0x05
     500:	66 81       	ldd	r22, Z+6	; 0x06
     502:	77 81       	ldd	r23, Z+7	; 0x07
     504:	22 e0       	ldi	r18, 0x02	; 2
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	86 ed       	ldi	r24, 0xD6	; 214
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN5Print5printEdi>
     510:	6a e1       	ldi	r22, 0x1A	; 26
     512:	72 e0       	ldi	r23, 0x02	; 2
     514:	86 ed       	ldi	r24, 0xD6	; 214
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	0e 94 98 07 	call	0xf30	; 0xf30 <_ZN5Print5printEPKc>
     51c:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <psensor_data>
     520:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <psensor_data+0x1>
     524:	44 85       	ldd	r20, Z+12	; 0x0c
     526:	55 85       	ldd	r21, Z+13	; 0x0d
     528:	66 85       	ldd	r22, Z+14	; 0x0e
     52a:	77 85       	ldd	r23, Z+15	; 0x0f
     52c:	22 e0       	ldi	r18, 0x02	; 2
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	86 ed       	ldi	r24, 0xD6	; 214
     532:	92 e0       	ldi	r25, 0x02	; 2
     534:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN5Print5printEdi>
     538:	6e e1       	ldi	r22, 0x1E	; 30
     53a:	72 e0       	ldi	r23, 0x02	; 2
     53c:	86 ed       	ldi	r24, 0xD6	; 214
     53e:	92 e0       	ldi	r25, 0x02	; 2
     540:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <_ZN5Print7printlnEPKc>

00000544 <_Z15sample_wind_dirv>:
     544:	cf 92       	push	r12
     546:	df 92       	push	r13
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	8e e0       	ldi	r24, 0x0E	; 14
     556:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <analogRead>
     55a:	bc 01       	movw	r22, r24
     55c:	99 0f       	add	r25, r25
     55e:	88 0b       	sbc	r24, r24
     560:	99 0b       	sbc	r25, r25
     562:	0e 94 35 04 	call	0x86a	; 0x86a <__floatsisf>
     566:	2a e9       	ldi	r18, 0x9A	; 154
     568:	39 e9       	ldi	r19, 0x99	; 153
     56a:	49 e9       	ldi	r20, 0x99	; 153
     56c:	50 e4       	ldi	r21, 0x40	; 64
     56e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e8       	ldi	r20, 0x80	; 128
     578:	5a e3       	ldi	r21, 0x3A	; 58
     57a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
     57e:	6b 01       	movw	r12, r22
     580:	7c 01       	movw	r14, r24
     582:	01 e4       	ldi	r16, 0x41	; 65
     584:	11 e0       	ldi	r17, 0x01	; 1
     586:	c0 e0       	ldi	r28, 0x00	; 0
     588:	d0 e0       	ldi	r29, 0x00	; 0
     58a:	f8 01       	movw	r30, r16
     58c:	61 91       	ld	r22, Z+
     58e:	71 91       	ld	r23, Z+
     590:	81 91       	ld	r24, Z+
     592:	91 91       	ld	r25, Z+
     594:	8f 01       	movw	r16, r30
     596:	2a e0       	ldi	r18, 0x0A	; 10
     598:	37 ed       	ldi	r19, 0xD7	; 215
     59a:	43 ea       	ldi	r20, 0xA3	; 163
     59c:	5c e3       	ldi	r21, 0x3C	; 60
     59e:	0e 94 4f 03 	call	0x69e	; 0x69e <__subsf3>
     5a2:	9b 01       	movw	r18, r22
     5a4:	ac 01       	movw	r20, r24
     5a6:	c7 01       	movw	r24, r14
     5a8:	b6 01       	movw	r22, r12
     5aa:	0e 94 bc 03 	call	0x778	; 0x778 <__cmpsf2>
     5ae:	18 16       	cp	r1, r24
     5b0:	2c f4       	brge	.+10     	; 0x5bc <_Z15sample_wind_dirv+0x78>
     5b2:	21 96       	adiw	r28, 0x01	; 1
     5b4:	c0 31       	cpi	r28, 0x10	; 16
     5b6:	d1 05       	cpc	r29, r1
     5b8:	41 f7       	brne	.-48     	; 0x58a <_Z15sample_wind_dirv+0x46>
     5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <_Z15sample_wind_dirv+0x7c>
     5bc:	20 97       	sbiw	r28, 0x00	; 0
     5be:	09 f0       	breq	.+2      	; 0x5c2 <_Z15sample_wind_dirv+0x7e>
     5c0:	21 97       	sbiw	r28, 0x01	; 1
     5c2:	cc 0f       	add	r28, r28
     5c4:	dd 1f       	adc	r29, r29
     5c6:	cc 0f       	add	r28, r28
     5c8:	dd 1f       	adc	r29, r29
     5ca:	cf 5f       	subi	r28, 0xFF	; 255
     5cc:	de 4f       	sbci	r29, 0xFE	; 254
     5ce:	88 81       	ld	r24, Y
     5d0:	99 81       	ldd	r25, Y+1	; 0x01
     5d2:	aa 81       	ldd	r26, Y+2	; 0x02
     5d4:	bb 81       	ldd	r27, Y+3	; 0x03
     5d6:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <psensor_data>
     5da:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <psensor_data+0x1>
     5de:	84 83       	std	Z+4, r24	; 0x04
     5e0:	95 83       	std	Z+5, r25	; 0x05
     5e2:	a6 83       	std	Z+6, r26	; 0x06
     5e4:	b7 83       	std	Z+7, r27	; 0x07
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	df 90       	pop	r13
     5f4:	cf 90       	pop	r12
     5f6:	08 95       	ret

000005f8 <_Z16read_pulse_countv>:

uint16_t read_pulse_count(void)
{
	uint16_t pulses;
	
	noInterrupts();
     5f8:	f8 94       	cli
	pulses = pulse_count;
     5fa:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <pulse_count>
     5fe:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <pulse_count+0x1>
	interrupts();
     602:	78 94       	sei
	return(pulses);
}
     604:	08 95       	ret

00000606 <_Z12start_samplev>:


void start_sample(void)
{
	noInterrupts();
     606:	f8 94       	cli
	speed_state = WIND_SPEED_INIT;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	new_wind_sample = FALSE;
     60e:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <new_wind_sample>
	interrupts();
     612:	78 94       	sei
     614:	08 95       	ret

00000616 <_Z18read_sample_statusv>:

uint8_t read_sample_status(void)
{
	uint8_t	sts;
	
	noInterrupts();
     616:	f8 94       	cli
	sts = new_wind_sample;
     618:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <new_wind_sample>
	interrupts();
     61c:	78 94       	sei
	return(sts);
	
}
     61e:	08 95       	ret

00000620 <_Z17sample_wind_speedv>:
	
}


uint8_t sample_wind_speed(void)
{
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
	
	uint16_t pulses;
	static float speed_sample;
	
	
	start_sample();
     624:	0e 94 03 03 	call	0x606	; 0x606 <_Z12start_samplev>
	
	while(!read_sample_status());
     628:	0e 94 0b 03 	call	0x616	; 0x616 <_Z18read_sample_statusv>
     62c:	88 23       	and	r24, r24
     62e:	e1 f3       	breq	.-8      	; 0x628 <_Z17sample_wind_speedv+0x8>
	
	pulses = read_pulse_count();
     630:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_Z16read_pulse_countv>
	speed_sample = (float)pulses;
	speed_sample  = speed_sample * 1.492 / 5.0;
	psensor_data->wind_speed = speed_sample;
     634:	c0 91 b9 02 	lds	r28, 0x02B9	; 0x8002b9 <psensor_data>
     638:	d0 91 ba 02 	lds	r29, 0x02BA	; 0x8002ba <psensor_data+0x1>
     63c:	bc 01       	movw	r22, r24
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 33 04 	call	0x866	; 0x866 <__floatunsisf>
     646:	2b ed       	ldi	r18, 0xDB	; 219
     648:	39 ef       	ldi	r19, 0xF9	; 249
     64a:	4e eb       	ldi	r20, 0xBE	; 190
     64c:	5f e3       	ldi	r21, 0x3F	; 63
     64e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	40 ea       	ldi	r20, 0xA0	; 160
     658:	50 e4       	ldi	r21, 0x40	; 64
     65a:	0e 94 c1 03 	call	0x782	; 0x782 <__divsf3>
     65e:	68 83       	st	Y, r22
     660:	79 83       	std	Y+1, r23	; 0x01
     662:	8a 83       	std	Y+2, r24	; 0x02
     664:	9b 83       	std	Y+3, r25	; 0x03
	
	return(TRUE);
} // end sample wind
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <loop>:



void loop() 
{ 
    sample_bme280();
     66e:	0e 94 a2 01 	call	0x344	; 0x344 <_Z13sample_bme280v>
	sample_uv();
     672:	0e 94 df 01 	call	0x3be	; 0x3be <_Z9sample_uvv>
	sample_wind_speed();
     676:	0e 94 10 03 	call	0x620	; 0x620 <_Z17sample_wind_speedv>
	sample_wind_dir();
     67a:	0e 94 a2 02 	call	0x544	; 0x544 <_Z15sample_wind_dirv>
	tx_data();
     67e:	0e 94 03 02 	call	0x406	; 0x406 <_Z7tx_datav>
    delay(500);
     682:	64 ef       	ldi	r22, 0xF4	; 244
     684:	71 e0       	ldi	r23, 0x01	; 1
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <delay>

0000068e <_GLOBAL__sub_I_wind_voltage>:
void sample_bme280(void);
void sample_uv(void);
void tx_data(void);

// uv sensor
Adafruit_VEML6075 uv = Adafruit_VEML6075();
     68e:	83 e9       	ldi	r24, 0x93	; 147
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <_ZN17Adafruit_VEML6075C1Ev>

// BME280 sensor
Adafruit_BME280 bme280; // I2C
     696:	80 e6       	ldi	r24, 0x60	; 96
     698:	92 e0       	ldi	r25, 0x02	; 2
     69a:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <_ZN15Adafruit_BME280C1Ev>

0000069e <__subsf3>:
     69e:	50 58       	subi	r21, 0x80	; 128

000006a0 <__addsf3>:
     6a0:	bb 27       	eor	r27, r27
     6a2:	aa 27       	eor	r26, r26
     6a4:	0e 94 67 03 	call	0x6ce	; 0x6ce <__addsf3x>
     6a8:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_round>
     6ac:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_pscA>
     6b0:	38 f0       	brcs	.+14     	; 0x6c0 <__addsf3+0x20>
     6b2:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_pscB>
     6b6:	20 f0       	brcs	.+8      	; 0x6c0 <__addsf3+0x20>
     6b8:	39 f4       	brne	.+14     	; 0x6c8 <__addsf3+0x28>
     6ba:	9f 3f       	cpi	r25, 0xFF	; 255
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__addsf3+0x24>
     6be:	26 f4       	brtc	.+8      	; 0x6c8 <__addsf3+0x28>
     6c0:	0c 94 9a 04 	jmp	0x934	; 0x934 <__fp_nan>
     6c4:	0e f4       	brtc	.+2      	; 0x6c8 <__addsf3+0x28>
     6c6:	e0 95       	com	r30
     6c8:	e7 fb       	bst	r30, 7
     6ca:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_inf>

000006ce <__addsf3x>:
     6ce:	e9 2f       	mov	r30, r25
     6d0:	0e 94 bc 04 	call	0x978	; 0x978 <__fp_split3>
     6d4:	58 f3       	brcs	.-42     	; 0x6ac <__addsf3+0xc>
     6d6:	ba 17       	cp	r27, r26
     6d8:	62 07       	cpc	r22, r18
     6da:	73 07       	cpc	r23, r19
     6dc:	84 07       	cpc	r24, r20
     6de:	95 07       	cpc	r25, r21
     6e0:	20 f0       	brcs	.+8      	; 0x6ea <__addsf3x+0x1c>
     6e2:	79 f4       	brne	.+30     	; 0x702 <__addsf3x+0x34>
     6e4:	a6 f5       	brtc	.+104    	; 0x74e <__addsf3x+0x80>
     6e6:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_zero>
     6ea:	0e f4       	brtc	.+2      	; 0x6ee <__addsf3x+0x20>
     6ec:	e0 95       	com	r30
     6ee:	0b 2e       	mov	r0, r27
     6f0:	ba 2f       	mov	r27, r26
     6f2:	a0 2d       	mov	r26, r0
     6f4:	0b 01       	movw	r0, r22
     6f6:	b9 01       	movw	r22, r18
     6f8:	90 01       	movw	r18, r0
     6fa:	0c 01       	movw	r0, r24
     6fc:	ca 01       	movw	r24, r20
     6fe:	a0 01       	movw	r20, r0
     700:	11 24       	eor	r1, r1
     702:	ff 27       	eor	r31, r31
     704:	59 1b       	sub	r21, r25
     706:	99 f0       	breq	.+38     	; 0x72e <__addsf3x+0x60>
     708:	59 3f       	cpi	r21, 0xF9	; 249
     70a:	50 f4       	brcc	.+20     	; 0x720 <__addsf3x+0x52>
     70c:	50 3e       	cpi	r21, 0xE0	; 224
     70e:	68 f1       	brcs	.+90     	; 0x76a <__addsf3x+0x9c>
     710:	1a 16       	cp	r1, r26
     712:	f0 40       	sbci	r31, 0x00	; 0
     714:	a2 2f       	mov	r26, r18
     716:	23 2f       	mov	r18, r19
     718:	34 2f       	mov	r19, r20
     71a:	44 27       	eor	r20, r20
     71c:	58 5f       	subi	r21, 0xF8	; 248
     71e:	f3 cf       	rjmp	.-26     	; 0x706 <__addsf3x+0x38>
     720:	46 95       	lsr	r20
     722:	37 95       	ror	r19
     724:	27 95       	ror	r18
     726:	a7 95       	ror	r26
     728:	f0 40       	sbci	r31, 0x00	; 0
     72a:	53 95       	inc	r21
     72c:	c9 f7       	brne	.-14     	; 0x720 <__addsf3x+0x52>
     72e:	7e f4       	brtc	.+30     	; 0x74e <__addsf3x+0x80>
     730:	1f 16       	cp	r1, r31
     732:	ba 0b       	sbc	r27, r26
     734:	62 0b       	sbc	r22, r18
     736:	73 0b       	sbc	r23, r19
     738:	84 0b       	sbc	r24, r20
     73a:	ba f0       	brmi	.+46     	; 0x76a <__addsf3x+0x9c>
     73c:	91 50       	subi	r25, 0x01	; 1
     73e:	a1 f0       	breq	.+40     	; 0x768 <__addsf3x+0x9a>
     740:	ff 0f       	add	r31, r31
     742:	bb 1f       	adc	r27, r27
     744:	66 1f       	adc	r22, r22
     746:	77 1f       	adc	r23, r23
     748:	88 1f       	adc	r24, r24
     74a:	c2 f7       	brpl	.-16     	; 0x73c <__addsf3x+0x6e>
     74c:	0e c0       	rjmp	.+28     	; 0x76a <__addsf3x+0x9c>
     74e:	ba 0f       	add	r27, r26
     750:	62 1f       	adc	r22, r18
     752:	73 1f       	adc	r23, r19
     754:	84 1f       	adc	r24, r20
     756:	48 f4       	brcc	.+18     	; 0x76a <__addsf3x+0x9c>
     758:	87 95       	ror	r24
     75a:	77 95       	ror	r23
     75c:	67 95       	ror	r22
     75e:	b7 95       	ror	r27
     760:	f7 95       	ror	r31
     762:	9e 3f       	cpi	r25, 0xFE	; 254
     764:	08 f0       	brcs	.+2      	; 0x768 <__addsf3x+0x9a>
     766:	b0 cf       	rjmp	.-160    	; 0x6c8 <__addsf3+0x28>
     768:	93 95       	inc	r25
     76a:	88 0f       	add	r24, r24
     76c:	08 f0       	brcs	.+2      	; 0x770 <__addsf3x+0xa2>
     76e:	99 27       	eor	r25, r25
     770:	ee 0f       	add	r30, r30
     772:	97 95       	ror	r25
     774:	87 95       	ror	r24
     776:	08 95       	ret

00000778 <__cmpsf2>:
     778:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__fp_cmp>
     77c:	08 f4       	brcc	.+2      	; 0x780 <__cmpsf2+0x8>
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	08 95       	ret

00000782 <__divsf3>:
     782:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__divsf3x>
     786:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_round>
     78a:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_pscB>
     78e:	58 f0       	brcs	.+22     	; 0x7a6 <__divsf3+0x24>
     790:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_pscA>
     794:	40 f0       	brcs	.+16     	; 0x7a6 <__divsf3+0x24>
     796:	29 f4       	brne	.+10     	; 0x7a2 <__divsf3+0x20>
     798:	5f 3f       	cpi	r21, 0xFF	; 255
     79a:	29 f0       	breq	.+10     	; 0x7a6 <__divsf3+0x24>
     79c:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_inf>
     7a0:	51 11       	cpse	r21, r1
     7a2:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_szero>
     7a6:	0c 94 9a 04 	jmp	0x934	; 0x934 <__fp_nan>

000007aa <__divsf3x>:
     7aa:	0e 94 bc 04 	call	0x978	; 0x978 <__fp_split3>
     7ae:	68 f3       	brcs	.-38     	; 0x78a <__divsf3+0x8>

000007b0 <__divsf3_pse>:
     7b0:	99 23       	and	r25, r25
     7b2:	b1 f3       	breq	.-20     	; 0x7a0 <__divsf3+0x1e>
     7b4:	55 23       	and	r21, r21
     7b6:	91 f3       	breq	.-28     	; 0x79c <__divsf3+0x1a>
     7b8:	95 1b       	sub	r25, r21
     7ba:	55 0b       	sbc	r21, r21
     7bc:	bb 27       	eor	r27, r27
     7be:	aa 27       	eor	r26, r26
     7c0:	62 17       	cp	r22, r18
     7c2:	73 07       	cpc	r23, r19
     7c4:	84 07       	cpc	r24, r20
     7c6:	38 f0       	brcs	.+14     	; 0x7d6 <__divsf3_pse+0x26>
     7c8:	9f 5f       	subi	r25, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	22 0f       	add	r18, r18
     7ce:	33 1f       	adc	r19, r19
     7d0:	44 1f       	adc	r20, r20
     7d2:	aa 1f       	adc	r26, r26
     7d4:	a9 f3       	breq	.-22     	; 0x7c0 <__divsf3_pse+0x10>
     7d6:	35 d0       	rcall	.+106    	; 0x842 <__divsf3_pse+0x92>
     7d8:	0e 2e       	mov	r0, r30
     7da:	3a f0       	brmi	.+14     	; 0x7ea <__divsf3_pse+0x3a>
     7dc:	e0 e8       	ldi	r30, 0x80	; 128
     7de:	32 d0       	rcall	.+100    	; 0x844 <__divsf3_pse+0x94>
     7e0:	91 50       	subi	r25, 0x01	; 1
     7e2:	50 40       	sbci	r21, 0x00	; 0
     7e4:	e6 95       	lsr	r30
     7e6:	00 1c       	adc	r0, r0
     7e8:	ca f7       	brpl	.-14     	; 0x7dc <__divsf3_pse+0x2c>
     7ea:	2b d0       	rcall	.+86     	; 0x842 <__divsf3_pse+0x92>
     7ec:	fe 2f       	mov	r31, r30
     7ee:	29 d0       	rcall	.+82     	; 0x842 <__divsf3_pse+0x92>
     7f0:	66 0f       	add	r22, r22
     7f2:	77 1f       	adc	r23, r23
     7f4:	88 1f       	adc	r24, r24
     7f6:	bb 1f       	adc	r27, r27
     7f8:	26 17       	cp	r18, r22
     7fa:	37 07       	cpc	r19, r23
     7fc:	48 07       	cpc	r20, r24
     7fe:	ab 07       	cpc	r26, r27
     800:	b0 e8       	ldi	r27, 0x80	; 128
     802:	09 f0       	breq	.+2      	; 0x806 <__divsf3_pse+0x56>
     804:	bb 0b       	sbc	r27, r27
     806:	80 2d       	mov	r24, r0
     808:	bf 01       	movw	r22, r30
     80a:	ff 27       	eor	r31, r31
     80c:	93 58       	subi	r25, 0x83	; 131
     80e:	5f 4f       	sbci	r21, 0xFF	; 255
     810:	3a f0       	brmi	.+14     	; 0x820 <__divsf3_pse+0x70>
     812:	9e 3f       	cpi	r25, 0xFE	; 254
     814:	51 05       	cpc	r21, r1
     816:	78 f0       	brcs	.+30     	; 0x836 <__divsf3_pse+0x86>
     818:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_inf>
     81c:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_szero>
     820:	5f 3f       	cpi	r21, 0xFF	; 255
     822:	e4 f3       	brlt	.-8      	; 0x81c <__divsf3_pse+0x6c>
     824:	98 3e       	cpi	r25, 0xE8	; 232
     826:	d4 f3       	brlt	.-12     	; 0x81c <__divsf3_pse+0x6c>
     828:	86 95       	lsr	r24
     82a:	77 95       	ror	r23
     82c:	67 95       	ror	r22
     82e:	b7 95       	ror	r27
     830:	f7 95       	ror	r31
     832:	9f 5f       	subi	r25, 0xFF	; 255
     834:	c9 f7       	brne	.-14     	; 0x828 <__divsf3_pse+0x78>
     836:	88 0f       	add	r24, r24
     838:	91 1d       	adc	r25, r1
     83a:	96 95       	lsr	r25
     83c:	87 95       	ror	r24
     83e:	97 f9       	bld	r25, 7
     840:	08 95       	ret
     842:	e1 e0       	ldi	r30, 0x01	; 1
     844:	66 0f       	add	r22, r22
     846:	77 1f       	adc	r23, r23
     848:	88 1f       	adc	r24, r24
     84a:	bb 1f       	adc	r27, r27
     84c:	62 17       	cp	r22, r18
     84e:	73 07       	cpc	r23, r19
     850:	84 07       	cpc	r24, r20
     852:	ba 07       	cpc	r27, r26
     854:	20 f0       	brcs	.+8      	; 0x85e <__divsf3_pse+0xae>
     856:	62 1b       	sub	r22, r18
     858:	73 0b       	sbc	r23, r19
     85a:	84 0b       	sbc	r24, r20
     85c:	ba 0b       	sbc	r27, r26
     85e:	ee 1f       	adc	r30, r30
     860:	88 f7       	brcc	.-30     	; 0x844 <__divsf3_pse+0x94>
     862:	e0 95       	com	r30
     864:	08 95       	ret

00000866 <__floatunsisf>:
     866:	e8 94       	clt
     868:	09 c0       	rjmp	.+18     	; 0x87c <__floatsisf+0x12>

0000086a <__floatsisf>:
     86a:	97 fb       	bst	r25, 7
     86c:	3e f4       	brtc	.+14     	; 0x87c <__floatsisf+0x12>
     86e:	90 95       	com	r25
     870:	80 95       	com	r24
     872:	70 95       	com	r23
     874:	61 95       	neg	r22
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	8f 4f       	sbci	r24, 0xFF	; 255
     87a:	9f 4f       	sbci	r25, 0xFF	; 255
     87c:	99 23       	and	r25, r25
     87e:	a9 f0       	breq	.+42     	; 0x8aa <__floatsisf+0x40>
     880:	f9 2f       	mov	r31, r25
     882:	96 e9       	ldi	r25, 0x96	; 150
     884:	bb 27       	eor	r27, r27
     886:	93 95       	inc	r25
     888:	f6 95       	lsr	r31
     88a:	87 95       	ror	r24
     88c:	77 95       	ror	r23
     88e:	67 95       	ror	r22
     890:	b7 95       	ror	r27
     892:	f1 11       	cpse	r31, r1
     894:	f8 cf       	rjmp	.-16     	; 0x886 <__floatsisf+0x1c>
     896:	fa f4       	brpl	.+62     	; 0x8d6 <__floatsisf+0x6c>
     898:	bb 0f       	add	r27, r27
     89a:	11 f4       	brne	.+4      	; 0x8a0 <__floatsisf+0x36>
     89c:	60 ff       	sbrs	r22, 0
     89e:	1b c0       	rjmp	.+54     	; 0x8d6 <__floatsisf+0x6c>
     8a0:	6f 5f       	subi	r22, 0xFF	; 255
     8a2:	7f 4f       	sbci	r23, 0xFF	; 255
     8a4:	8f 4f       	sbci	r24, 0xFF	; 255
     8a6:	9f 4f       	sbci	r25, 0xFF	; 255
     8a8:	16 c0       	rjmp	.+44     	; 0x8d6 <__floatsisf+0x6c>
     8aa:	88 23       	and	r24, r24
     8ac:	11 f0       	breq	.+4      	; 0x8b2 <__floatsisf+0x48>
     8ae:	96 e9       	ldi	r25, 0x96	; 150
     8b0:	11 c0       	rjmp	.+34     	; 0x8d4 <__floatsisf+0x6a>
     8b2:	77 23       	and	r23, r23
     8b4:	21 f0       	breq	.+8      	; 0x8be <__floatsisf+0x54>
     8b6:	9e e8       	ldi	r25, 0x8E	; 142
     8b8:	87 2f       	mov	r24, r23
     8ba:	76 2f       	mov	r23, r22
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <__floatsisf+0x5e>
     8be:	66 23       	and	r22, r22
     8c0:	71 f0       	breq	.+28     	; 0x8de <__floatsisf+0x74>
     8c2:	96 e8       	ldi	r25, 0x86	; 134
     8c4:	86 2f       	mov	r24, r22
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	2a f0       	brmi	.+10     	; 0x8d6 <__floatsisf+0x6c>
     8cc:	9a 95       	dec	r25
     8ce:	66 0f       	add	r22, r22
     8d0:	77 1f       	adc	r23, r23
     8d2:	88 1f       	adc	r24, r24
     8d4:	da f7       	brpl	.-10     	; 0x8cc <__floatsisf+0x62>
     8d6:	88 0f       	add	r24, r24
     8d8:	96 95       	lsr	r25
     8da:	87 95       	ror	r24
     8dc:	97 f9       	bld	r25, 7
     8de:	08 95       	ret

000008e0 <__fp_cmp>:
     8e0:	99 0f       	add	r25, r25
     8e2:	00 08       	sbc	r0, r0
     8e4:	55 0f       	add	r21, r21
     8e6:	aa 0b       	sbc	r26, r26
     8e8:	e0 e8       	ldi	r30, 0x80	; 128
     8ea:	fe ef       	ldi	r31, 0xFE	; 254
     8ec:	16 16       	cp	r1, r22
     8ee:	17 06       	cpc	r1, r23
     8f0:	e8 07       	cpc	r30, r24
     8f2:	f9 07       	cpc	r31, r25
     8f4:	c0 f0       	brcs	.+48     	; 0x926 <__stack+0x27>
     8f6:	12 16       	cp	r1, r18
     8f8:	13 06       	cpc	r1, r19
     8fa:	e4 07       	cpc	r30, r20
     8fc:	f5 07       	cpc	r31, r21
     8fe:	98 f0       	brcs	.+38     	; 0x926 <__stack+0x27>
     900:	62 1b       	sub	r22, r18
     902:	73 0b       	sbc	r23, r19
     904:	84 0b       	sbc	r24, r20
     906:	95 0b       	sbc	r25, r21
     908:	39 f4       	brne	.+14     	; 0x918 <__stack+0x19>
     90a:	0a 26       	eor	r0, r26
     90c:	61 f0       	breq	.+24     	; 0x926 <__stack+0x27>
     90e:	23 2b       	or	r18, r19
     910:	24 2b       	or	r18, r20
     912:	25 2b       	or	r18, r21
     914:	21 f4       	brne	.+8      	; 0x91e <__stack+0x1f>
     916:	08 95       	ret
     918:	0a 26       	eor	r0, r26
     91a:	09 f4       	brne	.+2      	; 0x91e <__stack+0x1f>
     91c:	a1 40       	sbci	r26, 0x01	; 1
     91e:	a6 95       	lsr	r26
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	81 1d       	adc	r24, r1
     924:	81 1d       	adc	r24, r1
     926:	08 95       	ret

00000928 <__fp_inf>:
     928:	97 f9       	bld	r25, 7
     92a:	9f 67       	ori	r25, 0x7F	; 127
     92c:	80 e8       	ldi	r24, 0x80	; 128
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	08 95       	ret

00000934 <__fp_nan>:
     934:	9f ef       	ldi	r25, 0xFF	; 255
     936:	80 ec       	ldi	r24, 0xC0	; 192
     938:	08 95       	ret

0000093a <__fp_pscA>:
     93a:	00 24       	eor	r0, r0
     93c:	0a 94       	dec	r0
     93e:	16 16       	cp	r1, r22
     940:	17 06       	cpc	r1, r23
     942:	18 06       	cpc	r1, r24
     944:	09 06       	cpc	r0, r25
     946:	08 95       	ret

00000948 <__fp_pscB>:
     948:	00 24       	eor	r0, r0
     94a:	0a 94       	dec	r0
     94c:	12 16       	cp	r1, r18
     94e:	13 06       	cpc	r1, r19
     950:	14 06       	cpc	r1, r20
     952:	05 06       	cpc	r0, r21
     954:	08 95       	ret

00000956 <__fp_round>:
     956:	09 2e       	mov	r0, r25
     958:	03 94       	inc	r0
     95a:	00 0c       	add	r0, r0
     95c:	11 f4       	brne	.+4      	; 0x962 <__fp_round+0xc>
     95e:	88 23       	and	r24, r24
     960:	52 f0       	brmi	.+20     	; 0x976 <__fp_round+0x20>
     962:	bb 0f       	add	r27, r27
     964:	40 f4       	brcc	.+16     	; 0x976 <__fp_round+0x20>
     966:	bf 2b       	or	r27, r31
     968:	11 f4       	brne	.+4      	; 0x96e <__fp_round+0x18>
     96a:	60 ff       	sbrs	r22, 0
     96c:	04 c0       	rjmp	.+8      	; 0x976 <__fp_round+0x20>
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	8f 4f       	sbci	r24, 0xFF	; 255
     974:	9f 4f       	sbci	r25, 0xFF	; 255
     976:	08 95       	ret

00000978 <__fp_split3>:
     978:	57 fd       	sbrc	r21, 7
     97a:	90 58       	subi	r25, 0x80	; 128
     97c:	44 0f       	add	r20, r20
     97e:	55 1f       	adc	r21, r21
     980:	59 f0       	breq	.+22     	; 0x998 <__fp_splitA+0x10>
     982:	5f 3f       	cpi	r21, 0xFF	; 255
     984:	71 f0       	breq	.+28     	; 0x9a2 <__fp_splitA+0x1a>
     986:	47 95       	ror	r20

00000988 <__fp_splitA>:
     988:	88 0f       	add	r24, r24
     98a:	97 fb       	bst	r25, 7
     98c:	99 1f       	adc	r25, r25
     98e:	61 f0       	breq	.+24     	; 0x9a8 <__fp_splitA+0x20>
     990:	9f 3f       	cpi	r25, 0xFF	; 255
     992:	79 f0       	breq	.+30     	; 0x9b2 <__fp_splitA+0x2a>
     994:	87 95       	ror	r24
     996:	08 95       	ret
     998:	12 16       	cp	r1, r18
     99a:	13 06       	cpc	r1, r19
     99c:	14 06       	cpc	r1, r20
     99e:	55 1f       	adc	r21, r21
     9a0:	f2 cf       	rjmp	.-28     	; 0x986 <__fp_split3+0xe>
     9a2:	46 95       	lsr	r20
     9a4:	f1 df       	rcall	.-30     	; 0x988 <__fp_splitA>
     9a6:	08 c0       	rjmp	.+16     	; 0x9b8 <__fp_splitA+0x30>
     9a8:	16 16       	cp	r1, r22
     9aa:	17 06       	cpc	r1, r23
     9ac:	18 06       	cpc	r1, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	f1 cf       	rjmp	.-30     	; 0x994 <__fp_splitA+0xc>
     9b2:	86 95       	lsr	r24
     9b4:	71 05       	cpc	r23, r1
     9b6:	61 05       	cpc	r22, r1
     9b8:	08 94       	sec
     9ba:	08 95       	ret

000009bc <__fp_zero>:
     9bc:	e8 94       	clt

000009be <__fp_szero>:
     9be:	bb 27       	eor	r27, r27
     9c0:	66 27       	eor	r22, r22
     9c2:	77 27       	eor	r23, r23
     9c4:	cb 01       	movw	r24, r22
     9c6:	97 f9       	bld	r25, 7
     9c8:	08 95       	ret

000009ca <__mulsf3>:
     9ca:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__mulsf3x>
     9ce:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_round>
     9d2:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_pscA>
     9d6:	38 f0       	brcs	.+14     	; 0x9e6 <__mulsf3+0x1c>
     9d8:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_pscB>
     9dc:	20 f0       	brcs	.+8      	; 0x9e6 <__mulsf3+0x1c>
     9de:	95 23       	and	r25, r21
     9e0:	11 f0       	breq	.+4      	; 0x9e6 <__mulsf3+0x1c>
     9e2:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_inf>
     9e6:	0c 94 9a 04 	jmp	0x934	; 0x934 <__fp_nan>
     9ea:	11 24       	eor	r1, r1
     9ec:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_szero>

000009f0 <__mulsf3x>:
     9f0:	0e 94 bc 04 	call	0x978	; 0x978 <__fp_split3>
     9f4:	70 f3       	brcs	.-36     	; 0x9d2 <__mulsf3+0x8>

000009f6 <__mulsf3_pse>:
     9f6:	95 9f       	mul	r25, r21
     9f8:	c1 f3       	breq	.-16     	; 0x9ea <__mulsf3+0x20>
     9fa:	95 0f       	add	r25, r21
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	55 1f       	adc	r21, r21
     a00:	62 9f       	mul	r22, r18
     a02:	f0 01       	movw	r30, r0
     a04:	72 9f       	mul	r23, r18
     a06:	bb 27       	eor	r27, r27
     a08:	f0 0d       	add	r31, r0
     a0a:	b1 1d       	adc	r27, r1
     a0c:	63 9f       	mul	r22, r19
     a0e:	aa 27       	eor	r26, r26
     a10:	f0 0d       	add	r31, r0
     a12:	b1 1d       	adc	r27, r1
     a14:	aa 1f       	adc	r26, r26
     a16:	64 9f       	mul	r22, r20
     a18:	66 27       	eor	r22, r22
     a1a:	b0 0d       	add	r27, r0
     a1c:	a1 1d       	adc	r26, r1
     a1e:	66 1f       	adc	r22, r22
     a20:	82 9f       	mul	r24, r18
     a22:	22 27       	eor	r18, r18
     a24:	b0 0d       	add	r27, r0
     a26:	a1 1d       	adc	r26, r1
     a28:	62 1f       	adc	r22, r18
     a2a:	73 9f       	mul	r23, r19
     a2c:	b0 0d       	add	r27, r0
     a2e:	a1 1d       	adc	r26, r1
     a30:	62 1f       	adc	r22, r18
     a32:	83 9f       	mul	r24, r19
     a34:	a0 0d       	add	r26, r0
     a36:	61 1d       	adc	r22, r1
     a38:	22 1f       	adc	r18, r18
     a3a:	74 9f       	mul	r23, r20
     a3c:	33 27       	eor	r19, r19
     a3e:	a0 0d       	add	r26, r0
     a40:	61 1d       	adc	r22, r1
     a42:	23 1f       	adc	r18, r19
     a44:	84 9f       	mul	r24, r20
     a46:	60 0d       	add	r22, r0
     a48:	21 1d       	adc	r18, r1
     a4a:	82 2f       	mov	r24, r18
     a4c:	76 2f       	mov	r23, r22
     a4e:	6a 2f       	mov	r22, r26
     a50:	11 24       	eor	r1, r1
     a52:	9f 57       	subi	r25, 0x7F	; 127
     a54:	50 40       	sbci	r21, 0x00	; 0
     a56:	9a f0       	brmi	.+38     	; 0xa7e <__mulsf3_pse+0x88>
     a58:	f1 f0       	breq	.+60     	; 0xa96 <__mulsf3_pse+0xa0>
     a5a:	88 23       	and	r24, r24
     a5c:	4a f0       	brmi	.+18     	; 0xa70 <__mulsf3_pse+0x7a>
     a5e:	ee 0f       	add	r30, r30
     a60:	ff 1f       	adc	r31, r31
     a62:	bb 1f       	adc	r27, r27
     a64:	66 1f       	adc	r22, r22
     a66:	77 1f       	adc	r23, r23
     a68:	88 1f       	adc	r24, r24
     a6a:	91 50       	subi	r25, 0x01	; 1
     a6c:	50 40       	sbci	r21, 0x00	; 0
     a6e:	a9 f7       	brne	.-22     	; 0xa5a <__mulsf3_pse+0x64>
     a70:	9e 3f       	cpi	r25, 0xFE	; 254
     a72:	51 05       	cpc	r21, r1
     a74:	80 f0       	brcs	.+32     	; 0xa96 <__mulsf3_pse+0xa0>
     a76:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_inf>
     a7a:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_szero>
     a7e:	5f 3f       	cpi	r21, 0xFF	; 255
     a80:	e4 f3       	brlt	.-8      	; 0xa7a <__mulsf3_pse+0x84>
     a82:	98 3e       	cpi	r25, 0xE8	; 232
     a84:	d4 f3       	brlt	.-12     	; 0xa7a <__mulsf3_pse+0x84>
     a86:	86 95       	lsr	r24
     a88:	77 95       	ror	r23
     a8a:	67 95       	ror	r22
     a8c:	b7 95       	ror	r27
     a8e:	f7 95       	ror	r31
     a90:	e7 95       	ror	r30
     a92:	9f 5f       	subi	r25, 0xFF	; 255
     a94:	c1 f7       	brne	.-16     	; 0xa86 <__mulsf3_pse+0x90>
     a96:	fe 2b       	or	r31, r30
     a98:	88 0f       	add	r24, r24
     a9a:	91 1d       	adc	r25, r1
     a9c:	96 95       	lsr	r25
     a9e:	87 95       	ror	r24
     aa0:	97 f9       	bld	r25, 7
     aa2:	08 95       	ret

00000aa4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     aa4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     aa6:	91 8d       	ldd	r25, Z+25	; 0x19
     aa8:	22 8d       	ldd	r18, Z+26	; 0x1a
     aaa:	89 2f       	mov	r24, r25
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	80 5c       	subi	r24, 0xC0	; 192
     ab0:	9f 4f       	sbci	r25, 0xFF	; 255
     ab2:	82 1b       	sub	r24, r18
     ab4:	91 09       	sbc	r25, r1
}
     ab6:	8f 73       	andi	r24, 0x3F	; 63
     ab8:	99 27       	eor	r25, r25
     aba:	08 95       	ret

00000abc <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     abc:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     abe:	91 8d       	ldd	r25, Z+25	; 0x19
     ac0:	82 8d       	ldd	r24, Z+26	; 0x1a
     ac2:	98 17       	cp	r25, r24
     ac4:	31 f0       	breq	.+12     	; 0xad2 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     ac6:	82 8d       	ldd	r24, Z+26	; 0x1a
     ac8:	e8 0f       	add	r30, r24
     aca:	f1 1d       	adc	r31, r1
     acc:	85 8d       	ldd	r24, Z+29	; 0x1d
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     ad6:	08 95       	ret

00000ad8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     ad8:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     ada:	91 8d       	ldd	r25, Z+25	; 0x19
     adc:	82 8d       	ldd	r24, Z+26	; 0x1a
     ade:	98 17       	cp	r25, r24
     ae0:	61 f0       	breq	.+24     	; 0xafa <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     ae2:	82 8d       	ldd	r24, Z+26	; 0x1a
     ae4:	df 01       	movw	r26, r30
     ae6:	a8 0f       	add	r26, r24
     ae8:	b1 1d       	adc	r27, r1
     aea:	5d 96       	adiw	r26, 0x1d	; 29
     aec:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     aee:	92 8d       	ldd	r25, Z+26	; 0x1a
     af0:	9f 5f       	subi	r25, 0xFF	; 255
     af2:	9f 73       	andi	r25, 0x3F	; 63
     af4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     afa:	8f ef       	ldi	r24, 0xFF	; 255
     afc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     afe:	08 95       	ret

00000b00 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     b00:	fc 01       	movw	r30, r24
     b02:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     b04:	44 8d       	ldd	r20, Z+28	; 0x1c
     b06:	25 2f       	mov	r18, r21
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	84 2f       	mov	r24, r20
     b0c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     b0e:	82 1b       	sub	r24, r18
     b10:	93 0b       	sbc	r25, r19
     b12:	54 17       	cp	r21, r20
     b14:	10 f0       	brcs	.+4      	; 0xb1a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     b16:	cf 96       	adiw	r24, 0x3f	; 63
     b18:	08 95       	ret
  return tail - head - 1;
     b1a:	01 97       	sbiw	r24, 0x01	; 1
}
     b1c:	08 95       	ret

00000b1e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     b1e:	8e ee       	ldi	r24, 0xEE	; 238
     b20:	96 e0       	ldi	r25, 0x06	; 6
     b22:	89 2b       	or	r24, r25
     b24:	49 f0       	breq	.+18     	; 0xb38 <_Z14serialEventRunv+0x1a>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	89 2b       	or	r24, r25
     b2c:	29 f0       	breq	.+10     	; 0xb38 <_Z14serialEventRunv+0x1a>
     b2e:	0e 94 ee 06 	call	0xddc	; 0xddc <_Z17Serial0_availablev>
     b32:	81 11       	cpse	r24, r1
     b34:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     b38:	08 95       	ret

00000b3a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     b3a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     b3c:	84 8d       	ldd	r24, Z+28	; 0x1c
     b3e:	df 01       	movw	r26, r30
     b40:	a8 0f       	add	r26, r24
     b42:	b1 1d       	adc	r27, r1
     b44:	a3 5a       	subi	r26, 0xA3	; 163
     b46:	bf 4f       	sbci	r27, 0xFF	; 255
     b48:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     b4a:	84 8d       	ldd	r24, Z+28	; 0x1c
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	8f 73       	andi	r24, 0x3F	; 63
     b52:	99 27       	eor	r25, r25
     b54:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     b56:	a6 89       	ldd	r26, Z+22	; 0x16
     b58:	b7 89       	ldd	r27, Z+23	; 0x17
     b5a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     b5c:	a0 89       	ldd	r26, Z+16	; 0x10
     b5e:	b1 89       	ldd	r27, Z+17	; 0x11
     b60:	8c 91       	ld	r24, X
     b62:	83 70       	andi	r24, 0x03	; 3
     b64:	80 64       	ori	r24, 0x40	; 64
     b66:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     b68:	93 8d       	ldd	r25, Z+27	; 0x1b
     b6a:	84 8d       	ldd	r24, Z+28	; 0x1c
     b6c:	98 13       	cpse	r25, r24
     b6e:	06 c0       	rjmp	.+12     	; 0xb7c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     b70:	02 88       	ldd	r0, Z+18	; 0x12
     b72:	f3 89       	ldd	r31, Z+19	; 0x13
     b74:	e0 2d       	mov	r30, r0
     b76:	80 81       	ld	r24, Z
     b78:	8f 7d       	andi	r24, 0xDF	; 223
     b7a:	80 83       	st	Z, r24
     b7c:	08 95       	ret

00000b7e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
  _written = true;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     b90:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b92:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b94:	98 13       	cpse	r25, r24
     b96:	05 c0       	rjmp	.+10     	; 0xba2 <_ZN14HardwareSerial5writeEh+0x24>
     b98:	e8 89       	ldd	r30, Y+16	; 0x10
     b9a:	f9 89       	ldd	r31, Y+17	; 0x11
     b9c:	80 81       	ld	r24, Z
     b9e:	85 fd       	sbrc	r24, 5
     ba0:	26 c0       	rjmp	.+76     	; 0xbee <_ZN14HardwareSerial5writeEh+0x70>
     ba2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     ba4:	0b 8d       	ldd	r16, Y+27	; 0x1b
     ba6:	10 e0       	ldi	r17, 0x00	; 0
     ba8:	0f 5f       	subi	r16, 0xFF	; 255
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
     bac:	0f 73       	andi	r16, 0x3F	; 63
     bae:	11 27       	eor	r17, r17
     bb0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     bb2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bb4:	e8 12       	cpse	r14, r24
     bb6:	0c c0       	rjmp	.+24     	; 0xbd0 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	07 fc       	sbrc	r0, 7
     bbc:	fa cf       	rjmp	.-12     	; 0xbb2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     bbe:	e8 89       	ldd	r30, Y+16	; 0x10
     bc0:	f9 89       	ldd	r31, Y+17	; 0x11
     bc2:	80 81       	ld	r24, Z
     bc4:	85 ff       	sbrs	r24, 5
     bc6:	f5 cf       	rjmp	.-22     	; 0xbb2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     bc8:	ce 01       	movw	r24, r28
     bca:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     bce:	f1 cf       	rjmp	.-30     	; 0xbb2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bd2:	fe 01       	movw	r30, r28
     bd4:	e8 0f       	add	r30, r24
     bd6:	f1 1d       	adc	r31, r1
     bd8:	e3 5a       	subi	r30, 0xA3	; 163
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     bde:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     be0:	f8 94       	cli
    _tx_buffer_head = i;
     be2:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     be4:	ea 89       	ldd	r30, Y+18	; 0x12
     be6:	fb 89       	ldd	r31, Y+19	; 0x13
     be8:	80 81       	ld	r24, Z
     bea:	80 62       	ori	r24, 0x20	; 32
     bec:	0a c0       	rjmp	.+20     	; 0xc02 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     bee:	9f b7       	in	r25, 0x3f	; 63
     bf0:	f8 94       	cli
      *_udr = c;
     bf2:	ee 89       	ldd	r30, Y+22	; 0x16
     bf4:	ff 89       	ldd	r31, Y+23	; 0x17
     bf6:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     bf8:	e8 89       	ldd	r30, Y+16	; 0x10
     bfa:	f9 89       	ldd	r31, Y+17	; 0x11
     bfc:	80 81       	ld	r24, Z
     bfe:	83 70       	andi	r24, 0x03	; 3
     c00:	80 64       	ori	r24, 0x40	; 64
     c02:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c04:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	08 95       	ret

00000c18 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     c1e:	88 8d       	ldd	r24, Y+24	; 0x18
     c20:	88 23       	and	r24, r24
     c22:	c9 f0       	breq	.+50     	; 0xc56 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     c24:	ea 89       	ldd	r30, Y+18	; 0x12
     c26:	fb 89       	ldd	r31, Y+19	; 0x13
     c28:	80 81       	ld	r24, Z
     c2a:	85 fd       	sbrc	r24, 5
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <_ZN14HardwareSerial5flushEv+0x20>
     c2e:	a8 89       	ldd	r26, Y+16	; 0x10
     c30:	b9 89       	ldd	r27, Y+17	; 0x11
     c32:	8c 91       	ld	r24, X
     c34:	86 fd       	sbrc	r24, 6
     c36:	0f c0       	rjmp	.+30     	; 0xc56 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	07 fc       	sbrc	r0, 7
     c3c:	f5 cf       	rjmp	.-22     	; 0xc28 <_ZN14HardwareSerial5flushEv+0x10>
     c3e:	80 81       	ld	r24, Z
     c40:	85 ff       	sbrs	r24, 5
     c42:	f2 cf       	rjmp	.-28     	; 0xc28 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     c44:	a8 89       	ldd	r26, Y+16	; 0x10
     c46:	b9 89       	ldd	r27, Y+17	; 0x11
     c48:	8c 91       	ld	r24, X
     c4a:	85 ff       	sbrs	r24, 5
     c4c:	ed cf       	rjmp	.-38     	; 0xc28 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     c4e:	ce 01       	movw	r24, r28
     c50:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     c54:	e7 cf       	rjmp	.-50     	; 0xc24 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     c5c:	cf 92       	push	r12
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	ec 01       	movw	r28, r24
     c6c:	6a 01       	movw	r12, r20
     c6e:	7b 01       	movw	r14, r22
     c70:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     c72:	e8 89       	ldd	r30, Y+16	; 0x10
     c74:	f9 89       	ldd	r31, Y+17	; 0x11
     c76:	82 e0       	ldi	r24, 0x02	; 2
     c78:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     c7a:	41 15       	cp	r20, r1
     c7c:	51 4e       	sbci	r21, 0xE1	; 225
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	b1 f0       	breq	.+44     	; 0xcb0 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	79 e0       	ldi	r23, 0x09	; 9
     c88:	8d e3       	ldi	r24, 0x3D	; 61
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a7 01       	movw	r20, r14
     c8e:	96 01       	movw	r18, r12
     c90:	0e 94 4d 19 	call	0x329a	; 0x329a <__udivmodsi4>
     c94:	da 01       	movw	r26, r20
     c96:	c9 01       	movw	r24, r18
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	a1 09       	sbc	r26, r1
     c9c:	b1 09       	sbc	r27, r1
     c9e:	b6 95       	lsr	r27
     ca0:	a7 95       	ror	r26
     ca2:	97 95       	ror	r25
     ca4:	87 95       	ror	r24
     ca6:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ca8:	21 15       	cp	r18, r1
     caa:	80 e1       	ldi	r24, 0x10	; 16
     cac:	38 07       	cpc	r19, r24
     cae:	a8 f0       	brcs	.+42     	; 0xcda <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     cb0:	e8 89       	ldd	r30, Y+16	; 0x10
     cb2:	f9 89       	ldd	r31, Y+17	; 0x11
     cb4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     cb6:	60 e8       	ldi	r22, 0x80	; 128
     cb8:	74 e8       	ldi	r23, 0x84	; 132
     cba:	8e e1       	ldi	r24, 0x1E	; 30
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	a7 01       	movw	r20, r14
     cc0:	96 01       	movw	r18, r12
     cc2:	0e 94 4d 19 	call	0x329a	; 0x329a <__udivmodsi4>
     cc6:	da 01       	movw	r26, r20
     cc8:	c9 01       	movw	r24, r18
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	a1 09       	sbc	r26, r1
     cce:	b1 09       	sbc	r27, r1
     cd0:	b6 95       	lsr	r27
     cd2:	a7 95       	ror	r26
     cd4:	97 95       	ror	r25
     cd6:	87 95       	ror	r24
     cd8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     cda:	ec 85       	ldd	r30, Y+12	; 0x0c
     cdc:	fd 85       	ldd	r31, Y+13	; 0x0d
     cde:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     ce0:	ee 85       	ldd	r30, Y+14	; 0x0e
     ce2:	ff 85       	ldd	r31, Y+15	; 0x0f
     ce4:	20 83       	st	Z, r18

  _written = false;
     ce6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     ce8:	ec 89       	ldd	r30, Y+20	; 0x14
     cea:	fd 89       	ldd	r31, Y+21	; 0x15
     cec:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     cee:	ea 89       	ldd	r30, Y+18	; 0x12
     cf0:	fb 89       	ldd	r31, Y+19	; 0x13
     cf2:	80 81       	ld	r24, Z
     cf4:	80 61       	ori	r24, 0x10	; 16
     cf6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     cf8:	ea 89       	ldd	r30, Y+18	; 0x12
     cfa:	fb 89       	ldd	r31, Y+19	; 0x13
     cfc:	80 81       	ld	r24, Z
     cfe:	88 60       	ori	r24, 0x08	; 8
     d00:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     d02:	ea 89       	ldd	r30, Y+18	; 0x12
     d04:	fb 89       	ldd	r31, Y+19	; 0x13
     d06:	80 81       	ld	r24, Z
     d08:	80 68       	ori	r24, 0x80	; 128
     d0a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     d0c:	ea 89       	ldd	r30, Y+18	; 0x12
     d0e:	fb 89       	ldd	r31, Y+19	; 0x13
     d10:	80 81       	ld	r24, Z
     d12:	8f 7d       	andi	r24, 0xDF	; 223
     d14:	80 83       	st	Z, r24
}
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	df 90       	pop	r13
     d22:	cf 90       	pop	r12
     d24:	08 95       	ret

00000d26 <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	08 95       	ret

00000d2c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     d2c:	1f 92       	push	r1
     d2e:	0f 92       	push	r0
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	0f 92       	push	r0
     d34:	11 24       	eor	r1, r1
     d36:	2f 93       	push	r18
     d38:	8f 93       	push	r24
     d3a:	9f 93       	push	r25
     d3c:	ef 93       	push	r30
     d3e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     d40:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <Serial+0x10>
     d44:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <Serial+0x11>
     d48:	80 81       	ld	r24, Z
     d4a:	e0 91 ec 02 	lds	r30, 0x02EC	; 0x8002ec <Serial+0x16>
     d4e:	f0 91 ed 02 	lds	r31, 0x02ED	; 0x8002ed <Serial+0x17>
     d52:	82 fd       	sbrc	r24, 2
     d54:	12 c0       	rjmp	.+36     	; 0xd7a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     d56:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     d58:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <Serial+0x19>
     d5c:	8f 5f       	subi	r24, 0xFF	; 255
     d5e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     d60:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <Serial+0x1a>
     d64:	82 17       	cp	r24, r18
     d66:	51 f0       	breq	.+20     	; 0xd7c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     d68:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <Serial+0x19>
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	ea 52       	subi	r30, 0x2A	; 42
     d70:	fd 4f       	sbci	r31, 0xFD	; 253
     d72:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     d74:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <Serial+0x19>
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     d7a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     d7c:	ff 91       	pop	r31
     d7e:	ef 91       	pop	r30
     d80:	9f 91       	pop	r25
     d82:	8f 91       	pop	r24
     d84:	2f 91       	pop	r18
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	0f 90       	pop	r0
     d8c:	1f 90       	pop	r1
     d8e:	18 95       	reti

00000d90 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     d90:	1f 92       	push	r1
     d92:	0f 92       	push	r0
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	0f 92       	push	r0
     d98:	11 24       	eor	r1, r1
     d9a:	2f 93       	push	r18
     d9c:	3f 93       	push	r19
     d9e:	4f 93       	push	r20
     da0:	5f 93       	push	r21
     da2:	6f 93       	push	r22
     da4:	7f 93       	push	r23
     da6:	8f 93       	push	r24
     da8:	9f 93       	push	r25
     daa:	af 93       	push	r26
     dac:	bf 93       	push	r27
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     db2:	86 ed       	ldi	r24, 0xD6	; 214
     db4:	92 e0       	ldi	r25, 0x02	; 2
     db6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     dba:	ff 91       	pop	r31
     dbc:	ef 91       	pop	r30
     dbe:	bf 91       	pop	r27
     dc0:	af 91       	pop	r26
     dc2:	9f 91       	pop	r25
     dc4:	8f 91       	pop	r24
     dc6:	7f 91       	pop	r23
     dc8:	6f 91       	pop	r22
     dca:	5f 91       	pop	r21
     dcc:	4f 91       	pop	r20
     dce:	3f 91       	pop	r19
     dd0:	2f 91       	pop	r18
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     ddc:	86 ed       	ldi	r24, 0xD6	; 214
     dde:	92 e0       	ldi	r25, 0x02	; 2
     de0:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_ZN14HardwareSerial9availableEv>
     de4:	21 e0       	ldi	r18, 0x01	; 1
     de6:	89 2b       	or	r24, r25
     de8:	09 f4       	brne	.+2      	; 0xdec <_Z17Serial0_availablev+0x10>
     dea:	20 e0       	ldi	r18, 0x00	; 0
}
     dec:	82 2f       	mov	r24, r18
     dee:	08 95       	ret

00000df0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     df0:	e6 ed       	ldi	r30, 0xD6	; 214
     df2:	f2 e0       	ldi	r31, 0x02	; 2
     df4:	13 82       	std	Z+3, r1	; 0x03
     df6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     df8:	88 ee       	ldi	r24, 0xE8	; 232
     dfa:	93 e0       	ldi	r25, 0x03	; 3
     dfc:	a0 e0       	ldi	r26, 0x00	; 0
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	84 83       	std	Z+4, r24	; 0x04
     e02:	95 83       	std	Z+5, r25	; 0x05
     e04:	a6 83       	std	Z+6, r26	; 0x06
     e06:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     e08:	85 e2       	ldi	r24, 0x25	; 37
     e0a:	92 e0       	ldi	r25, 0x02	; 2
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	80 83       	st	Z, r24
     e10:	85 ec       	ldi	r24, 0xC5	; 197
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	95 87       	std	Z+13, r25	; 0x0d
     e16:	84 87       	std	Z+12, r24	; 0x0c
     e18:	84 ec       	ldi	r24, 0xC4	; 196
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	97 87       	std	Z+15, r25	; 0x0f
     e1e:	86 87       	std	Z+14, r24	; 0x0e
     e20:	80 ec       	ldi	r24, 0xC0	; 192
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	91 8b       	std	Z+17, r25	; 0x11
     e26:	80 8b       	std	Z+16, r24	; 0x10
     e28:	81 ec       	ldi	r24, 0xC1	; 193
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	93 8b       	std	Z+19, r25	; 0x13
     e2e:	82 8b       	std	Z+18, r24	; 0x12
     e30:	82 ec       	ldi	r24, 0xC2	; 194
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	95 8b       	std	Z+21, r25	; 0x15
     e36:	84 8b       	std	Z+20, r24	; 0x14
     e38:	86 ec       	ldi	r24, 0xC6	; 198
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	97 8b       	std	Z+23, r25	; 0x17
     e3e:	86 8b       	std	Z+22, r24	; 0x16
     e40:	11 8e       	std	Z+25, r1	; 0x19
     e42:	12 8e       	std	Z+26, r1	; 0x1a
     e44:	13 8e       	std	Z+27, r1	; 0x1b
     e46:	14 8e       	std	Z+28, r1	; 0x1c
     e48:	08 95       	ret

00000e4a <initVariant>:
     e4a:	08 95       	ret

00000e4c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     e4c:	0e 94 ad 09 	call	0x135a	; 0x135a <init>

	initVariant();
     e50:	0e 94 25 07 	call	0xe4a	; 0xe4a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     e54:	0e 94 43 01 	call	0x286	; 0x286 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     e58:	cf e8       	ldi	r28, 0x8F	; 143
     e5a:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     e5c:	0e 94 37 03 	call	0x66e	; 0x66e <loop>
		if (serialEventRun) serialEventRun();
     e60:	20 97       	sbiw	r28, 0x00	; 0
     e62:	e1 f3       	breq	.-8      	; 0xe5c <main+0x10>
     e64:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z14serialEventRunv>
     e68:	f9 cf       	rjmp	.-14     	; 0xe5c <main+0x10>

00000e6a <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     e6a:	cf 92       	push	r12
     e6c:	df 92       	push	r13
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	6c 01       	movw	r12, r24
     e7c:	7a 01       	movw	r14, r20
     e7e:	8b 01       	movw	r16, r22
     e80:	c0 e0       	ldi	r28, 0x00	; 0
     e82:	d0 e0       	ldi	r29, 0x00	; 0
     e84:	ce 15       	cp	r28, r14
     e86:	df 05       	cpc	r29, r15
     e88:	81 f0       	breq	.+32     	; 0xeaa <_ZN5Print5writeEPKhj+0x40>
     e8a:	d8 01       	movw	r26, r16
     e8c:	6d 91       	ld	r22, X+
     e8e:	8d 01       	movw	r16, r26
     e90:	d6 01       	movw	r26, r12
     e92:	ed 91       	ld	r30, X+
     e94:	fc 91       	ld	r31, X
     e96:	01 90       	ld	r0, Z+
     e98:	f0 81       	ld	r31, Z
     e9a:	e0 2d       	mov	r30, r0
     e9c:	c6 01       	movw	r24, r12
     e9e:	09 95       	icall
     ea0:	89 2b       	or	r24, r25
     ea2:	11 f0       	breq	.+4      	; 0xea8 <_ZN5Print5writeEPKhj+0x3e>
     ea4:	21 96       	adiw	r28, 0x01	; 1
     ea6:	ee cf       	rjmp	.-36     	; 0xe84 <_ZN5Print5writeEPKhj+0x1a>
     ea8:	7e 01       	movw	r14, r28
     eaa:	c7 01       	movw	r24, r14
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	08 95       	ret

00000ebe <_ZN5Print5writeEPKc>:
     ebe:	61 15       	cp	r22, r1
     ec0:	71 05       	cpc	r23, r1
     ec2:	79 f0       	breq	.+30     	; 0xee2 <_ZN5Print5writeEPKc+0x24>
     ec4:	fb 01       	movw	r30, r22
     ec6:	01 90       	ld	r0, Z+
     ec8:	00 20       	and	r0, r0
     eca:	e9 f7       	brne	.-6      	; 0xec6 <_ZN5Print5writeEPKc+0x8>
     ecc:	31 97       	sbiw	r30, 0x01	; 1
     ece:	af 01       	movw	r20, r30
     ed0:	46 1b       	sub	r20, r22
     ed2:	57 0b       	sbc	r21, r23
     ed4:	dc 01       	movw	r26, r24
     ed6:	ed 91       	ld	r30, X+
     ed8:	fc 91       	ld	r31, X
     eda:	02 80       	ldd	r0, Z+2	; 0x02
     edc:	f3 81       	ldd	r31, Z+3	; 0x03
     ede:	e0 2d       	mov	r30, r0
     ee0:	09 94       	ijmp
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	08 95       	ret

00000ee8 <_ZN5Print5printEPK19__FlashStringHelper>:
     ee8:	ef 92       	push	r14
     eea:	ff 92       	push	r15
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	8c 01       	movw	r16, r24
     ef6:	7b 01       	movw	r14, r22
     ef8:	c0 e0       	ldi	r28, 0x00	; 0
     efa:	d0 e0       	ldi	r29, 0x00	; 0
     efc:	f7 01       	movw	r30, r14
     efe:	ec 0f       	add	r30, r28
     f00:	fd 1f       	adc	r31, r29
     f02:	64 91       	lpm	r22, Z
     f04:	66 23       	and	r22, r22
     f06:	61 f0       	breq	.+24     	; 0xf20 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
     f08:	d8 01       	movw	r26, r16
     f0a:	ed 91       	ld	r30, X+
     f0c:	fc 91       	ld	r31, X
     f0e:	01 90       	ld	r0, Z+
     f10:	f0 81       	ld	r31, Z
     f12:	e0 2d       	mov	r30, r0
     f14:	c8 01       	movw	r24, r16
     f16:	09 95       	icall
     f18:	89 2b       	or	r24, r25
     f1a:	11 f0       	breq	.+4      	; 0xf20 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
     f1c:	21 96       	adiw	r28, 0x01	; 1
     f1e:	ee cf       	rjmp	.-36     	; 0xefc <_ZN5Print5printEPK19__FlashStringHelper+0x14>
     f20:	ce 01       	movw	r24, r28
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	08 95       	ret

00000f30 <_ZN5Print5printEPKc>:
     f30:	0c 94 5f 07 	jmp	0xebe	; 0xebe <_ZN5Print5writeEPKc>

00000f34 <_ZN5Print5printEc>:
     f34:	dc 01       	movw	r26, r24
     f36:	ed 91       	ld	r30, X+
     f38:	fc 91       	ld	r31, X
     f3a:	01 90       	ld	r0, Z+
     f3c:	f0 81       	ld	r31, Z
     f3e:	e0 2d       	mov	r30, r0
     f40:	09 94       	ijmp

00000f42 <_ZN5Print7printlnEv>:
     f42:	63 e3       	ldi	r22, 0x33	; 51
     f44:	72 e0       	ldi	r23, 0x02	; 2
     f46:	0c 94 5f 07 	jmp	0xebe	; 0xebe <_ZN5Print5writeEPKc>

00000f4a <_ZN5Print7printlnEPK19__FlashStringHelper>:
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	ec 01       	movw	r28, r24
     f54:	0e 94 74 07 	call	0xee8	; 0xee8 <_ZN5Print5printEPK19__FlashStringHelper>
     f58:	8c 01       	movw	r16, r24
     f5a:	ce 01       	movw	r24, r28
     f5c:	0e 94 a1 07 	call	0xf42	; 0xf42 <_ZN5Print7printlnEv>
     f60:	80 0f       	add	r24, r16
     f62:	91 1f       	adc	r25, r17
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	08 95       	ret

00000f6e <_ZN5Print7printlnEPKc>:
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ec 01       	movw	r28, r24
     f78:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print5writeEPKc>
     f7c:	8c 01       	movw	r16, r24
     f7e:	ce 01       	movw	r24, r28
     f80:	0e 94 a1 07 	call	0xf42	; 0xf42 <_ZN5Print7printlnEv>
     f84:	80 0f       	add	r24, r16
     f86:	91 1f       	adc	r25, r17
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	08 95       	ret

00000f92 <_ZN5Print11printNumberEmh>:
     f92:	8f 92       	push	r8
     f94:	9f 92       	push	r9
     f96:	af 92       	push	r10
     f98:	bf 92       	push	r11
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	a1 97       	sbiw	r28, 0x21	; 33
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	7c 01       	movw	r14, r24
     fb8:	fa 01       	movw	r30, r20
     fba:	cb 01       	movw	r24, r22
     fbc:	19 a2       	std	Y+33, r1	; 0x21
     fbe:	22 30       	cpi	r18, 0x02	; 2
     fc0:	08 f4       	brcc	.+2      	; 0xfc4 <_ZN5Print11printNumberEmh+0x32>
     fc2:	2a e0       	ldi	r18, 0x0A	; 10
     fc4:	8e 01       	movw	r16, r28
     fc6:	0f 5d       	subi	r16, 0xDF	; 223
     fc8:	1f 4f       	sbci	r17, 0xFF	; 255
     fca:	82 2e       	mov	r8, r18
     fcc:	91 2c       	mov	r9, r1
     fce:	a1 2c       	mov	r10, r1
     fd0:	b1 2c       	mov	r11, r1
     fd2:	bf 01       	movw	r22, r30
     fd4:	a5 01       	movw	r20, r10
     fd6:	94 01       	movw	r18, r8
     fd8:	0e 94 4d 19 	call	0x329a	; 0x329a <__udivmodsi4>
     fdc:	f9 01       	movw	r30, r18
     fde:	ca 01       	movw	r24, r20
     fe0:	01 50       	subi	r16, 0x01	; 1
     fe2:	11 09       	sbc	r17, r1
     fe4:	6a 30       	cpi	r22, 0x0A	; 10
     fe6:	10 f4       	brcc	.+4      	; 0xfec <_ZN5Print11printNumberEmh+0x5a>
     fe8:	60 5d       	subi	r22, 0xD0	; 208
     fea:	01 c0       	rjmp	.+2      	; 0xfee <_ZN5Print11printNumberEmh+0x5c>
     fec:	69 5c       	subi	r22, 0xC9	; 201
     fee:	d8 01       	movw	r26, r16
     ff0:	6c 93       	st	X, r22
     ff2:	23 2b       	or	r18, r19
     ff4:	24 2b       	or	r18, r20
     ff6:	25 2b       	or	r18, r21
     ff8:	61 f7       	brne	.-40     	; 0xfd2 <_ZN5Print11printNumberEmh+0x40>
     ffa:	b8 01       	movw	r22, r16
     ffc:	c7 01       	movw	r24, r14
     ffe:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print5writeEPKc>
    1002:	a1 96       	adiw	r28, 0x21	; 33
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	bf 90       	pop	r11
    101c:	af 90       	pop	r10
    101e:	9f 90       	pop	r9
    1020:	8f 90       	pop	r8
    1022:	08 95       	ret

00001024 <_ZN5Print5printEmi>:
    1024:	21 15       	cp	r18, r1
    1026:	31 05       	cpc	r19, r1
    1028:	41 f4       	brne	.+16     	; 0x103a <_ZN5Print5printEmi+0x16>
    102a:	dc 01       	movw	r26, r24
    102c:	ed 91       	ld	r30, X+
    102e:	fc 91       	ld	r31, X
    1030:	01 90       	ld	r0, Z+
    1032:	f0 81       	ld	r31, Z
    1034:	e0 2d       	mov	r30, r0
    1036:	64 2f       	mov	r22, r20
    1038:	09 94       	ijmp
    103a:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <_ZN5Print11printNumberEmh>

0000103e <_ZN5Print5printEji>:
    103e:	9a 01       	movw	r18, r20
    1040:	ab 01       	movw	r20, r22
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	0c 94 12 08 	jmp	0x1024	; 0x1024 <_ZN5Print5printEmi>

0000104a <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    104a:	7f 92       	push	r7
    104c:	8f 92       	push	r8
    104e:	9f 92       	push	r9
    1050:	af 92       	push	r10
    1052:	bf 92       	push	r11
    1054:	cf 92       	push	r12
    1056:	df 92       	push	r13
    1058:	ef 92       	push	r14
    105a:	ff 92       	push	r15
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	8c 01       	movw	r16, r24
    1066:	6a 01       	movw	r12, r20
    1068:	7b 01       	movw	r14, r22
    106a:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    106c:	9a 01       	movw	r18, r20
    106e:	ab 01       	movw	r20, r22
    1070:	c7 01       	movw	r24, r14
    1072:	b6 01       	movw	r22, r12
    1074:	0e 94 38 19 	call	0x3270	; 0x3270 <__unordsf2>
    1078:	88 23       	and	r24, r24
    107a:	19 f0       	breq	.+6      	; 0x1082 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    107c:	66 e3       	ldi	r22, 0x36	; 54
    107e:	72 e0       	ldi	r23, 0x02	; 2
    1080:	27 c0       	rjmp	.+78     	; 0x10d0 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1082:	46 01       	movw	r8, r12
    1084:	57 01       	movw	r10, r14
    1086:	e8 94       	clt
    1088:	b7 f8       	bld	r11, 7
    108a:	2f ef       	ldi	r18, 0xFF	; 255
    108c:	3f ef       	ldi	r19, 0xFF	; 255
    108e:	4f e7       	ldi	r20, 0x7F	; 127
    1090:	5f e7       	ldi	r21, 0x7F	; 127
    1092:	c5 01       	movw	r24, r10
    1094:	b4 01       	movw	r22, r8
    1096:	0e 94 38 19 	call	0x3270	; 0x3270 <__unordsf2>
    109a:	81 11       	cpse	r24, r1
    109c:	0d c0       	rjmp	.+26     	; 0x10b8 <_ZN5Print10printFloatEdh+0x6e>
    109e:	2f ef       	ldi	r18, 0xFF	; 255
    10a0:	3f ef       	ldi	r19, 0xFF	; 255
    10a2:	4f e7       	ldi	r20, 0x7F	; 127
    10a4:	5f e7       	ldi	r21, 0x7F	; 127
    10a6:	c5 01       	movw	r24, r10
    10a8:	b4 01       	movw	r22, r8
    10aa:	0e 94 bc 03 	call	0x778	; 0x778 <__cmpsf2>
    10ae:	18 16       	cp	r1, r24
    10b0:	1c f4       	brge	.+6      	; 0x10b8 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    10b2:	6a e3       	ldi	r22, 0x3A	; 58
    10b4:	72 e0       	ldi	r23, 0x02	; 2
    10b6:	0c c0       	rjmp	.+24     	; 0x10d0 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    10b8:	2f ef       	ldi	r18, 0xFF	; 255
    10ba:	3f ef       	ldi	r19, 0xFF	; 255
    10bc:	4f e7       	ldi	r20, 0x7F	; 127
    10be:	5f e4       	ldi	r21, 0x4F	; 79
    10c0:	c7 01       	movw	r24, r14
    10c2:	b6 01       	movw	r22, r12
    10c4:	0e 94 33 19 	call	0x3266	; 0x3266 <__gesf2>
    10c8:	18 16       	cp	r1, r24
    10ca:	94 f4       	brge	.+36     	; 0x10f0 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    10cc:	6e e3       	ldi	r22, 0x3E	; 62
    10ce:	72 e0       	ldi	r23, 0x02	; 2
    10d0:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	df 90       	pop	r13
    10e0:	cf 90       	pop	r12
    10e2:	bf 90       	pop	r11
    10e4:	af 90       	pop	r10
    10e6:	9f 90       	pop	r9
    10e8:	8f 90       	pop	r8
    10ea:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    10ec:	0c 94 5f 07 	jmp	0xebe	; 0xebe <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    10f0:	2f ef       	ldi	r18, 0xFF	; 255
    10f2:	3f ef       	ldi	r19, 0xFF	; 255
    10f4:	4f e7       	ldi	r20, 0x7F	; 127
    10f6:	5f ec       	ldi	r21, 0xCF	; 207
    10f8:	c7 01       	movw	r24, r14
    10fa:	b6 01       	movw	r22, r12
    10fc:	0e 94 bc 03 	call	0x778	; 0x778 <__cmpsf2>
    1100:	87 fd       	sbrc	r24, 7
    1102:	e4 cf       	rjmp	.-56     	; 0x10cc <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	a9 01       	movw	r20, r18
    110a:	c7 01       	movw	r24, r14
    110c:	b6 01       	movw	r22, r12
    110e:	0e 94 bc 03 	call	0x778	; 0x778 <__cmpsf2>
    1112:	87 ff       	sbrs	r24, 7
    1114:	0a c0       	rjmp	.+20     	; 0x112a <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1116:	6d e2       	ldi	r22, 0x2D	; 45
    1118:	c8 01       	movw	r24, r16
    111a:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN5Print5printEc>
    111e:	ec 01       	movw	r28, r24
     number = -number;
    1120:	f7 fa       	bst	r15, 7
    1122:	f0 94       	com	r15
    1124:	f7 f8       	bld	r15, 7
    1126:	f0 94       	com	r15
    1128:	02 c0       	rjmp	.+4      	; 0x112e <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    112a:	c0 e0       	ldi	r28, 0x00	; 0
    112c:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    112e:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1138:	7b 14       	cp	r7, r11
    113a:	41 f0       	breq	.+16     	; 0x114c <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e2       	ldi	r20, 0x20	; 32
    1142:	51 e4       	ldi	r21, 0x41	; 65
    1144:	0e 94 c1 03 	call	0x782	; 0x782 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1148:	b3 94       	inc	r11
    114a:	f6 cf       	rjmp	.-20     	; 0x1138 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    114c:	a7 01       	movw	r20, r14
    114e:	96 01       	movw	r18, r12
    1150:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__addsf3>
    1154:	6b 01       	movw	r12, r22
    1156:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1158:	0e 94 b0 18 	call	0x3160	; 0x3160 <__fixunssfsi>
    115c:	4b 01       	movw	r8, r22
    115e:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1160:	2a e0       	ldi	r18, 0x0A	; 10
    1162:	ab 01       	movw	r20, r22
    1164:	bc 01       	movw	r22, r24
    1166:	c8 01       	movw	r24, r16
    1168:	0e 94 c9 07 	call	0xf92	; 0xf92 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    116c:	c8 0f       	add	r28, r24
    116e:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1170:	77 20       	and	r7, r7
    1172:	b9 f1       	breq	.+110    	; 0x11e2 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1174:	c5 01       	movw	r24, r10
    1176:	b4 01       	movw	r22, r8
    1178:	0e 94 33 04 	call	0x866	; 0x866 <__floatunsisf>
    117c:	9b 01       	movw	r18, r22
    117e:	ac 01       	movw	r20, r24
    1180:	c7 01       	movw	r24, r14
    1182:	b6 01       	movw	r22, r12
    1184:	0e 94 4f 03 	call	0x69e	; 0x69e <__subsf3>
    1188:	6b 01       	movw	r12, r22
    118a:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    118c:	6e e2       	ldi	r22, 0x2E	; 46
    118e:	c8 01       	movw	r24, r16
    1190:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN5Print5printEc>
    1194:	c8 0f       	add	r28, r24
    1196:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e2       	ldi	r20, 0x20	; 32
    119e:	51 e4       	ldi	r21, 0x41	; 65
    11a0:	c7 01       	movw	r24, r14
    11a2:	b6 01       	movw	r22, r12
    11a4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
    11a8:	4b 01       	movw	r8, r22
    11aa:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    11ac:	0e 94 b0 18 	call	0x3160	; 0x3160 <__fixunssfsi>
    11b0:	6b 01       	movw	r12, r22
    11b2:	7c 01       	movw	r14, r24
    n += print(toPrint);
    11b4:	4a e0       	ldi	r20, 0x0A	; 10
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	c8 01       	movw	r24, r16
    11ba:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN5Print5printEji>
    11be:	c8 0f       	add	r28, r24
    11c0:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    11c2:	b6 01       	movw	r22, r12
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 33 04 	call	0x866	; 0x866 <__floatunsisf>
    11cc:	9b 01       	movw	r18, r22
    11ce:	ac 01       	movw	r20, r24
    11d0:	c5 01       	movw	r24, r10
    11d2:	b4 01       	movw	r22, r8
    11d4:	0e 94 4f 03 	call	0x69e	; 0x69e <__subsf3>
    11d8:	6b 01       	movw	r12, r22
    11da:	7c 01       	movw	r14, r24
    11dc:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    11de:	71 10       	cpse	r7, r1
    11e0:	db cf       	rjmp	.-74     	; 0x1198 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    11e2:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	df 90       	pop	r13
    11f2:	cf 90       	pop	r12
    11f4:	bf 90       	pop	r11
    11f6:	af 90       	pop	r10
    11f8:	9f 90       	pop	r9
    11fa:	8f 90       	pop	r8
    11fc:	7f 90       	pop	r7
    11fe:	08 95       	ret

00001200 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1200:	0c 94 25 08 	jmp	0x104a	; 0x104a <_ZN5Print10printFloatEdh>

00001204 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1204:	1f 92       	push	r1
    1206:	0f 92       	push	r0
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	0f 92       	push	r0
    120c:	11 24       	eor	r1, r1
    120e:	2f 93       	push	r18
    1210:	3f 93       	push	r19
    1212:	8f 93       	push	r24
    1214:	9f 93       	push	r25
    1216:	af 93       	push	r26
    1218:	bf 93       	push	r27
    121a:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <timer0_millis>
    121e:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <timer0_millis+0x1>
    1222:	a0 91 76 03 	lds	r26, 0x0376	; 0x800376 <timer0_millis+0x2>
    1226:	b0 91 77 03 	lds	r27, 0x0377	; 0x800377 <timer0_millis+0x3>
    122a:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <timer0_fract>
    122e:	23 e0       	ldi	r18, 0x03	; 3
    1230:	23 0f       	add	r18, r19
    1232:	2d 37       	cpi	r18, 0x7D	; 125
    1234:	20 f4       	brcc	.+8      	; 0x123e <__vector_16+0x3a>
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	a1 1d       	adc	r26, r1
    123a:	b1 1d       	adc	r27, r1
    123c:	05 c0       	rjmp	.+10     	; 0x1248 <__vector_16+0x44>
    123e:	26 e8       	ldi	r18, 0x86	; 134
    1240:	23 0f       	add	r18, r19
    1242:	02 96       	adiw	r24, 0x02	; 2
    1244:	a1 1d       	adc	r26, r1
    1246:	b1 1d       	adc	r27, r1
    1248:	20 93 73 03 	sts	0x0373, r18	; 0x800373 <timer0_fract>
    124c:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <timer0_millis>
    1250:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <timer0_millis+0x1>
    1254:	a0 93 76 03 	sts	0x0376, r26	; 0x800376 <timer0_millis+0x2>
    1258:	b0 93 77 03 	sts	0x0377, r27	; 0x800377 <timer0_millis+0x3>
    125c:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <timer0_overflow_count>
    1260:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <timer0_overflow_count+0x1>
    1264:	a0 91 7a 03 	lds	r26, 0x037A	; 0x80037a <timer0_overflow_count+0x2>
    1268:	b0 91 7b 03 	lds	r27, 0x037B	; 0x80037b <timer0_overflow_count+0x3>
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	a1 1d       	adc	r26, r1
    1270:	b1 1d       	adc	r27, r1
    1272:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <timer0_overflow_count>
    1276:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <timer0_overflow_count+0x1>
    127a:	a0 93 7a 03 	sts	0x037A, r26	; 0x80037a <timer0_overflow_count+0x2>
    127e:	b0 93 7b 03 	sts	0x037B, r27	; 0x80037b <timer0_overflow_count+0x3>
    1282:	bf 91       	pop	r27
    1284:	af 91       	pop	r26
    1286:	9f 91       	pop	r25
    1288:	8f 91       	pop	r24
    128a:	3f 91       	pop	r19
    128c:	2f 91       	pop	r18
    128e:	0f 90       	pop	r0
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	0f 90       	pop	r0
    1294:	1f 90       	pop	r1
    1296:	18 95       	reti

00001298 <micros>:
    1298:	3f b7       	in	r19, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <timer0_overflow_count>
    12a0:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <timer0_overflow_count+0x1>
    12a4:	a0 91 7a 03 	lds	r26, 0x037A	; 0x80037a <timer0_overflow_count+0x2>
    12a8:	b0 91 7b 03 	lds	r27, 0x037B	; 0x80037b <timer0_overflow_count+0x3>
    12ac:	26 b5       	in	r18, 0x26	; 38
    12ae:	a8 9b       	sbis	0x15, 0	; 21
    12b0:	05 c0       	rjmp	.+10     	; 0x12bc <micros+0x24>
    12b2:	2f 3f       	cpi	r18, 0xFF	; 255
    12b4:	19 f0       	breq	.+6      	; 0x12bc <micros+0x24>
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	a1 1d       	adc	r26, r1
    12ba:	b1 1d       	adc	r27, r1
    12bc:	3f bf       	out	0x3f, r19	; 63
    12be:	ba 2f       	mov	r27, r26
    12c0:	a9 2f       	mov	r26, r25
    12c2:	98 2f       	mov	r25, r24
    12c4:	88 27       	eor	r24, r24
    12c6:	82 0f       	add	r24, r18
    12c8:	91 1d       	adc	r25, r1
    12ca:	a1 1d       	adc	r26, r1
    12cc:	b1 1d       	adc	r27, r1
    12ce:	bc 01       	movw	r22, r24
    12d0:	cd 01       	movw	r24, r26
    12d2:	42 e0       	ldi	r20, 0x02	; 2
    12d4:	66 0f       	add	r22, r22
    12d6:	77 1f       	adc	r23, r23
    12d8:	88 1f       	adc	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	4a 95       	dec	r20
    12de:	d1 f7       	brne	.-12     	; 0x12d4 <micros+0x3c>
    12e0:	08 95       	ret

000012e2 <delay>:
    12e2:	8f 92       	push	r8
    12e4:	9f 92       	push	r9
    12e6:	af 92       	push	r10
    12e8:	bf 92       	push	r11
    12ea:	cf 92       	push	r12
    12ec:	df 92       	push	r13
    12ee:	ef 92       	push	r14
    12f0:	ff 92       	push	r15
    12f2:	6b 01       	movw	r12, r22
    12f4:	7c 01       	movw	r14, r24
    12f6:	0e 94 4c 09 	call	0x1298	; 0x1298 <micros>
    12fa:	4b 01       	movw	r8, r22
    12fc:	5c 01       	movw	r10, r24
    12fe:	c1 14       	cp	r12, r1
    1300:	d1 04       	cpc	r13, r1
    1302:	e1 04       	cpc	r14, r1
    1304:	f1 04       	cpc	r15, r1
    1306:	01 f1       	breq	.+64     	; 0x1348 <delay+0x66>
    1308:	0e 94 84 16 	call	0x2d08	; 0x2d08 <yield>
    130c:	0e 94 4c 09 	call	0x1298	; 0x1298 <micros>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	88 19       	sub	r24, r8
    1316:	99 09       	sbc	r25, r9
    1318:	aa 09       	sbc	r26, r10
    131a:	bb 09       	sbc	r27, r11
    131c:	88 3e       	cpi	r24, 0xE8	; 232
    131e:	93 40       	sbci	r25, 0x03	; 3
    1320:	a1 05       	cpc	r26, r1
    1322:	b1 05       	cpc	r27, r1
    1324:	60 f3       	brcs	.-40     	; 0x12fe <delay+0x1c>
    1326:	21 e0       	ldi	r18, 0x01	; 1
    1328:	c2 1a       	sub	r12, r18
    132a:	d1 08       	sbc	r13, r1
    132c:	e1 08       	sbc	r14, r1
    132e:	f1 08       	sbc	r15, r1
    1330:	88 ee       	ldi	r24, 0xE8	; 232
    1332:	88 0e       	add	r8, r24
    1334:	83 e0       	ldi	r24, 0x03	; 3
    1336:	98 1e       	adc	r9, r24
    1338:	a1 1c       	adc	r10, r1
    133a:	b1 1c       	adc	r11, r1
    133c:	c1 14       	cp	r12, r1
    133e:	d1 04       	cpc	r13, r1
    1340:	e1 04       	cpc	r14, r1
    1342:	f1 04       	cpc	r15, r1
    1344:	19 f7       	brne	.-58     	; 0x130c <delay+0x2a>
    1346:	db cf       	rjmp	.-74     	; 0x12fe <delay+0x1c>
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	df 90       	pop	r13
    134e:	cf 90       	pop	r12
    1350:	bf 90       	pop	r11
    1352:	af 90       	pop	r10
    1354:	9f 90       	pop	r9
    1356:	8f 90       	pop	r8
    1358:	08 95       	ret

0000135a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    135a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    135c:	84 b5       	in	r24, 0x24	; 36
    135e:	82 60       	ori	r24, 0x02	; 2
    1360:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1362:	84 b5       	in	r24, 0x24	; 36
    1364:	81 60       	ori	r24, 0x01	; 1
    1366:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1368:	85 b5       	in	r24, 0x25	; 37
    136a:	82 60       	ori	r24, 0x02	; 2
    136c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    136e:	85 b5       	in	r24, 0x25	; 37
    1370:	81 60       	ori	r24, 0x01	; 1
    1372:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1374:	ee e6       	ldi	r30, 0x6E	; 110
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	81 60       	ori	r24, 0x01	; 1
    137c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    137e:	e1 e8       	ldi	r30, 0x81	; 129
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1384:	80 81       	ld	r24, Z
    1386:	82 60       	ori	r24, 0x02	; 2
    1388:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    138a:	80 81       	ld	r24, Z
    138c:	81 60       	ori	r24, 0x01	; 1
    138e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1390:	e0 e8       	ldi	r30, 0x80	; 128
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	81 60       	ori	r24, 0x01	; 1
    1398:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    139a:	e1 eb       	ldi	r30, 0xB1	; 177
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	84 60       	ori	r24, 0x04	; 4
    13a2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    13a4:	e0 eb       	ldi	r30, 0xB0	; 176
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	81 60       	ori	r24, 0x01	; 1
    13ac:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    13ae:	ea e7       	ldi	r30, 0x7A	; 122
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	84 60       	ori	r24, 0x04	; 4
    13b6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    13b8:	80 81       	ld	r24, Z
    13ba:	82 60       	ori	r24, 0x02	; 2
    13bc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    13be:	80 81       	ld	r24, Z
    13c0:	81 60       	ori	r24, 0x01	; 1
    13c2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    13c4:	80 81       	ld	r24, Z
    13c6:	80 68       	ori	r24, 0x80	; 128
    13c8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    13ca:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    13ce:	08 95       	ret

000013d0 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    13d0:	8e 30       	cpi	r24, 0x0E	; 14
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <analogRead+0x6>
    13d4:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    13d6:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <analog_reference>
    13da:	90 e4       	ldi	r25, 0x40	; 64
    13dc:	29 9f       	mul	r18, r25
    13de:	90 01       	movw	r18, r0
    13e0:	11 24       	eor	r1, r1
    13e2:	87 70       	andi	r24, 0x07	; 7
    13e4:	82 2b       	or	r24, r18
    13e6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    13ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    13ee:	80 64       	ori	r24, 0x40	; 64
    13f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    13f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    13f8:	86 fd       	sbrc	r24, 6
    13fa:	fc cf       	rjmp	.-8      	; 0x13f4 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    13fc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    1400:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1404:	90 e0       	ldi	r25, 0x00	; 0
}
    1406:	92 2b       	or	r25, r18
    1408:	08 95       	ret

0000140a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	81 f0       	breq	.+32     	; 0x142e <turnOffPWM+0x24>
    140e:	28 f4       	brcc	.+10     	; 0x141a <turnOffPWM+0x10>
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	99 f0       	breq	.+38     	; 0x143a <turnOffPWM+0x30>
    1414:	82 30       	cpi	r24, 0x02	; 2
    1416:	a1 f0       	breq	.+40     	; 0x1440 <turnOffPWM+0x36>
    1418:	08 95       	ret
    141a:	87 30       	cpi	r24, 0x07	; 7
    141c:	a9 f0       	breq	.+42     	; 0x1448 <turnOffPWM+0x3e>
    141e:	88 30       	cpi	r24, 0x08	; 8
    1420:	b9 f0       	breq	.+46     	; 0x1450 <turnOffPWM+0x46>
    1422:	84 30       	cpi	r24, 0x04	; 4
    1424:	d1 f4       	brne	.+52     	; 0x145a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1426:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    142a:	8f 7d       	andi	r24, 0xDF	; 223
    142c:	03 c0       	rjmp	.+6      	; 0x1434 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    142e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1432:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1434:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1438:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    143a:	84 b5       	in	r24, 0x24	; 36
    143c:	8f 77       	andi	r24, 0x7F	; 127
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1440:	84 b5       	in	r24, 0x24	; 36
    1442:	8f 7d       	andi	r24, 0xDF	; 223
    1444:	84 bd       	out	0x24, r24	; 36
    1446:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1448:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    144c:	8f 77       	andi	r24, 0x7F	; 127
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1450:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1454:	8f 7d       	andi	r24, 0xDF	; 223
    1456:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    145a:	08 95       	ret

0000145c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	fc 01       	movw	r30, r24
    1464:	ea 56       	subi	r30, 0x6A	; 106
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    146a:	fc 01       	movw	r30, r24
    146c:	e6 55       	subi	r30, 0x56	; 86
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1472:	88 23       	and	r24, r24
    1474:	61 f1       	breq	.+88     	; 0x14ce <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	fc 01       	movw	r30, r24
    147e:	ee 52       	subi	r30, 0x2E	; 46
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	c5 91       	lpm	r28, Z+
    1484:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1486:	fc 01       	movw	r30, r24
    1488:	e8 53       	subi	r30, 0x38	; 56
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	a5 91       	lpm	r26, Z+
    148e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1490:	61 11       	cpse	r22, r1
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1494:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1496:	f8 94       	cli
		*reg &= ~bit;
    1498:	88 81       	ld	r24, Y
    149a:	20 95       	com	r18
    149c:	82 23       	and	r24, r18
    149e:	88 83       	st	Y, r24
		*out &= ~bit;
    14a0:	ec 91       	ld	r30, X
    14a2:	2e 23       	and	r18, r30
    14a4:	0b c0       	rjmp	.+22     	; 0x14bc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    14a6:	62 30       	cpi	r22, 0x02	; 2
    14a8:	61 f4       	brne	.+24     	; 0x14c2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    14aa:	9f b7       	in	r25, 0x3f	; 63
                cli();
    14ac:	f8 94       	cli
		*reg &= ~bit;
    14ae:	88 81       	ld	r24, Y
    14b0:	32 2f       	mov	r19, r18
    14b2:	30 95       	com	r19
    14b4:	83 23       	and	r24, r19
    14b6:	88 83       	st	Y, r24
		*out |= bit;
    14b8:	ec 91       	ld	r30, X
    14ba:	2e 2b       	or	r18, r30
    14bc:	2c 93       	st	X, r18
		SREG = oldSREG;
    14be:	9f bf       	out	0x3f, r25	; 63
    14c0:	06 c0       	rjmp	.+12     	; 0x14ce <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    14c2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    14c4:	f8 94       	cli
		*reg |= bit;
    14c6:	e8 81       	ld	r30, Y
    14c8:	2e 2b       	or	r18, r30
    14ca:	28 83       	st	Y, r18
		SREG = oldSREG;
    14cc:	8f bf       	out	0x3f, r24	; 63
	}
}
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	f9 01       	movw	r30, r18
    14e0:	ee 57       	subi	r30, 0x7E	; 126
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    14e6:	f9 01       	movw	r30, r18
    14e8:	ea 56       	subi	r30, 0x6A	; 106
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    14ee:	f9 01       	movw	r30, r18
    14f0:	e6 55       	subi	r30, 0x56	; 86
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    14f6:	cc 23       	and	r28, r28
    14f8:	c1 f0       	breq	.+48     	; 0x152a <digitalWrite+0x56>
    14fa:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    14fc:	81 11       	cpse	r24, r1
    14fe:	0e 94 05 0a 	call	0x140a	; 0x140a <turnOffPWM>

	out = portOutputRegister(port);
    1502:	ec 2f       	mov	r30, r28
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	ee 0f       	add	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	e8 53       	subi	r30, 0x38	; 56
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	a5 91       	lpm	r26, Z+
    1510:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1512:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1514:	f8 94       	cli

	if (val == LOW) {
    1516:	11 11       	cpse	r17, r1
    1518:	04 c0       	rjmp	.+8      	; 0x1522 <digitalWrite+0x4e>
		*out &= ~bit;
    151a:	8c 91       	ld	r24, X
    151c:	d0 95       	com	r29
    151e:	d8 23       	and	r29, r24
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1522:	ec 91       	ld	r30, X
    1524:	de 2b       	or	r29, r30
    1526:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1528:	9f bf       	out	0x3f, r25	; 63
}
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	08 95       	ret

00001532 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	f9 01       	movw	r30, r18
    153c:	ee 57       	subi	r30, 0x7E	; 126
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1542:	f9 01       	movw	r30, r18
    1544:	ea 56       	subi	r30, 0x6A	; 106
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    154a:	f9 01       	movw	r30, r18
    154c:	e6 55       	subi	r30, 0x56	; 86
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1552:	cc 23       	and	r28, r28
    1554:	91 f0       	breq	.+36     	; 0x157a <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1556:	81 11       	cpse	r24, r1
    1558:	0e 94 05 0a 	call	0x140a	; 0x140a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    155c:	ec 2f       	mov	r30, r28
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	e2 54       	subi	r30, 0x42	; 66
    1566:	ff 4f       	sbci	r31, 0xFF	; 255
    1568:	a5 91       	lpm	r26, Z+
    156a:	b4 91       	lpm	r27, Z
    156c:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    156e:	ed 23       	and	r30, r29
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	21 f4       	brne	.+8      	; 0x157e <digitalRead+0x4c>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	02 c0       	rjmp	.+4      	; 0x157e <digitalRead+0x4c>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <_ZN8SPIClass16beginTransactionE11SPISettings>:
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr, TwoWire *theWire)
{
    _i2caddr = addr;
	_wire = theWire;
	return init();
    1584:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <_ZN8SPIClass13interruptModeE>
    1588:	22 23       	and	r18, r18
    158a:	99 f0       	breq	.+38     	; 0x15b2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    158c:	4f b7       	in	r20, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <_ZN8SPIClass13interruptModeE>
    1594:	21 30       	cpi	r18, 0x01	; 1
    1596:	59 f4       	brne	.+22     	; 0x15ae <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    1598:	2d b3       	in	r18, 0x1d	; 29
    159a:	20 93 7c 03 	sts	0x037C, r18	; 0x80037c <_ZN8SPIClass13interruptSaveE>
    159e:	3d b3       	in	r19, 0x1d	; 29
    15a0:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <_ZN8SPIClass13interruptMaskE>
    15a4:	20 95       	com	r18
    15a6:	23 23       	and	r18, r19
    15a8:	2d bb       	out	0x1d, r18	; 29
    15aa:	4f bf       	out	0x3f, r20	; 63
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    15ae:	40 93 7c 03 	sts	0x037C, r20	; 0x80037c <_ZN8SPIClass13interruptSaveE>
    15b2:	8c bd       	out	0x2c, r24	; 44
    15b4:	9d bd       	out	0x2d, r25	; 45
    15b6:	08 95       	ret

000015b8 <_ZN8SPIClass14endTransactionEv>:
    15b8:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <_ZN8SPIClass13interruptModeE>
    15bc:	88 23       	and	r24, r24
    15be:	61 f0       	breq	.+24     	; 0x15d8 <_ZN8SPIClass14endTransactionEv+0x20>
    15c0:	9f b7       	in	r25, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <_ZN8SPIClass13interruptModeE>
    15c8:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <_ZN8SPIClass13interruptSaveE>
    15cc:	21 30       	cpi	r18, 0x01	; 1
    15ce:	19 f4       	brne	.+6      	; 0x15d6 <_ZN8SPIClass14endTransactionEv+0x1e>
    15d0:	8d bb       	out	0x1d, r24	; 29
    15d2:	9f bf       	out	0x3f, r25	; 63
    15d4:	08 95       	ret
    15d6:	8f bf       	out	0x3f, r24	; 63
    15d8:	08 95       	ret

000015da <_ZN15Adafruit_BME280C1Ev>:
    15da:	fc 01       	movw	r30, r24
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	83 87       	std	Z+11, r24	; 0x0b
    15e0:	84 87       	std	Z+12, r24	; 0x0c
    15e2:	85 87       	std	Z+13, r24	; 0x0d
    15e4:	86 87       	std	Z+14, r24	; 0x0e
    15e6:	08 95       	ret

000015e8 <_ZN15Adafruit_BME2807spixferEh>:
    15e8:	cf 92       	push	r12
    15ea:	df 92       	push	r13
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	fc 01       	movw	r30, r24
    15fa:	26 85       	ldd	r18, Z+14	; 0x0e
    15fc:	2f 3f       	cpi	r18, 0xFF	; 255
    15fe:	39 f4       	brne	.+14     	; 0x160e <_ZN15Adafruit_BME2807spixferEh+0x26>
    1600:	6e bd       	out	0x2e, r22	; 46
    1602:	00 00       	nop
    1604:	0d b4       	in	r0, 0x2d	; 45
    1606:	07 fe       	sbrs	r0, 7
    1608:	fd cf       	rjmp	.-6      	; 0x1604 <_ZN15Adafruit_BME2807spixferEh+0x1c>
    160a:	8e b5       	in	r24, 0x2e	; 46
    160c:	2b c0       	rjmp	.+86     	; 0x1664 <_ZN15Adafruit_BME2807spixferEh+0x7c>
    160e:	d6 2f       	mov	r29, r22
    1610:	8c 01       	movw	r16, r24
    1612:	87 e0       	ldi	r24, 0x07	; 7
    1614:	e8 2e       	mov	r14, r24
    1616:	f1 2c       	mov	r15, r1
    1618:	c0 e0       	ldi	r28, 0x00	; 0
    161a:	cc 24       	eor	r12, r12
    161c:	c3 94       	inc	r12
    161e:	d1 2c       	mov	r13, r1
    1620:	cc 0f       	add	r28, r28
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	f8 01       	movw	r30, r16
    1626:	86 85       	ldd	r24, Z+14	; 0x0e
    1628:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    162c:	b6 01       	movw	r22, r12
    162e:	0e 2c       	mov	r0, r14
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <_ZN15Adafruit_BME2807spixferEh+0x4c>
    1632:	66 0f       	add	r22, r22
    1634:	0a 94       	dec	r0
    1636:	ea f7       	brpl	.-6      	; 0x1632 <_ZN15Adafruit_BME2807spixferEh+0x4a>
    1638:	6d 23       	and	r22, r29
    163a:	f8 01       	movw	r30, r16
    163c:	84 85       	ldd	r24, Z+12	; 0x0c
    163e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	f8 01       	movw	r30, r16
    1646:	86 85       	ldd	r24, Z+14	; 0x0e
    1648:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    164c:	f8 01       	movw	r30, r16
    164e:	85 85       	ldd	r24, Z+13	; 0x0d
    1650:	0e 94 99 0a 	call	0x1532	; 0x1532 <digitalRead>
    1654:	89 2b       	or	r24, r25
    1656:	09 f0       	breq	.+2      	; 0x165a <_ZN15Adafruit_BME2807spixferEh+0x72>
    1658:	c1 60       	ori	r28, 0x01	; 1
    165a:	f1 e0       	ldi	r31, 0x01	; 1
    165c:	ef 1a       	sub	r14, r31
    165e:	f1 08       	sbc	r15, r1
    1660:	f8 f6       	brcc	.-66     	; 0x1620 <_ZN15Adafruit_BME2807spixferEh+0x38>
    1662:	8c 2f       	mov	r24, r28
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	ff 90       	pop	r15
    166e:	ef 90       	pop	r14
    1670:	df 90       	pop	r13
    1672:	cf 90       	pop	r12
    1674:	08 95       	ret

00001676 <_ZN15Adafruit_BME2806write8Ehh>:
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	ec 01       	movw	r28, r24
    1680:	16 2f       	mov	r17, r22
    1682:	04 2f       	mov	r16, r20
    1684:	8b 85       	ldd	r24, Y+11	; 0x0b
    1686:	8f 3f       	cpi	r24, 0xFF	; 255
    1688:	09 f5       	brne	.+66     	; 0x16cc <_ZN15Adafruit_BME2806write8Ehh+0x56>
    168a:	6a 81       	ldd	r22, Y+2	; 0x02
    168c:	88 81       	ld	r24, Y
    168e:	99 81       	ldd	r25, Y+1	; 0x01
    1690:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN7TwoWire17beginTransmissionEh>
    1694:	88 81       	ld	r24, Y
    1696:	99 81       	ldd	r25, Y+1	; 0x01
    1698:	dc 01       	movw	r26, r24
    169a:	ed 91       	ld	r30, X+
    169c:	fc 91       	ld	r31, X
    169e:	01 90       	ld	r0, Z+
    16a0:	f0 81       	ld	r31, Z
    16a2:	e0 2d       	mov	r30, r0
    16a4:	61 2f       	mov	r22, r17
    16a6:	09 95       	icall
    16a8:	88 81       	ld	r24, Y
    16aa:	99 81       	ldd	r25, Y+1	; 0x01
    16ac:	dc 01       	movw	r26, r24
    16ae:	ed 91       	ld	r30, X+
    16b0:	fc 91       	ld	r31, X
    16b2:	01 90       	ld	r0, Z+
    16b4:	f0 81       	ld	r31, Z
    16b6:	e0 2d       	mov	r30, r0
    16b8:	60 2f       	mov	r22, r16
    16ba:	09 95       	icall
    16bc:	88 81       	ld	r24, Y
    16be:	99 81       	ldd	r25, Y+1	; 0x01
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <_ZN7TwoWire15endTransmissionEv>
    16cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    16ce:	8f 3f       	cpi	r24, 0xFF	; 255
    16d0:	21 f4       	brne	.+8      	; 0x16da <_ZN15Adafruit_BME2806write8Ehh+0x64>
    16d2:	82 e5       	ldi	r24, 0x52	; 82
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZN8SPIClass16beginTransactionE11SPISettings>
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    16de:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    16e2:	61 2f       	mov	r22, r17
    16e4:	6f 77       	andi	r22, 0x7F	; 127
    16e6:	ce 01       	movw	r24, r28
    16e8:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN15Adafruit_BME2807spixferEh>
    16ec:	60 2f       	mov	r22, r16
    16ee:	ce 01       	movw	r24, r28
    16f0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN15Adafruit_BME2807spixferEh>
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    16f8:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    16fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    16fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1700:	31 f4       	brne	.+12     	; 0x170e <_ZN15Adafruit_BME2806write8Ehh+0x98>
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <_ZN8SPIClass14endTransactionEv>
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	08 95       	ret

00001718 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
    1718:	cf 92       	push	r12
    171a:	ef 92       	push	r14
    171c:	0f 93       	push	r16
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	ec 01       	movw	r28, r24
    1724:	62 95       	swap	r22
    1726:	66 0f       	add	r22, r22
    1728:	66 0f       	add	r22, r22
    172a:	60 7c       	andi	r22, 0xC0	; 192
    172c:	47 70       	andi	r20, 0x07	; 7
    172e:	27 70       	andi	r18, 0x07	; 7
    1730:	82 2f       	mov	r24, r18
    1732:	88 0f       	add	r24, r24
    1734:	88 0f       	add	r24, r24
    1736:	88 0f       	add	r24, r24
    1738:	26 2f       	mov	r18, r22
    173a:	24 2b       	or	r18, r20
    173c:	28 2b       	or	r18, r24
    173e:	29 ab       	std	Y+49, r18	; 0x31
    1740:	90 2f       	mov	r25, r16
    1742:	92 95       	swap	r25
    1744:	99 0f       	add	r25, r25
    1746:	90 7e       	andi	r25, 0xE0	; 224
    1748:	8a a9       	ldd	r24, Y+50	; 0x32
    174a:	8f 71       	andi	r24, 0x1F	; 31
    174c:	89 2b       	or	r24, r25
    174e:	8a ab       	std	Y+50, r24	; 0x32
    1750:	8e 2d       	mov	r24, r14
    1752:	87 70       	andi	r24, 0x07	; 7
    1754:	88 0f       	add	r24, r24
    1756:	88 0f       	add	r24, r24
    1758:	88 0f       	add	r24, r24
    175a:	98 a9       	ldd	r25, Y+48	; 0x30
    175c:	29 2f       	mov	r18, r25
    175e:	20 7c       	andi	r18, 0xC0	; 192
    1760:	9c 2d       	mov	r25, r12
    1762:	97 70       	andi	r25, 0x07	; 7
    1764:	e2 2e       	mov	r14, r18
    1766:	e8 2a       	or	r14, r24
    1768:	e9 2a       	or	r14, r25
    176a:	e8 aa       	std	Y+48, r14	; 0x30
    176c:	40 2f       	mov	r20, r16
    176e:	47 70       	andi	r20, 0x07	; 7
    1770:	62 ef       	ldi	r22, 0xF2	; 242
    1772:	ce 01       	movw	r24, r28
    1774:	0e 94 3b 0b 	call	0x1676	; 0x1676 <_ZN15Adafruit_BME2806write8Ehh>
    1778:	98 a9       	ldd	r25, Y+48	; 0x30
    177a:	49 2f       	mov	r20, r25
    177c:	47 70       	andi	r20, 0x07	; 7
    177e:	60 e2       	ldi	r22, 0x20	; 32
    1780:	46 9f       	mul	r20, r22
    1782:	90 01       	movw	r18, r0
    1784:	11 24       	eor	r1, r1
    1786:	89 2f       	mov	r24, r25
    1788:	86 95       	lsr	r24
    178a:	86 95       	lsr	r24
    178c:	86 95       	lsr	r24
    178e:	87 70       	andi	r24, 0x07	; 7
    1790:	68 e0       	ldi	r22, 0x08	; 8
    1792:	86 9f       	mul	r24, r22
    1794:	a0 01       	movw	r20, r0
    1796:	11 24       	eor	r1, r1
    1798:	42 2b       	or	r20, r18
    179a:	53 2b       	or	r21, r19
    179c:	97 fb       	bst	r25, 7
    179e:	99 27       	eor	r25, r25
    17a0:	90 f9       	bld	r25, 0
    17a2:	49 2b       	or	r20, r25
    17a4:	65 ef       	ldi	r22, 0xF5	; 245
    17a6:	ce 01       	movw	r24, r28
    17a8:	0e 94 3b 0b 	call	0x1676	; 0x1676 <_ZN15Adafruit_BME2806write8Ehh>
    17ac:	99 a9       	ldd	r25, Y+49	; 0x31
    17ae:	49 2f       	mov	r20, r25
    17b0:	47 70       	andi	r20, 0x07	; 7
    17b2:	80 e2       	ldi	r24, 0x20	; 32
    17b4:	48 9f       	mul	r20, r24
    17b6:	90 01       	movw	r18, r0
    17b8:	11 24       	eor	r1, r1
    17ba:	89 2f       	mov	r24, r25
    17bc:	86 95       	lsr	r24
    17be:	86 95       	lsr	r24
    17c0:	86 95       	lsr	r24
    17c2:	87 70       	andi	r24, 0x07	; 7
    17c4:	68 e0       	ldi	r22, 0x08	; 8
    17c6:	86 9f       	mul	r24, r22
    17c8:	a0 01       	movw	r20, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	42 2b       	or	r20, r18
    17ce:	53 2b       	or	r21, r19
    17d0:	92 95       	swap	r25
    17d2:	96 95       	lsr	r25
    17d4:	96 95       	lsr	r25
    17d6:	93 70       	andi	r25, 0x03	; 3
    17d8:	49 2b       	or	r20, r25
    17da:	64 ef       	ldi	r22, 0xF4	; 244
    17dc:	ce 01       	movw	r24, r28
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	0f 91       	pop	r16
    17e4:	ef 90       	pop	r14
    17e6:	cf 90       	pop	r12
    17e8:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <_ZN15Adafruit_BME2806write8Ehh>

000017ec <_ZN15Adafruit_BME2805read8Eh>:
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	ec 01       	movw	r28, r24
    17f4:	16 2f       	mov	r17, r22
    17f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    17f8:	8f 3f       	cpi	r24, 0xFF	; 255
    17fa:	21 f5       	brne	.+72     	; 0x1844 <_ZN15Adafruit_BME2805read8Eh+0x58>
    17fc:	6a 81       	ldd	r22, Y+2	; 0x02
    17fe:	88 81       	ld	r24, Y
    1800:	99 81       	ldd	r25, Y+1	; 0x01
    1802:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN7TwoWire17beginTransmissionEh>
    1806:	88 81       	ld	r24, Y
    1808:	99 81       	ldd	r25, Y+1	; 0x01
    180a:	dc 01       	movw	r26, r24
    180c:	ed 91       	ld	r30, X+
    180e:	fc 91       	ld	r31, X
    1810:	01 90       	ld	r0, Z+
    1812:	f0 81       	ld	r31, Z
    1814:	e0 2d       	mov	r30, r0
    1816:	61 2f       	mov	r22, r17
    1818:	09 95       	icall
    181a:	88 81       	ld	r24, Y
    181c:	99 81       	ldd	r25, Y+1	; 0x01
    181e:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN7TwoWire15endTransmissionEv>
    1822:	41 e0       	ldi	r20, 0x01	; 1
    1824:	6a 81       	ldd	r22, Y+2	; 0x02
    1826:	88 81       	ld	r24, Y
    1828:	99 81       	ldd	r25, Y+1	; 0x01
    182a:	0e 94 77 16 	call	0x2cee	; 0x2cee <_ZN7TwoWire11requestFromEhh>
    182e:	88 81       	ld	r24, Y
    1830:	99 81       	ldd	r25, Y+1	; 0x01
    1832:	dc 01       	movw	r26, r24
    1834:	ed 91       	ld	r30, X+
    1836:	fc 91       	ld	r31, X
    1838:	02 84       	ldd	r0, Z+10	; 0x0a
    183a:	f3 85       	ldd	r31, Z+11	; 0x0b
    183c:	e0 2d       	mov	r30, r0
    183e:	09 95       	icall
    1840:	18 2f       	mov	r17, r24
    1842:	1e c0       	rjmp	.+60     	; 0x1880 <_ZN15Adafruit_BME2805read8Eh+0x94>
    1844:	8e 85       	ldd	r24, Y+14	; 0x0e
    1846:	8f 3f       	cpi	r24, 0xFF	; 255
    1848:	21 f4       	brne	.+8      	; 0x1852 <_ZN15Adafruit_BME2805read8Eh+0x66>
    184a:	82 e5       	ldi	r24, 0x52	; 82
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZN8SPIClass16beginTransactionE11SPISettings>
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	8b 85       	ldd	r24, Y+11	; 0x0b
    1856:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    185a:	61 2f       	mov	r22, r17
    185c:	60 68       	ori	r22, 0x80	; 128
    185e:	ce 01       	movw	r24, r28
    1860:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN15Adafruit_BME2807spixferEh>
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	ce 01       	movw	r24, r28
    1868:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN15Adafruit_BME2807spixferEh>
    186c:	18 2f       	mov	r17, r24
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	8b 85       	ldd	r24, Y+11	; 0x0b
    1872:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    1876:	8e 85       	ldd	r24, Y+14	; 0x0e
    1878:	8f 3f       	cpi	r24, 0xFF	; 255
    187a:	11 f4       	brne	.+4      	; 0x1880 <_ZN15Adafruit_BME2805read8Eh+0x94>
    187c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <_ZN8SPIClass14endTransactionEv>
    1880:	81 2f       	mov	r24, r17
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	08 95       	ret

0000188a <_ZN15Adafruit_BME2806read16Eh>:
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	ec 01       	movw	r28, r24
    1894:	16 2f       	mov	r17, r22
    1896:	8b 85       	ldd	r24, Y+11	; 0x0b
    1898:	8f 3f       	cpi	r24, 0xFF	; 255
    189a:	99 f5       	brne	.+102    	; 0x1902 <_ZN15Adafruit_BME2806read16Eh+0x78>
    189c:	6a 81       	ldd	r22, Y+2	; 0x02
    189e:	88 81       	ld	r24, Y
    18a0:	99 81       	ldd	r25, Y+1	; 0x01
    18a2:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN7TwoWire17beginTransmissionEh>
    18a6:	88 81       	ld	r24, Y
    18a8:	99 81       	ldd	r25, Y+1	; 0x01
    18aa:	dc 01       	movw	r26, r24
    18ac:	ed 91       	ld	r30, X+
    18ae:	fc 91       	ld	r31, X
    18b0:	01 90       	ld	r0, Z+
    18b2:	f0 81       	ld	r31, Z
    18b4:	e0 2d       	mov	r30, r0
    18b6:	61 2f       	mov	r22, r17
    18b8:	09 95       	icall
    18ba:	88 81       	ld	r24, Y
    18bc:	99 81       	ldd	r25, Y+1	; 0x01
    18be:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN7TwoWire15endTransmissionEv>
    18c2:	42 e0       	ldi	r20, 0x02	; 2
    18c4:	6a 81       	ldd	r22, Y+2	; 0x02
    18c6:	88 81       	ld	r24, Y
    18c8:	99 81       	ldd	r25, Y+1	; 0x01
    18ca:	0e 94 77 16 	call	0x2cee	; 0x2cee <_ZN7TwoWire11requestFromEhh>
    18ce:	88 81       	ld	r24, Y
    18d0:	99 81       	ldd	r25, Y+1	; 0x01
    18d2:	dc 01       	movw	r26, r24
    18d4:	ed 91       	ld	r30, X+
    18d6:	fc 91       	ld	r31, X
    18d8:	02 84       	ldd	r0, Z+10	; 0x0a
    18da:	f3 85       	ldd	r31, Z+11	; 0x0b
    18dc:	e0 2d       	mov	r30, r0
    18de:	09 95       	icall
    18e0:	18 2f       	mov	r17, r24
    18e2:	88 81       	ld	r24, Y
    18e4:	99 81       	ldd	r25, Y+1	; 0x01
    18e6:	dc 01       	movw	r26, r24
    18e8:	ed 91       	ld	r30, X+
    18ea:	fc 91       	ld	r31, X
    18ec:	02 84       	ldd	r0, Z+10	; 0x0a
    18ee:	f3 85       	ldd	r31, Z+11	; 0x0b
    18f0:	e0 2d       	mov	r30, r0
    18f2:	09 95       	icall
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	31 2f       	mov	r19, r17
    18fa:	89 01       	movw	r16, r18
    18fc:	08 2b       	or	r16, r24
    18fe:	19 2b       	or	r17, r25
    1900:	28 c0       	rjmp	.+80     	; 0x1952 <_ZN15Adafruit_BME2806read16Eh+0xc8>
    1902:	8e 85       	ldd	r24, Y+14	; 0x0e
    1904:	8f 3f       	cpi	r24, 0xFF	; 255
    1906:	21 f4       	brne	.+8      	; 0x1910 <_ZN15Adafruit_BME2806read16Eh+0x86>
    1908:	82 e5       	ldi	r24, 0x52	; 82
    190a:	91 e0       	ldi	r25, 0x01	; 1
    190c:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZN8SPIClass16beginTransactionE11SPISettings>
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	8b 85       	ldd	r24, Y+11	; 0x0b
    1914:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    1918:	61 2f       	mov	r22, r17
    191a:	60 68       	ori	r22, 0x80	; 128
    191c:	ce 01       	movw	r24, r28
    191e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN15Adafruit_BME2807spixferEh>
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	ce 01       	movw	r24, r28
    1926:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN15Adafruit_BME2807spixferEh>
    192a:	08 2f       	mov	r16, r24
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	ce 01       	movw	r24, r28
    1930:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN15Adafruit_BME2807spixferEh>
    1934:	20 2f       	mov	r18, r16
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	32 2f       	mov	r19, r18
    193a:	22 27       	eor	r18, r18
    193c:	89 01       	movw	r16, r18
    193e:	08 2b       	or	r16, r24
    1940:	61 e0       	ldi	r22, 0x01	; 1
    1942:	8b 85       	ldd	r24, Y+11	; 0x0b
    1944:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    1948:	8e 85       	ldd	r24, Y+14	; 0x0e
    194a:	8f 3f       	cpi	r24, 0xFF	; 255
    194c:	11 f4       	brne	.+4      	; 0x1952 <_ZN15Adafruit_BME2806read16Eh+0xc8>
    194e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <_ZN8SPIClass14endTransactionEv>
    1952:	c8 01       	movw	r24, r16
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <_ZN15Adafruit_BME2809read16_LEEh>:
    195e:	0e 94 45 0c 	call	0x188a	; 0x188a <_ZN15Adafruit_BME2806read16Eh>
    1962:	98 27       	eor	r25, r24
    1964:	89 27       	eor	r24, r25
    1966:	98 27       	eor	r25, r24
    1968:	08 95       	ret

0000196a <_ZN15Adafruit_BME2806read24Eh>:
    196a:	4f 92       	push	r4
    196c:	5f 92       	push	r5
    196e:	6f 92       	push	r6
    1970:	7f 92       	push	r7
    1972:	8f 92       	push	r8
    1974:	9f 92       	push	r9
    1976:	af 92       	push	r10
    1978:	bf 92       	push	r11
    197a:	cf 92       	push	r12
    197c:	df 92       	push	r13
    197e:	ef 92       	push	r14
    1980:	ff 92       	push	r15
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	ec 01       	movw	r28, r24
    198a:	16 2f       	mov	r17, r22
    198c:	8b 85       	ldd	r24, Y+11	; 0x0b
    198e:	8f 3f       	cpi	r24, 0xFF	; 255
    1990:	09 f0       	breq	.+2      	; 0x1994 <_ZN15Adafruit_BME2806read24Eh+0x2a>
    1992:	51 c0       	rjmp	.+162    	; 0x1a36 <_ZN15Adafruit_BME2806read24Eh+0xcc>
    1994:	6a 81       	ldd	r22, Y+2	; 0x02
    1996:	88 81       	ld	r24, Y
    1998:	99 81       	ldd	r25, Y+1	; 0x01
    199a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN7TwoWire17beginTransmissionEh>
    199e:	88 81       	ld	r24, Y
    19a0:	99 81       	ldd	r25, Y+1	; 0x01
    19a2:	dc 01       	movw	r26, r24
    19a4:	ed 91       	ld	r30, X+
    19a6:	fc 91       	ld	r31, X
    19a8:	01 90       	ld	r0, Z+
    19aa:	f0 81       	ld	r31, Z
    19ac:	e0 2d       	mov	r30, r0
    19ae:	61 2f       	mov	r22, r17
    19b0:	09 95       	icall
    19b2:	88 81       	ld	r24, Y
    19b4:	99 81       	ldd	r25, Y+1	; 0x01
    19b6:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN7TwoWire15endTransmissionEv>
    19ba:	43 e0       	ldi	r20, 0x03	; 3
    19bc:	6a 81       	ldd	r22, Y+2	; 0x02
    19be:	88 81       	ld	r24, Y
    19c0:	99 81       	ldd	r25, Y+1	; 0x01
    19c2:	0e 94 77 16 	call	0x2cee	; 0x2cee <_ZN7TwoWire11requestFromEhh>
    19c6:	88 81       	ld	r24, Y
    19c8:	99 81       	ldd	r25, Y+1	; 0x01
    19ca:	dc 01       	movw	r26, r24
    19cc:	ed 91       	ld	r30, X+
    19ce:	fc 91       	ld	r31, X
    19d0:	02 84       	ldd	r0, Z+10	; 0x0a
    19d2:	f3 85       	ldd	r31, Z+11	; 0x0b
    19d4:	e0 2d       	mov	r30, r0
    19d6:	09 95       	icall
    19d8:	2c 01       	movw	r4, r24
    19da:	99 0f       	add	r25, r25
    19dc:	66 08       	sbc	r6, r6
    19de:	77 08       	sbc	r7, r7
    19e0:	76 2c       	mov	r7, r6
    19e2:	65 2c       	mov	r6, r5
    19e4:	54 2c       	mov	r5, r4
    19e6:	44 24       	eor	r4, r4
    19e8:	88 81       	ld	r24, Y
    19ea:	99 81       	ldd	r25, Y+1	; 0x01
    19ec:	dc 01       	movw	r26, r24
    19ee:	ed 91       	ld	r30, X+
    19f0:	fc 91       	ld	r31, X
    19f2:	02 84       	ldd	r0, Z+10	; 0x0a
    19f4:	f3 85       	ldd	r31, Z+11	; 0x0b
    19f6:	e0 2d       	mov	r30, r0
    19f8:	09 95       	icall
    19fa:	6c 01       	movw	r12, r24
    19fc:	99 0f       	add	r25, r25
    19fe:	ee 08       	sbc	r14, r14
    1a00:	ff 08       	sbc	r15, r15
    1a02:	c4 28       	or	r12, r4
    1a04:	d5 28       	or	r13, r5
    1a06:	e6 28       	or	r14, r6
    1a08:	f7 28       	or	r15, r7
    1a0a:	88 24       	eor	r8, r8
    1a0c:	9c 2c       	mov	r9, r12
    1a0e:	ad 2c       	mov	r10, r13
    1a10:	be 2c       	mov	r11, r14
    1a12:	88 81       	ld	r24, Y
    1a14:	99 81       	ldd	r25, Y+1	; 0x01
    1a16:	dc 01       	movw	r26, r24
    1a18:	ed 91       	ld	r30, X+
    1a1a:	fc 91       	ld	r31, X
    1a1c:	02 84       	ldd	r0, Z+10	; 0x0a
    1a1e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a20:	e0 2d       	mov	r30, r0
    1a22:	09 95       	icall
    1a24:	6c 01       	movw	r12, r24
    1a26:	99 0f       	add	r25, r25
    1a28:	ee 08       	sbc	r14, r14
    1a2a:	ff 08       	sbc	r15, r15
    1a2c:	c8 28       	or	r12, r8
    1a2e:	d9 28       	or	r13, r9
    1a30:	ea 28       	or	r14, r10
    1a32:	fb 28       	or	r15, r11
    1a34:	33 c0       	rjmp	.+102    	; 0x1a9c <_ZN15Adafruit_BME2806read24Eh+0x132>
    1a36:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a38:	8f 3f       	cpi	r24, 0xFF	; 255
    1a3a:	21 f4       	brne	.+8      	; 0x1a44 <_ZN15Adafruit_BME2806read24Eh+0xda>
    1a3c:	82 e5       	ldi	r24, 0x52	; 82
    1a3e:	91 e0       	ldi	r25, 0x01	; 1
    1a40:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZN8SPIClass16beginTransactionE11SPISettings>
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a48:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    1a4c:	61 2f       	mov	r22, r17
    1a4e:	60 68       	ori	r22, 0x80	; 128
    1a50:	ce 01       	movw	r24, r28
    1a52:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN15Adafruit_BME2807spixferEh>
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	ce 01       	movw	r24, r28
    1a5a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN15Adafruit_BME2807spixferEh>
    1a5e:	c8 2e       	mov	r12, r24
    1a60:	d1 2c       	mov	r13, r1
    1a62:	e1 2c       	mov	r14, r1
    1a64:	f1 2c       	mov	r15, r1
    1a66:	fe 2c       	mov	r15, r14
    1a68:	ed 2c       	mov	r14, r13
    1a6a:	dc 2c       	mov	r13, r12
    1a6c:	cc 24       	eor	r12, r12
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	ce 01       	movw	r24, r28
    1a72:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN15Adafruit_BME2807spixferEh>
    1a76:	c8 2a       	or	r12, r24
    1a78:	fe 2c       	mov	r15, r14
    1a7a:	ed 2c       	mov	r14, r13
    1a7c:	dc 2c       	mov	r13, r12
    1a7e:	cc 24       	eor	r12, r12
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	ce 01       	movw	r24, r28
    1a84:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN15Adafruit_BME2807spixferEh>
    1a88:	c8 2a       	or	r12, r24
    1a8a:	61 e0       	ldi	r22, 0x01	; 1
    1a8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a8e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    1a92:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a94:	8f 3f       	cpi	r24, 0xFF	; 255
    1a96:	11 f4       	brne	.+4      	; 0x1a9c <_ZN15Adafruit_BME2806read24Eh+0x132>
    1a98:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <_ZN8SPIClass14endTransactionEv>
    1a9c:	c7 01       	movw	r24, r14
    1a9e:	b6 01       	movw	r22, r12
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	ff 90       	pop	r15
    1aa8:	ef 90       	pop	r14
    1aaa:	df 90       	pop	r13
    1aac:	cf 90       	pop	r12
    1aae:	bf 90       	pop	r11
    1ab0:	af 90       	pop	r10
    1ab2:	9f 90       	pop	r9
    1ab4:	8f 90       	pop	r8
    1ab6:	7f 90       	pop	r7
    1ab8:	6f 90       	pop	r6
    1aba:	5f 90       	pop	r5
    1abc:	4f 90       	pop	r4
    1abe:	08 95       	ret

00001ac0 <_ZN15Adafruit_BME28016readCoefficientsEv>:
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	ec 01       	movw	r28, r24
    1ac8:	68 e8       	ldi	r22, 0x88	; 136
    1aca:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN15Adafruit_BME2809read16_LEEh>
    1ace:	98 8b       	std	Y+16, r25	; 0x10
    1ad0:	8f 87       	std	Y+15, r24	; 0x0f
    1ad2:	6a e8       	ldi	r22, 0x8A	; 138
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN15Adafruit_BME2809read16_LEEh>
    1ada:	9a 8b       	std	Y+18, r25	; 0x12
    1adc:	89 8b       	std	Y+17, r24	; 0x11
    1ade:	6c e8       	ldi	r22, 0x8C	; 140
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN15Adafruit_BME2809read16_LEEh>
    1ae6:	9c 8b       	std	Y+20, r25	; 0x14
    1ae8:	8b 8b       	std	Y+19, r24	; 0x13
    1aea:	6e e8       	ldi	r22, 0x8E	; 142
    1aec:	ce 01       	movw	r24, r28
    1aee:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN15Adafruit_BME2809read16_LEEh>
    1af2:	9e 8b       	std	Y+22, r25	; 0x16
    1af4:	8d 8b       	std	Y+21, r24	; 0x15
    1af6:	60 e9       	ldi	r22, 0x90	; 144
    1af8:	ce 01       	movw	r24, r28
    1afa:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN15Adafruit_BME2809read16_LEEh>
    1afe:	98 8f       	std	Y+24, r25	; 0x18
    1b00:	8f 8b       	std	Y+23, r24	; 0x17
    1b02:	62 e9       	ldi	r22, 0x92	; 146
    1b04:	ce 01       	movw	r24, r28
    1b06:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN15Adafruit_BME2809read16_LEEh>
    1b0a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b0c:	89 8f       	std	Y+25, r24	; 0x19
    1b0e:	64 e9       	ldi	r22, 0x94	; 148
    1b10:	ce 01       	movw	r24, r28
    1b12:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN15Adafruit_BME2809read16_LEEh>
    1b16:	9c 8f       	std	Y+28, r25	; 0x1c
    1b18:	8b 8f       	std	Y+27, r24	; 0x1b
    1b1a:	66 e9       	ldi	r22, 0x96	; 150
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN15Adafruit_BME2809read16_LEEh>
    1b22:	9e 8f       	std	Y+30, r25	; 0x1e
    1b24:	8d 8f       	std	Y+29, r24	; 0x1d
    1b26:	68 e9       	ldi	r22, 0x98	; 152
    1b28:	ce 01       	movw	r24, r28
    1b2a:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN15Adafruit_BME2809read16_LEEh>
    1b2e:	98 a3       	std	Y+32, r25	; 0x20
    1b30:	8f 8f       	std	Y+31, r24	; 0x1f
    1b32:	6a e9       	ldi	r22, 0x9A	; 154
    1b34:	ce 01       	movw	r24, r28
    1b36:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN15Adafruit_BME2809read16_LEEh>
    1b3a:	9a a3       	std	Y+34, r25	; 0x22
    1b3c:	89 a3       	std	Y+33, r24	; 0x21
    1b3e:	6c e9       	ldi	r22, 0x9C	; 156
    1b40:	ce 01       	movw	r24, r28
    1b42:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN15Adafruit_BME2809read16_LEEh>
    1b46:	9c a3       	std	Y+36, r25	; 0x24
    1b48:	8b a3       	std	Y+35, r24	; 0x23
    1b4a:	6e e9       	ldi	r22, 0x9E	; 158
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN15Adafruit_BME2809read16_LEEh>
    1b52:	9e a3       	std	Y+38, r25	; 0x26
    1b54:	8d a3       	std	Y+37, r24	; 0x25
    1b56:	61 ea       	ldi	r22, 0xA1	; 161
    1b58:	ce 01       	movw	r24, r28
    1b5a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN15Adafruit_BME2805read8Eh>
    1b5e:	8f a3       	std	Y+39, r24	; 0x27
    1b60:	61 ee       	ldi	r22, 0xE1	; 225
    1b62:	ce 01       	movw	r24, r28
    1b64:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN15Adafruit_BME2809read16_LEEh>
    1b68:	99 a7       	std	Y+41, r25	; 0x29
    1b6a:	88 a7       	std	Y+40, r24	; 0x28
    1b6c:	63 ee       	ldi	r22, 0xE3	; 227
    1b6e:	ce 01       	movw	r24, r28
    1b70:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN15Adafruit_BME2805read8Eh>
    1b74:	8a a7       	std	Y+42, r24	; 0x2a
    1b76:	64 ee       	ldi	r22, 0xE4	; 228
    1b78:	ce 01       	movw	r24, r28
    1b7a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN15Adafruit_BME2805read8Eh>
    1b7e:	18 2f       	mov	r17, r24
    1b80:	65 ee       	ldi	r22, 0xE5	; 229
    1b82:	ce 01       	movw	r24, r28
    1b84:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN15Adafruit_BME2805read8Eh>
    1b88:	90 e1       	ldi	r25, 0x10	; 16
    1b8a:	19 9f       	mul	r17, r25
    1b8c:	90 01       	movw	r18, r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	8f 70       	andi	r24, 0x0F	; 15
    1b92:	28 2b       	or	r18, r24
    1b94:	3c a7       	std	Y+44, r19	; 0x2c
    1b96:	2b a7       	std	Y+43, r18	; 0x2b
    1b98:	66 ee       	ldi	r22, 0xE6	; 230
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN15Adafruit_BME2805read8Eh>
    1ba0:	18 2f       	mov	r17, r24
    1ba2:	65 ee       	ldi	r22, 0xE5	; 229
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN15Adafruit_BME2805read8Eh>
    1baa:	90 e1       	ldi	r25, 0x10	; 16
    1bac:	19 9f       	mul	r17, r25
    1bae:	90 01       	movw	r18, r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	44 e0       	ldi	r20, 0x04	; 4
    1bb6:	95 95       	asr	r25
    1bb8:	87 95       	ror	r24
    1bba:	4a 95       	dec	r20
    1bbc:	e1 f7       	brne	.-8      	; 0x1bb6 <_ZN15Adafruit_BME28016readCoefficientsEv+0xf6>
    1bbe:	82 2b       	or	r24, r18
    1bc0:	93 2b       	or	r25, r19
    1bc2:	9e a7       	std	Y+46, r25	; 0x2e
    1bc4:	8d a7       	std	Y+45, r24	; 0x2d
    1bc6:	67 ee       	ldi	r22, 0xE7	; 231
    1bc8:	ce 01       	movw	r24, r28
    1bca:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN15Adafruit_BME2805read8Eh>
    1bce:	8f a7       	std	Y+47, r24	; 0x2f
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	08 95       	ret

00001bd8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    1bd8:	63 ef       	ldi	r22, 0xF3	; 243
    1bda:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN15Adafruit_BME2805read8Eh>
    1bde:	81 70       	andi	r24, 0x01	; 1
    1be0:	08 95       	ret

00001be2 <_ZN15Adafruit_BME2804initEv>:
    1be2:	cf 92       	push	r12
    1be4:	ef 92       	push	r14
    1be6:	0f 93       	push	r16
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	ec 01       	movw	r28, r24
    1bee:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bf0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf2:	29 f4       	brne	.+10     	; 0x1bfe <_ZN15Adafruit_BME2804initEv+0x1c>
    1bf4:	88 81       	ld	r24, Y
    1bf6:	99 81       	ldd	r25, Y+1	; 0x01
    1bf8:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <_ZN7TwoWire5beginEv>
    1bfc:	18 c0       	rjmp	.+48     	; 0x1c2e <_ZN15Adafruit_BME2804initEv+0x4c>
    1bfe:	61 e0       	ldi	r22, 0x01	; 1
    1c00:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    1c04:	61 e0       	ldi	r22, 0x01	; 1
    1c06:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c08:	0e 94 2e 0a 	call	0x145c	; 0x145c <pinMode>
    1c0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c0e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c10:	19 f4       	brne	.+6      	; 0x1c18 <_ZN15Adafruit_BME2804initEv+0x36>
    1c12:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN8SPIClass5beginEv>
    1c16:	0b c0       	rjmp	.+22     	; 0x1c2e <_ZN15Adafruit_BME2804initEv+0x4c>
    1c18:	61 e0       	ldi	r22, 0x01	; 1
    1c1a:	0e 94 2e 0a 	call	0x145c	; 0x145c <pinMode>
    1c1e:	61 e0       	ldi	r22, 0x01	; 1
    1c20:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c22:	0e 94 2e 0a 	call	0x145c	; 0x145c <pinMode>
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	0e 94 2e 0a 	call	0x145c	; 0x145c <pinMode>
    1c2e:	60 ed       	ldi	r22, 0xD0	; 208
    1c30:	ce 01       	movw	r24, r28
    1c32:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN15Adafruit_BME2805read8Eh>
    1c36:	80 36       	cpi	r24, 0x60	; 96
    1c38:	49 f5       	brne	.+82     	; 0x1c8c <_ZN15Adafruit_BME2804initEv+0xaa>
    1c3a:	46 eb       	ldi	r20, 0xB6	; 182
    1c3c:	60 ee       	ldi	r22, 0xE0	; 224
    1c3e:	ce 01       	movw	r24, r28
    1c40:	0e 94 3b 0b 	call	0x1676	; 0x1676 <_ZN15Adafruit_BME2806write8Ehh>
    1c44:	6c e2       	ldi	r22, 0x2C	; 44
    1c46:	71 e0       	ldi	r23, 0x01	; 1
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <delay>
    1c50:	ce 01       	movw	r24, r28
    1c52:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
    1c56:	88 23       	and	r24, r24
    1c58:	29 f0       	breq	.+10     	; 0x1c64 <_ZN15Adafruit_BME2804initEv+0x82>
    1c5a:	64 e6       	ldi	r22, 0x64	; 100
    1c5c:	70 e0       	ldi	r23, 0x00	; 0
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	f4 cf       	rjmp	.-24     	; 0x1c4c <_ZN15Adafruit_BME2804initEv+0x6a>
    1c64:	ce 01       	movw	r24, r28
    1c66:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <_ZN15Adafruit_BME28016readCoefficientsEv>
    1c6a:	c1 2c       	mov	r12, r1
    1c6c:	e1 2c       	mov	r14, r1
    1c6e:	05 e0       	ldi	r16, 0x05	; 5
    1c70:	25 e0       	ldi	r18, 0x05	; 5
    1c72:	45 e0       	ldi	r20, 0x05	; 5
    1c74:	63 e0       	ldi	r22, 0x03	; 3
    1c76:	ce 01       	movw	r24, r28
    1c78:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    1c7c:	64 e6       	ldi	r22, 0x64	; 100
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	0e 94 71 09 	call	0x12e2	; 0x12e2 <delay>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	01 c0       	rjmp	.+2      	; 0x1c8e <_ZN15Adafruit_BME2804initEv+0xac>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	0f 91       	pop	r16
    1c94:	ef 90       	pop	r14
    1c96:	cf 90       	pop	r12
    1c98:	08 95       	ret

00001c9a <_ZN15Adafruit_BME2805beginEv>:
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    _i2caddr = BME280_ADDRESS;
    1c9a:	26 e7       	ldi	r18, 0x76	; 118
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	22 83       	std	Z+2, r18	; 0x02
	_wire = &Wire;
    1ca0:	26 e8       	ldi	r18, 0x86	; 134
    1ca2:	33 e0       	ldi	r19, 0x03	; 3
    1ca4:	31 83       	std	Z+1, r19	; 0x01
    1ca6:	20 83       	st	Z, r18
	return init();
    1ca8:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <_ZN15Adafruit_BME2804initEv>

00001cac <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
    1cac:	8f 92       	push	r8
    1cae:	9f 92       	push	r9
    1cb0:	af 92       	push	r10
    1cb2:	bf 92       	push	r11
    1cb4:	cf 92       	push	r12
    1cb6:	df 92       	push	r13
    1cb8:	ef 92       	push	r14
    1cba:	ff 92       	push	r15
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	ec 01       	movw	r28, r24
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    1cc6:	6a ef       	ldi	r22, 0xFA	; 250
    1cc8:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
    1ccc:	61 15       	cp	r22, r1
    1cce:	71 05       	cpc	r23, r1
    1cd0:	20 e8       	ldi	r18, 0x80	; 128
    1cd2:	82 07       	cpc	r24, r18
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <_ZN15Adafruit_BME28015readTemperatureEv+0x2e>
    1cd8:	6f c0       	rjmp	.+222    	; 0x1db8 <_ZN15Adafruit_BME28015readTemperatureEv+0x10c>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
    1cda:	0f 85       	ldd	r16, Y+15	; 0x0f
    1cdc:	18 89       	ldd	r17, Y+16	; 0x10
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
    1ce2:	c7 2e       	mov	r12, r23
    1ce4:	d8 2e       	mov	r13, r24
    1ce6:	e9 2e       	mov	r14, r25
    1ce8:	ff 24       	eor	r15, r15
    1cea:	e7 fc       	sbrc	r14, 7
    1cec:	fa 94       	dec	r15
    1cee:	c0 1a       	sub	r12, r16
    1cf0:	d1 0a       	sbc	r13, r17
    1cf2:	e2 0a       	sbc	r14, r18
    1cf4:	f3 0a       	sbc	r15, r19
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	57 e0       	ldi	r21, 0x07	; 7
    1cfc:	b5 95       	asr	r27
    1cfe:	a7 95       	ror	r26
    1d00:	97 95       	ror	r25
    1d02:	87 95       	ror	r24
    1d04:	5a 95       	dec	r21
    1d06:	d1 f7       	brne	.-12     	; 0x1cfc <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
    1d08:	00 0f       	add	r16, r16
    1d0a:	11 1f       	adc	r17, r17
    1d0c:	22 1f       	adc	r18, r18
    1d0e:	33 1f       	adc	r19, r19
    1d10:	4c 01       	movw	r8, r24
    1d12:	5d 01       	movw	r10, r26
    1d14:	80 1a       	sub	r8, r16
    1d16:	91 0a       	sbc	r9, r17
    1d18:	a2 0a       	sbc	r10, r18
    1d1a:	b3 0a       	sbc	r11, r19
    1d1c:	a5 01       	movw	r20, r10
    1d1e:	94 01       	movw	r18, r8
    1d20:	a9 89       	ldd	r26, Y+17	; 0x11
    1d22:	ba 89       	ldd	r27, Y+18	; 0x12
    1d24:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <__mulshisi3>
    1d28:	4b 01       	movw	r8, r22
    1d2a:	5c 01       	movw	r10, r24
    1d2c:	7b e0       	ldi	r23, 0x0B	; 11
    1d2e:	b5 94       	asr	r11
    1d30:	a7 94       	ror	r10
    1d32:	97 94       	ror	r9
    1d34:	87 94       	ror	r8
    1d36:	7a 95       	dec	r23
    1d38:	d1 f7       	brne	.-12     	; 0x1d2e <_ZN15Adafruit_BME28015readTemperatureEv+0x82>
    1d3a:	a7 01       	movw	r20, r14
    1d3c:	96 01       	movw	r18, r12
    1d3e:	c7 01       	movw	r24, r14
    1d40:	b6 01       	movw	r22, r12
    1d42:	0e 94 3d 19 	call	0x327a	; 0x327a <__mulsi3>
    1d46:	9b 01       	movw	r18, r22
    1d48:	ac 01       	movw	r20, r24
    1d4a:	ec e0       	ldi	r30, 0x0C	; 12
    1d4c:	55 95       	asr	r21
    1d4e:	47 95       	ror	r20
    1d50:	37 95       	ror	r19
    1d52:	27 95       	ror	r18
    1d54:	ea 95       	dec	r30
    1d56:	d1 f7       	brne	.-12     	; 0x1d4c <_ZN15Adafruit_BME28015readTemperatureEv+0xa0>
    1d58:	ab 89       	ldd	r26, Y+19	; 0x13
    1d5a:	bc 89       	ldd	r27, Y+20	; 0x14
    1d5c:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <__mulshisi3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	fe e0       	ldi	r31, 0x0E	; 14
    1d66:	b5 95       	asr	r27
    1d68:	a7 95       	ror	r26
    1d6a:	97 95       	ror	r25
    1d6c:	87 95       	ror	r24
    1d6e:	fa 95       	dec	r31
    1d70:	d1 f7       	brne	.-12     	; 0x1d66 <_ZN15Adafruit_BME28015readTemperatureEv+0xba>
    1d72:	a5 01       	movw	r20, r10
    1d74:	94 01       	movw	r18, r8
    1d76:	28 0f       	add	r18, r24
    1d78:	39 1f       	adc	r19, r25
    1d7a:	4a 1f       	adc	r20, r26
    1d7c:	5b 1f       	adc	r21, r27
    1d7e:	2f 83       	std	Y+7, r18	; 0x07
    1d80:	38 87       	std	Y+8, r19	; 0x08
    1d82:	49 87       	std	Y+9, r20	; 0x09
    1d84:	5a 87       	std	Y+10, r21	; 0x0a

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
    1d86:	a5 e0       	ldi	r26, 0x05	; 5
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	0e 94 6f 19 	call	0x32de	; 0x32de <__muluhisi3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	80 58       	subi	r24, 0x80	; 128
    1d94:	9f 4f       	sbci	r25, 0xFF	; 255
    1d96:	af 4f       	sbci	r26, 0xFF	; 255
    1d98:	bf 4f       	sbci	r27, 0xFF	; 255
    1d9a:	69 2f       	mov	r22, r25
    1d9c:	7a 2f       	mov	r23, r26
    1d9e:	8b 2f       	mov	r24, r27
    1da0:	99 27       	eor	r25, r25
    1da2:	87 fd       	sbrc	r24, 7
    1da4:	9a 95       	dec	r25
    1da6:	0e 94 35 04 	call	0x86a	; 0x86a <__floatsisf>
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	48 ec       	ldi	r20, 0xC8	; 200
    1db0:	52 e4       	ldi	r21, 0x42	; 66
    1db2:	0e 94 c1 03 	call	0x782	; 0x782 <__divsf3>
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <_ZN15Adafruit_BME28015readTemperatureEv+0x114>
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	80 ec       	ldi	r24, 0xC0	; 192
    1dbe:	9f e7       	ldi	r25, 0x7F	; 127

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	ff 90       	pop	r15
    1dca:	ef 90       	pop	r14
    1dcc:	df 90       	pop	r13
    1dce:	cf 90       	pop	r12
    1dd0:	bf 90       	pop	r11
    1dd2:	af 90       	pop	r10
    1dd4:	9f 90       	pop	r9
    1dd6:	8f 90       	pop	r8
    1dd8:	08 95       	ret

00001dda <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
    1dda:	2f 92       	push	r2
    1ddc:	3f 92       	push	r3
    1dde:	4f 92       	push	r4
    1de0:	5f 92       	push	r5
    1de2:	6f 92       	push	r6
    1de4:	7f 92       	push	r7
    1de6:	8f 92       	push	r8
    1de8:	9f 92       	push	r9
    1dea:	af 92       	push	r10
    1dec:	bf 92       	push	r11
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	6a 97       	sbiw	r28, 0x1a	; 26
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e10:	89 8f       	std	Y+25, r24	; 0x19
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
    1e12:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    1e16:	67 ef       	ldi	r22, 0xF7	; 247
    1e18:	89 8d       	ldd	r24, Y+25	; 0x19
    1e1a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e1c:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN15Adafruit_BME2806read24Eh>
    1e20:	6d 87       	std	Y+13, r22	; 0x0d
    1e22:	7e 87       	std	Y+14, r23	; 0x0e
    1e24:	8f 87       	std	Y+15, r24	; 0x0f
    1e26:	98 8b       	std	Y+16, r25	; 0x10
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
    1e28:	61 15       	cp	r22, r1
    1e2a:	71 05       	cpc	r23, r1
    1e2c:	80 48       	sbci	r24, 0x80	; 128
    1e2e:	91 05       	cpc	r25, r1
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <_ZN15Adafruit_BME28012readPressureEv+0x5a>
    1e32:	b3 c1       	rjmp	.+870    	; 0x219a <_ZN15Adafruit_BME28012readPressureEv+0x3c0>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    1e34:	e9 8d       	ldd	r30, Y+25	; 0x19
    1e36:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1e38:	87 81       	ldd	r24, Z+7	; 0x07
    1e3a:	90 85       	ldd	r25, Z+8	; 0x08
    1e3c:	a1 85       	ldd	r26, Z+9	; 0x09
    1e3e:	b2 85       	ldd	r27, Z+10	; 0x0a
    1e40:	6c 01       	movw	r12, r24
    1e42:	7d 01       	movw	r14, r26
    1e44:	ff 0c       	add	r15, r15
    1e46:	cc 08       	sbc	r12, r12
    1e48:	dc 2c       	mov	r13, r12
    1e4a:	76 01       	movw	r14, r12
    1e4c:	9c 01       	movw	r18, r24
    1e4e:	ad 01       	movw	r20, r26
    1e50:	6c 2d       	mov	r22, r12
    1e52:	7c 2d       	mov	r23, r12
    1e54:	8c 2d       	mov	r24, r12
    1e56:	9c 2d       	mov	r25, r12
    1e58:	34 5f       	subi	r19, 0xF4	; 244
    1e5a:	41 40       	sbci	r20, 0x01	; 1
    1e5c:	51 09       	sbc	r21, r1
    1e5e:	61 09       	sbc	r22, r1
    1e60:	71 09       	sbc	r23, r1
    1e62:	81 09       	sbc	r24, r1
    1e64:	91 09       	sbc	r25, r1
    1e66:	29 83       	std	Y+1, r18	; 0x01
    1e68:	3a 83       	std	Y+2, r19	; 0x02
    1e6a:	4b 83       	std	Y+3, r20	; 0x03
    1e6c:	5c 83       	std	Y+4, r21	; 0x04
    1e6e:	6d 83       	std	Y+5, r22	; 0x05
    1e70:	7e 83       	std	Y+6, r23	; 0x06
    1e72:	8f 83       	std	Y+7, r24	; 0x07
    1e74:	98 87       	std	Y+8, r25	; 0x08
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    1e76:	59 01       	movw	r10, r18
    1e78:	6a 01       	movw	r12, r20
    1e7a:	7b 01       	movw	r14, r22
    1e7c:	8c 01       	movw	r16, r24
    1e7e:	0e 94 82 19 	call	0x3304	; 0x3304 <__muldi3>
    1e82:	29 87       	std	Y+9, r18	; 0x09
    1e84:	3a 87       	std	Y+10, r19	; 0x0a
    1e86:	4b 87       	std	Y+11, r20	; 0x0b
    1e88:	5c 87       	std	Y+12, r21	; 0x0c
    1e8a:	6d 8b       	std	Y+21, r22	; 0x15
    1e8c:	7e 8b       	std	Y+22, r23	; 0x16
    1e8e:	8f 8b       	std	Y+23, r24	; 0x17
    1e90:	98 8f       	std	Y+24, r25	; 0x18
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    1e92:	a9 8d       	ldd	r26, Y+25	; 0x19
    1e94:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1e96:	58 96       	adiw	r26, 0x18	; 24
    1e98:	3c 91       	ld	r19, X
    1e9a:	58 97       	sbiw	r26, 0x18	; 24
    1e9c:	57 96       	adiw	r26, 0x17	; 23
    1e9e:	2c 91       	ld	r18, X
    1ea0:	93 2f       	mov	r25, r19
    1ea2:	99 0f       	add	r25, r25
    1ea4:	99 0b       	sbc	r25, r25
    1ea6:	49 2f       	mov	r20, r25
    1ea8:	59 2f       	mov	r21, r25
    1eaa:	69 2f       	mov	r22, r25
    1eac:	79 2f       	mov	r23, r25
    1eae:	89 2f       	mov	r24, r25
    1eb0:	0e 94 82 19 	call	0x3304	; 0x3304 <__muldi3>
    1eb4:	0c e0       	ldi	r16, 0x0C	; 12
    1eb6:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__ashldi3>
    1eba:	72 2e       	mov	r7, r18
    1ebc:	83 2e       	mov	r8, r19
    1ebe:	94 2e       	mov	r9, r20
    1ec0:	25 2e       	mov	r2, r21
    1ec2:	36 2e       	mov	r3, r22
    1ec4:	67 2e       	mov	r6, r23
    1ec6:	58 2e       	mov	r5, r24
    1ec8:	49 2e       	mov	r4, r25
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
    1eca:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ecc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ece:	32 8d       	ldd	r19, Z+26	; 0x1a
    1ed0:	21 8d       	ldd	r18, Z+25	; 0x19
    1ed2:	93 2f       	mov	r25, r19
    1ed4:	99 0f       	add	r25, r25
    1ed6:	99 0b       	sbc	r25, r25
    1ed8:	a9 84       	ldd	r10, Y+9	; 0x09
    1eda:	ba 84       	ldd	r11, Y+10	; 0x0a
    1edc:	cb 84       	ldd	r12, Y+11	; 0x0b
    1ede:	dc 84       	ldd	r13, Y+12	; 0x0c
    1ee0:	ed 88       	ldd	r14, Y+21	; 0x15
    1ee2:	fe 88       	ldd	r15, Y+22	; 0x16
    1ee4:	0f 89       	ldd	r16, Y+23	; 0x17
    1ee6:	18 8d       	ldd	r17, Y+24	; 0x18
    1ee8:	49 2f       	mov	r20, r25
    1eea:	59 2f       	mov	r21, r25
    1eec:	69 2f       	mov	r22, r25
    1eee:	79 2f       	mov	r23, r25
    1ef0:	89 2f       	mov	r24, r25
    1ef2:	0e 94 82 19 	call	0x3304	; 0x3304 <__muldi3>
    1ef6:	08 e0       	ldi	r16, 0x08	; 8
    1ef8:	0e 94 cb 1a 	call	0x3596	; 0x3596 <__ashrdi3>
    1efc:	a7 2c       	mov	r10, r7
    1efe:	b8 2c       	mov	r11, r8
    1f00:	c9 2c       	mov	r12, r9
    1f02:	d2 2c       	mov	r13, r2
    1f04:	e3 2c       	mov	r14, r3
    1f06:	f6 2c       	mov	r15, r6
    1f08:	05 2d       	mov	r16, r5
    1f0a:	14 2d       	mov	r17, r4
    1f0c:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__adddi3>
    1f10:	70 58       	subi	r23, 0x80	; 128
    1f12:	8f 4f       	sbci	r24, 0xFF	; 255
    1f14:	9f 4f       	sbci	r25, 0xFF	; 255
    1f16:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f18:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f1a:	55 96       	adiw	r26, 0x15	; 21
    1f1c:	2d 90       	ld	r2, X+
    1f1e:	3c 90       	ld	r3, X
    1f20:	56 97       	sbiw	r26, 0x16	; 22
    1f22:	51 01       	movw	r10, r2
    1f24:	c1 2c       	mov	r12, r1
    1f26:	d1 2c       	mov	r13, r1
    1f28:	e1 2c       	mov	r14, r1
    1f2a:	f1 2c       	mov	r15, r1
    1f2c:	00 e0       	ldi	r16, 0x00	; 0
    1f2e:	10 e0       	ldi	r17, 0x00	; 0
    1f30:	0e 94 82 19 	call	0x3304	; 0x3304 <__muldi3>
    1f34:	01 e2       	ldi	r16, 0x21	; 33
    1f36:	0e 94 cb 1a 	call	0x3596	; 0x3596 <__ashrdi3>
    1f3a:	32 2e       	mov	r3, r18
    1f3c:	23 2e       	mov	r2, r19
    1f3e:	49 8b       	std	Y+17, r20	; 0x11
    1f40:	5a 8b       	std	Y+18, r21	; 0x12
    1f42:	6b 8b       	std	Y+19, r22	; 0x13
    1f44:	47 2e       	mov	r4, r23
    1f46:	58 2e       	mov	r5, r24
    1f48:	9c 8b       	std	Y+20, r25	; 0x14

    if (var1 == 0) {
    1f4a:	a0 e0       	ldi	r26, 0x00	; 0
    1f4c:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <__cmpdi2_s8>
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <_ZN15Adafruit_BME28012readPressureEv+0x17a>
    1f52:	28 c1       	rjmp	.+592    	; 0x21a4 <_ZN15Adafruit_BME28012readPressureEv+0x3ca>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    1f54:	e9 8d       	ldd	r30, Y+25	; 0x19
    1f56:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1f58:	30 a1       	ldd	r19, Z+32	; 0x20
    1f5a:	27 8d       	ldd	r18, Z+31	; 0x1f
    1f5c:	93 2f       	mov	r25, r19
    1f5e:	99 0f       	add	r25, r25
    1f60:	99 0b       	sbc	r25, r25
    1f62:	a9 84       	ldd	r10, Y+9	; 0x09
    1f64:	ba 84       	ldd	r11, Y+10	; 0x0a
    1f66:	cb 84       	ldd	r12, Y+11	; 0x0b
    1f68:	dc 84       	ldd	r13, Y+12	; 0x0c
    1f6a:	ed 88       	ldd	r14, Y+21	; 0x15
    1f6c:	fe 88       	ldd	r15, Y+22	; 0x16
    1f6e:	0f 89       	ldd	r16, Y+23	; 0x17
    1f70:	18 8d       	ldd	r17, Y+24	; 0x18
    1f72:	49 2f       	mov	r20, r25
    1f74:	59 2f       	mov	r21, r25
    1f76:	69 2f       	mov	r22, r25
    1f78:	79 2f       	mov	r23, r25
    1f7a:	89 2f       	mov	r24, r25
    1f7c:	0e 94 82 19 	call	0x3304	; 0x3304 <__muldi3>
    1f80:	29 87       	std	Y+9, r18	; 0x09
    1f82:	3a 87       	std	Y+10, r19	; 0x0a
    1f84:	4b 87       	std	Y+11, r20	; 0x0b
    1f86:	75 2e       	mov	r7, r21
    1f88:	4b 01       	movw	r8, r22
    1f8a:	8c 87       	std	Y+12, r24	; 0x0c
    1f8c:	69 2e       	mov	r6, r25
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    1f8e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f90:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f92:	5e 96       	adiw	r26, 0x1e	; 30
    1f94:	3c 91       	ld	r19, X
    1f96:	5e 97       	sbiw	r26, 0x1e	; 30
    1f98:	5d 96       	adiw	r26, 0x1d	; 29
    1f9a:	2c 91       	ld	r18, X
    1f9c:	93 2f       	mov	r25, r19
    1f9e:	99 0f       	add	r25, r25
    1fa0:	99 0b       	sbc	r25, r25
    1fa2:	a9 80       	ldd	r10, Y+1	; 0x01
    1fa4:	ba 80       	ldd	r11, Y+2	; 0x02
    1fa6:	cb 80       	ldd	r12, Y+3	; 0x03
    1fa8:	dc 80       	ldd	r13, Y+4	; 0x04
    1faa:	ed 80       	ldd	r14, Y+5	; 0x05
    1fac:	fe 80       	ldd	r15, Y+6	; 0x06
    1fae:	0f 81       	ldd	r16, Y+7	; 0x07
    1fb0:	18 85       	ldd	r17, Y+8	; 0x08
    1fb2:	49 2f       	mov	r20, r25
    1fb4:	59 2f       	mov	r21, r25
    1fb6:	69 2f       	mov	r22, r25
    1fb8:	79 2f       	mov	r23, r25
    1fba:	89 2f       	mov	r24, r25
    1fbc:	0e 94 82 19 	call	0x3304	; 0x3304 <__muldi3>
    1fc0:	01 e1       	ldi	r16, 0x11	; 17
    1fc2:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__ashldi3>
    1fc6:	a9 84       	ldd	r10, Y+9	; 0x09
    1fc8:	ba 84       	ldd	r11, Y+10	; 0x0a
    1fca:	cb 84       	ldd	r12, Y+11	; 0x0b
    1fcc:	d7 2c       	mov	r13, r7
    1fce:	74 01       	movw	r14, r8
    1fd0:	0c 85       	ldd	r16, Y+12	; 0x0c
    1fd2:	16 2d       	mov	r17, r6
    1fd4:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__adddi3>
    1fd8:	59 01       	movw	r10, r18
    1fda:	6a 01       	movw	r12, r20
    1fdc:	7b 01       	movw	r14, r22
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	19 2f       	mov	r17, r25

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    1fe2:	4d 85       	ldd	r20, Y+13	; 0x0d
    1fe4:	5e 85       	ldd	r21, Y+14	; 0x0e
    1fe6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fe8:	78 89       	ldd	r23, Y+16	; 0x10
    1fea:	84 e0       	ldi	r24, 0x04	; 4
    1fec:	75 95       	asr	r23
    1fee:	67 95       	ror	r22
    1ff0:	57 95       	ror	r21
    1ff2:	47 95       	ror	r20
    1ff4:	8a 95       	dec	r24
    1ff6:	d1 f7       	brne	.-12     	; 0x1fec <_ZN15Adafruit_BME28012readPressureEv+0x212>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	a0 e1       	ldi	r26, 0x10	; 16
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	84 1b       	sub	r24, r20
    2002:	95 0b       	sbc	r25, r21
    2004:	a6 0b       	sbc	r26, r22
    2006:	b7 0b       	sbc	r27, r23
    2008:	3c 01       	movw	r6, r24
    200a:	4d 01       	movw	r8, r26
    200c:	99 0c       	add	r9, r9
    200e:	66 08       	sbc	r6, r6
    2010:	76 2c       	mov	r7, r6
    2012:	43 01       	movw	r8, r6
    2014:	9c 01       	movw	r18, r24
    2016:	ad 01       	movw	r20, r26
    2018:	66 2d       	mov	r22, r6
    201a:	76 2d       	mov	r23, r6
    201c:	86 2d       	mov	r24, r6
    201e:	96 2d       	mov	r25, r6
    2020:	0f e1       	ldi	r16, 0x1F	; 31
    2022:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__ashldi3>
    2026:	49 01       	movw	r8, r18
    2028:	3a 01       	movw	r6, r20
    202a:	b6 2f       	mov	r27, r22
    202c:	a7 2f       	mov	r26, r23
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	9b 83       	std	Y+3, r25	; 0x03
    2032:	e9 8d       	ldd	r30, Y+25	; 0x19
    2034:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2036:	34 8d       	ldd	r19, Z+28	; 0x1c
    2038:	23 8d       	ldd	r18, Z+27	; 0x1b
    203a:	93 2f       	mov	r25, r19
    203c:	99 0f       	add	r25, r25
    203e:	99 0b       	sbc	r25, r25
    2040:	49 2f       	mov	r20, r25
    2042:	59 2f       	mov	r21, r25
    2044:	69 2f       	mov	r22, r25
    2046:	79 2f       	mov	r23, r25
    2048:	89 2f       	mov	r24, r25
    204a:	03 e2       	ldi	r16, 0x23	; 35
    204c:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__ashldi3>
    2050:	09 81       	ldd	r16, Y+1	; 0x01
    2052:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__adddi3>
    2056:	59 01       	movw	r10, r18
    2058:	6a 01       	movw	r12, r20
    205a:	7b 01       	movw	r14, r22
    205c:	8c 01       	movw	r16, r24
    205e:	94 01       	movw	r18, r8
    2060:	a3 01       	movw	r20, r6
    2062:	6b 2f       	mov	r22, r27
    2064:	7a 2f       	mov	r23, r26
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	9b 81       	ldd	r25, Y+3	; 0x03
    206a:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__subdi3>
    206e:	e5 e3       	ldi	r30, 0x35	; 53
    2070:	ae 2e       	mov	r10, r30
    2072:	fc e0       	ldi	r31, 0x0C	; 12
    2074:	bf 2e       	mov	r11, r31
    2076:	c1 2c       	mov	r12, r1
    2078:	d1 2c       	mov	r13, r1
    207a:	e1 2c       	mov	r14, r1
    207c:	f1 2c       	mov	r15, r1
    207e:	00 e0       	ldi	r16, 0x00	; 0
    2080:	10 e0       	ldi	r17, 0x00	; 0
    2082:	0e 94 82 19 	call	0x3304	; 0x3304 <__muldi3>
    2086:	a3 2c       	mov	r10, r3
    2088:	b2 2c       	mov	r11, r2
    208a:	c9 88       	ldd	r12, Y+17	; 0x11
    208c:	da 88       	ldd	r13, Y+18	; 0x12
    208e:	eb 88       	ldd	r14, Y+19	; 0x13
    2090:	f4 2c       	mov	r15, r4
    2092:	05 2d       	mov	r16, r5
    2094:	1c 89       	ldd	r17, Y+20	; 0x14
    2096:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__divdi3>
    209a:	29 83       	std	Y+1, r18	; 0x01
    209c:	3a 83       	std	Y+2, r19	; 0x02
    209e:	4b 83       	std	Y+3, r20	; 0x03
    20a0:	5c 83       	std	Y+4, r21	; 0x04
    20a2:	6d 83       	std	Y+5, r22	; 0x05
    20a4:	7e 83       	std	Y+6, r23	; 0x06
    20a6:	8f 83       	std	Y+7, r24	; 0x07
    20a8:	98 87       	std	Y+8, r25	; 0x08
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    20aa:	0d e0       	ldi	r16, 0x0D	; 13
    20ac:	0e 94 cb 1a 	call	0x3596	; 0x3596 <__ashrdi3>
    20b0:	92 2e       	mov	r9, r18
    20b2:	83 2e       	mov	r8, r19
    20b4:	74 2e       	mov	r7, r20
    20b6:	65 2e       	mov	r6, r21
    20b8:	56 2e       	mov	r5, r22
    20ba:	47 2e       	mov	r4, r23
    20bc:	38 2e       	mov	r3, r24
    20be:	29 2e       	mov	r2, r25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    20c0:	a9 8d       	ldd	r26, Y+25	; 0x19
    20c2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    20c4:	96 96       	adiw	r26, 0x26	; 38
    20c6:	3c 91       	ld	r19, X
    20c8:	96 97       	sbiw	r26, 0x26	; 38
    20ca:	95 96       	adiw	r26, 0x25	; 37
    20cc:	2c 91       	ld	r18, X
    20ce:	93 2f       	mov	r25, r19
    20d0:	99 0f       	add	r25, r25
    20d2:	99 0b       	sbc	r25, r25
    20d4:	a9 2c       	mov	r10, r9
    20d6:	b8 2c       	mov	r11, r8
    20d8:	c7 2c       	mov	r12, r7
    20da:	d6 2c       	mov	r13, r6
    20dc:	e5 2c       	mov	r14, r5
    20de:	f4 2c       	mov	r15, r4
    20e0:	03 2d       	mov	r16, r3
    20e2:	12 2d       	mov	r17, r2
    20e4:	49 2f       	mov	r20, r25
    20e6:	59 2f       	mov	r21, r25
    20e8:	69 2f       	mov	r22, r25
    20ea:	79 2f       	mov	r23, r25
    20ec:	89 2f       	mov	r24, r25
    20ee:	0e 94 82 19 	call	0x3304	; 0x3304 <__muldi3>
    20f2:	0e 94 82 19 	call	0x3304	; 0x3304 <__muldi3>
    20f6:	09 e1       	ldi	r16, 0x19	; 25
    20f8:	0e 94 cb 1a 	call	0x3596	; 0x3596 <__ashrdi3>
    20fc:	a9 80       	ldd	r10, Y+1	; 0x01
    20fe:	ba 80       	ldd	r11, Y+2	; 0x02
    2100:	cb 80       	ldd	r12, Y+3	; 0x03
    2102:	dc 80       	ldd	r13, Y+4	; 0x04
    2104:	ed 80       	ldd	r14, Y+5	; 0x05
    2106:	fe 80       	ldd	r15, Y+6	; 0x06
    2108:	0f 81       	ldd	r16, Y+7	; 0x07
    210a:	18 85       	ldd	r17, Y+8	; 0x08
    210c:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__adddi3>
    2110:	19 01       	movw	r2, r18
    2112:	2a 01       	movw	r4, r20
    2114:	3b 01       	movw	r6, r22
    2116:	4c 01       	movw	r8, r24
    2118:	e9 8d       	ldd	r30, Y+25	; 0x19
    211a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    211c:	34 a1       	ldd	r19, Z+36	; 0x24
    211e:	23 a1       	ldd	r18, Z+35	; 0x23
    2120:	93 2f       	mov	r25, r19
    2122:	99 0f       	add	r25, r25
    2124:	99 0b       	sbc	r25, r25
    2126:	49 2f       	mov	r20, r25
    2128:	59 2f       	mov	r21, r25
    212a:	69 2f       	mov	r22, r25
    212c:	79 2f       	mov	r23, r25
    212e:	89 2f       	mov	r24, r25
    2130:	0e 94 82 19 	call	0x3304	; 0x3304 <__muldi3>
    2134:	03 e1       	ldi	r16, 0x13	; 19
    2136:	0e 94 cb 1a 	call	0x3596	; 0x3596 <__ashrdi3>
    213a:	59 01       	movw	r10, r18
    213c:	6a 01       	movw	r12, r20
    213e:	7b 01       	movw	r14, r22
    2140:	8c 01       	movw	r16, r24
    2142:	91 01       	movw	r18, r2
    2144:	a2 01       	movw	r20, r4
    2146:	b3 01       	movw	r22, r6
    2148:	c4 01       	movw	r24, r8
    214a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__adddi3>
    214e:	08 e0       	ldi	r16, 0x08	; 8
    2150:	0e 94 cb 1a 	call	0x3596	; 0x3596 <__ashrdi3>
    2154:	59 01       	movw	r10, r18
    2156:	6a 01       	movw	r12, r20
    2158:	7b 01       	movw	r14, r22
    215a:	e8 2f       	mov	r30, r24
    215c:	19 2f       	mov	r17, r25
    return (float)p/256;
    215e:	a9 8d       	ldd	r26, Y+25	; 0x19
    2160:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2162:	92 96       	adiw	r26, 0x22	; 34
    2164:	3c 91       	ld	r19, X
    2166:	92 97       	sbiw	r26, 0x22	; 34
    2168:	91 96       	adiw	r26, 0x21	; 33
    216a:	2c 91       	ld	r18, X
    216c:	93 2f       	mov	r25, r19
    216e:	99 0f       	add	r25, r25
    2170:	99 0b       	sbc	r25, r25
    2172:	49 2f       	mov	r20, r25
    2174:	59 2f       	mov	r21, r25
    2176:	69 2f       	mov	r22, r25
    2178:	79 2f       	mov	r23, r25
    217a:	89 2f       	mov	r24, r25
    217c:	04 e0       	ldi	r16, 0x04	; 4
    217e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__ashldi3>
    2182:	0e 2f       	mov	r16, r30
    2184:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__adddi3>
    2188:	0e 94 df 18 	call	0x31be	; 0x31be <__floatdisf>
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e8       	ldi	r20, 0x80	; 128
    2192:	5b e3       	ldi	r21, 0x3B	; 59
    2194:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
    2198:	08 c0       	rjmp	.+16     	; 0x21aa <_ZN15Adafruit_BME28012readPressureEv+0x3d0>

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	80 ec       	ldi	r24, 0xC0	; 192
    21a0:	9f e7       	ldi	r25, 0x7F	; 127
    21a2:	03 c0       	rjmp	.+6      	; 0x21aa <_ZN15Adafruit_BME28012readPressureEv+0x3d0>
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	70 e0       	ldi	r23, 0x00	; 0
    21a8:	cb 01       	movw	r24, r22
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
    21aa:	6a 96       	adiw	r28, 0x1a	; 26
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	df 90       	pop	r13
    21c4:	cf 90       	pop	r12
    21c6:	bf 90       	pop	r11
    21c8:	af 90       	pop	r10
    21ca:	9f 90       	pop	r9
    21cc:	8f 90       	pop	r8
    21ce:	7f 90       	pop	r7
    21d0:	6f 90       	pop	r6
    21d2:	5f 90       	pop	r5
    21d4:	4f 90       	pop	r4
    21d6:	3f 90       	pop	r3
    21d8:	2f 90       	pop	r2
    21da:	08 95       	ret

000021dc <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
    21dc:	4f 92       	push	r4
    21de:	5f 92       	push	r5
    21e0:	6f 92       	push	r6
    21e2:	7f 92       	push	r7
    21e4:	8f 92       	push	r8
    21e6:	9f 92       	push	r9
    21e8:	af 92       	push	r10
    21ea:	bf 92       	push	r11
    21ec:	cf 92       	push	r12
    21ee:	df 92       	push	r13
    21f0:	ef 92       	push	r14
    21f2:	ff 92       	push	r15
    21f4:	cf 93       	push	r28
    21f6:	df 93       	push	r29
    21f8:	ec 01       	movw	r28, r24
    readTemperature(); // must be done first to get t_fine
    21fa:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    21fe:	6d ef       	ldi	r22, 0xFD	; 253
    2200:	ce 01       	movw	r24, r28
    2202:	0e 94 45 0c 	call	0x188a	; 0x188a <_ZN15Adafruit_BME2806read16Eh>
    2206:	a0 e0       	ldi	r26, 0x00	; 0
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
    220a:	81 15       	cp	r24, r1
    220c:	20 e8       	ldi	r18, 0x80	; 128
    220e:	92 07       	cpc	r25, r18
    2210:	a1 05       	cpc	r26, r1
    2212:	b1 05       	cpc	r27, r1
    2214:	09 f4       	brne	.+2      	; 0x2218 <_ZN15Adafruit_BME28012readHumidityEv+0x3c>
    2216:	cd c0       	rjmp	.+410    	; 0x23b2 <_ZN15Adafruit_BME28012readHumidityEv+0x1d6>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
    2218:	8f 80       	ldd	r8, Y+7	; 0x07
    221a:	98 84       	ldd	r9, Y+8	; 0x08
    221c:	a9 84       	ldd	r10, Y+9	; 0x09
    221e:	ba 84       	ldd	r11, Y+10	; 0x0a
    2220:	3c e2       	ldi	r19, 0x2C	; 44
    2222:	93 1a       	sub	r9, r19
    2224:	31 e0       	ldi	r19, 0x01	; 1
    2226:	a3 0a       	sbc	r10, r19
    2228:	b1 08       	sbc	r11, r1

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
    222a:	3e e0       	ldi	r19, 0x0E	; 14
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	aa 1f       	adc	r26, r26
    2232:	bb 1f       	adc	r27, r27
    2234:	3a 95       	dec	r19
    2236:	d1 f7       	brne	.-12     	; 0x222c <_ZN15Adafruit_BME28012readHumidityEv+0x50>
    2238:	4b a5       	ldd	r20, Y+43	; 0x2b
    223a:	5c a5       	ldd	r21, Y+44	; 0x2c
    223c:	05 2e       	mov	r0, r21
    223e:	00 0c       	add	r0, r0
    2240:	66 0b       	sbc	r22, r22
    2242:	77 0b       	sbc	r23, r23
    2244:	e4 e1       	ldi	r30, 0x14	; 20
    2246:	44 0f       	add	r20, r20
    2248:	55 1f       	adc	r21, r21
    224a:	66 1f       	adc	r22, r22
    224c:	77 1f       	adc	r23, r23
    224e:	ea 95       	dec	r30
    2250:	d1 f7       	brne	.-12     	; 0x2246 <_ZN15Adafruit_BME28012readHumidityEv+0x6a>
    2252:	6c 01       	movw	r12, r24
    2254:	7d 01       	movw	r14, r26
    2256:	c4 1a       	sub	r12, r20
    2258:	d5 0a       	sbc	r13, r21
    225a:	e6 0a       	sbc	r14, r22
    225c:	f7 0a       	sbc	r15, r23
    225e:	ad a5       	ldd	r26, Y+45	; 0x2d
    2260:	be a5       	ldd	r27, Y+46	; 0x2e
    2262:	a5 01       	movw	r20, r10
    2264:	94 01       	movw	r18, r8
    2266:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <__mulshisi3>
    226a:	c6 1a       	sub	r12, r22
    226c:	d7 0a       	sbc	r13, r23
    226e:	e8 0a       	sbc	r14, r24
    2270:	f9 0a       	sbc	r15, r25
    2272:	40 e4       	ldi	r20, 0x40	; 64
    2274:	d4 0e       	add	r13, r20
    2276:	e1 1c       	adc	r14, r1
    2278:	f1 1c       	adc	r15, r1
    227a:	ff e0       	ldi	r31, 0x0F	; 15
    227c:	f5 94       	asr	r15
    227e:	e7 94       	ror	r14
    2280:	d7 94       	ror	r13
    2282:	c7 94       	ror	r12
    2284:	fa 95       	dec	r31
    2286:	d1 f7       	brne	.-12     	; 0x227c <_ZN15Adafruit_BME28012readHumidityEv+0xa0>
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
    2288:	aa a5       	ldd	r26, Y+42	; 0x2a
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	a5 01       	movw	r20, r10
    228e:	94 01       	movw	r18, r8
    2290:	0e 94 6f 19 	call	0x32de	; 0x32de <__muluhisi3>
    2294:	2b 01       	movw	r4, r22
    2296:	3c 01       	movw	r6, r24
    2298:	ab e0       	ldi	r26, 0x0B	; 11
    229a:	75 94       	asr	r7
    229c:	67 94       	ror	r6
    229e:	57 94       	ror	r5
    22a0:	47 94       	ror	r4
    22a2:	aa 95       	dec	r26
    22a4:	d1 f7       	brne	.-12     	; 0x229a <_ZN15Adafruit_BME28012readHumidityEv+0xbe>
    22a6:	50 e8       	ldi	r21, 0x80	; 128
    22a8:	55 0e       	add	r5, r21
    22aa:	61 1c       	adc	r6, r1
    22ac:	71 1c       	adc	r7, r1
    22ae:	af a5       	ldd	r26, Y+47	; 0x2f
    22b0:	0a 2e       	mov	r0, r26
    22b2:	00 0c       	add	r0, r0
    22b4:	bb 0b       	sbc	r27, r27
    22b6:	a5 01       	movw	r20, r10
    22b8:	94 01       	movw	r18, r8
    22ba:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <__mulshisi3>
    22be:	ba e0       	ldi	r27, 0x0A	; 10
    22c0:	95 95       	asr	r25
    22c2:	87 95       	ror	r24
    22c4:	77 95       	ror	r23
    22c6:	67 95       	ror	r22
    22c8:	ba 95       	dec	r27
    22ca:	d1 f7       	brne	.-12     	; 0x22c0 <_ZN15Adafruit_BME28012readHumidityEv+0xe4>
    22cc:	a3 01       	movw	r20, r6
    22ce:	92 01       	movw	r18, r4
    22d0:	0e 94 3d 19 	call	0x327a	; 0x327a <__mulsi3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	2a e0       	ldi	r18, 0x0A	; 10
    22da:	b5 95       	asr	r27
    22dc:	a7 95       	ror	r26
    22de:	97 95       	ror	r25
    22e0:	87 95       	ror	r24
    22e2:	2a 95       	dec	r18
    22e4:	d1 f7       	brne	.-12     	; 0x22da <_ZN15Adafruit_BME28012readHumidityEv+0xfe>
    22e6:	9c 01       	movw	r18, r24
    22e8:	ad 01       	movw	r20, r26
    22ea:	40 5e       	subi	r20, 0xE0	; 224
    22ec:	5f 4f       	sbci	r21, 0xFF	; 255
    22ee:	a8 a5       	ldd	r26, Y+40	; 0x28
    22f0:	b9 a5       	ldd	r27, Y+41	; 0x29
    22f2:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <__mulshisi3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	90 5e       	subi	r25, 0xE0	; 224
    22fc:	af 4f       	sbci	r26, 0xFF	; 255
    22fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2300:	bc 01       	movw	r22, r24
    2302:	cd 01       	movw	r24, r26
    2304:	3e e0       	ldi	r19, 0x0E	; 14
    2306:	95 95       	asr	r25
    2308:	87 95       	ror	r24
    230a:	77 95       	ror	r23
    230c:	67 95       	ror	r22
    230e:	3a 95       	dec	r19
    2310:	d1 f7       	brne	.-12     	; 0x2306 <_ZN15Adafruit_BME28012readHumidityEv+0x12a>
    2312:	a7 01       	movw	r20, r14
    2314:	96 01       	movw	r18, r12
    2316:	0e 94 3d 19 	call	0x327a	; 0x327a <__mulsi3>
    231a:	6b 01       	movw	r12, r22
    231c:	7c 01       	movw	r14, r24

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
    231e:	4f e0       	ldi	r20, 0x0F	; 15
    2320:	95 95       	asr	r25
    2322:	87 95       	ror	r24
    2324:	77 95       	ror	r23
    2326:	67 95       	ror	r22
    2328:	4a 95       	dec	r20
    232a:	d1 f7       	brne	.-12     	; 0x2320 <_ZN15Adafruit_BME28012readHumidityEv+0x144>
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
    232c:	9b 01       	movw	r18, r22
    232e:	ac 01       	movw	r20, r24
    2330:	0e 94 3d 19 	call	0x327a	; 0x327a <__mulsi3>
    2334:	9b 01       	movw	r18, r22
    2336:	ac 01       	movw	r20, r24
    2338:	67 e0       	ldi	r22, 0x07	; 7
    233a:	55 95       	asr	r21
    233c:	47 95       	ror	r20
    233e:	37 95       	ror	r19
    2340:	27 95       	ror	r18
    2342:	6a 95       	dec	r22
    2344:	d1 f7       	brne	.-12     	; 0x233a <_ZN15Adafruit_BME28012readHumidityEv+0x15e>
    2346:	af a1       	ldd	r26, Y+39	; 0x27
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	0e 94 6f 19 	call	0x32de	; 0x32de <__muluhisi3>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	74 e0       	ldi	r23, 0x04	; 4
    2354:	b5 95       	asr	r27
    2356:	a7 95       	ror	r26
    2358:	97 95       	ror	r25
    235a:	87 95       	ror	r24
    235c:	7a 95       	dec	r23
    235e:	d1 f7       	brne	.-12     	; 0x2354 <_ZN15Adafruit_BME28012readHumidityEv+0x178>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    2360:	a7 01       	movw	r20, r14
    2362:	96 01       	movw	r18, r12
    2364:	28 1b       	sub	r18, r24
    2366:	39 0b       	sbc	r19, r25
    2368:	4a 0b       	sbc	r20, r26
    236a:	5b 0b       	sbc	r21, r27
    236c:	da 01       	movw	r26, r20
    236e:	c9 01       	movw	r24, r18
    2370:	57 ff       	sbrs	r21, 7
    2372:	03 c0       	rjmp	.+6      	; 0x237a <_ZN15Adafruit_BME28012readHumidityEv+0x19e>
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	dc 01       	movw	r26, r24
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
    237a:	81 30       	cpi	r24, 0x01	; 1
    237c:	91 05       	cpc	r25, r1
    237e:	a1 05       	cpc	r26, r1
    2380:	39 e1       	ldi	r19, 0x19	; 25
    2382:	b3 07       	cpc	r27, r19
    2384:	24 f0       	brlt	.+8      	; 0x238e <_ZN15Adafruit_BME28012readHumidityEv+0x1b2>
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	a0 e0       	ldi	r26, 0x00	; 0
    238c:	b9 e1       	ldi	r27, 0x19	; 25
    238e:	bc 01       	movw	r22, r24
    2390:	cd 01       	movw	r24, r26
    2392:	2c e0       	ldi	r18, 0x0C	; 12
    2394:	95 95       	asr	r25
    2396:	87 95       	ror	r24
    2398:	77 95       	ror	r23
    239a:	67 95       	ror	r22
    239c:	2a 95       	dec	r18
    239e:	d1 f7       	brne	.-12     	; 0x2394 <_ZN15Adafruit_BME28012readHumidityEv+0x1b8>
    23a0:	0e 94 35 04 	call	0x86a	; 0x86a <__floatsisf>
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e8       	ldi	r20, 0x80	; 128
    23aa:	5a e3       	ldi	r21, 0x3A	; 58
    23ac:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
    23b0:	04 c0       	rjmp	.+8      	; 0x23ba <_ZN15Adafruit_BME28012readHumidityEv+0x1de>
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	80 ec       	ldi	r24, 0xC0	; 192
    23b8:	9f e7       	ldi	r25, 0x7F	; 127

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	ff 90       	pop	r15
    23c0:	ef 90       	pop	r14
    23c2:	df 90       	pop	r13
    23c4:	cf 90       	pop	r12
    23c6:	bf 90       	pop	r11
    23c8:	af 90       	pop	r10
    23ca:	9f 90       	pop	r9
    23cc:	8f 90       	pop	r8
    23ce:	7f 90       	pop	r7
    23d0:	6f 90       	pop	r6
    23d2:	5f 90       	pop	r5
    23d4:	4f 90       	pop	r4
    23d6:	08 95       	ret

000023d8 <_ZN7TwoWire5writeEj>:
*/
/*************************************************************************/
float Adafruit_VEML6075::readUVB(void) {
  takeReading();
  return _uvb_calc;
}
    23d8:	dc 01       	movw	r26, r24
    23da:	ed 91       	ld	r30, X+
    23dc:	fc 91       	ld	r31, X
    23de:	01 90       	ld	r0, Z+
    23e0:	f0 81       	ld	r31, Z
    23e2:	e0 2d       	mov	r30, r0
    23e4:	09 94       	ijmp

000023e6 <_ZN17Adafruit_VEML6075C1Ev>:
    23e6:	fc 01       	movw	r30, r24
    23e8:	8b e7       	ldi	r24, 0x7B	; 123
    23ea:	94 e1       	ldi	r25, 0x14	; 20
    23ec:	ae e0       	ldi	r26, 0x0E	; 14
    23ee:	b0 e4       	ldi	r27, 0x40	; 64
    23f0:	82 83       	std	Z+2, r24	; 0x02
    23f2:	93 83       	std	Z+3, r25	; 0x03
    23f4:	a4 83       	std	Z+4, r26	; 0x04
    23f6:	b5 83       	std	Z+5, r27	; 0x05
    23f8:	81 e7       	ldi	r24, 0x71	; 113
    23fa:	9d e3       	ldi	r25, 0x3D	; 61
    23fc:	aa ea       	ldi	r26, 0xAA	; 170
    23fe:	bf e3       	ldi	r27, 0x3F	; 63
    2400:	86 83       	std	Z+6, r24	; 0x06
    2402:	97 83       	std	Z+7, r25	; 0x07
    2404:	a0 87       	std	Z+8, r26	; 0x08
    2406:	b1 87       	std	Z+9, r27	; 0x09
    2408:	8d ec       	ldi	r24, 0xCD	; 205
    240a:	9c ec       	ldi	r25, 0xCC	; 204
    240c:	ac e3       	ldi	r26, 0x3C	; 60
    240e:	b0 e4       	ldi	r27, 0x40	; 64
    2410:	82 87       	std	Z+10, r24	; 0x0a
    2412:	93 87       	std	Z+11, r25	; 0x0b
    2414:	a4 87       	std	Z+12, r26	; 0x0c
    2416:	b5 87       	std	Z+13, r27	; 0x0d
    2418:	82 e5       	ldi	r24, 0x52	; 82
    241a:	98 eb       	ldi	r25, 0xB8	; 184
    241c:	ae ed       	ldi	r26, 0xDE	; 222
    241e:	bf e3       	ldi	r27, 0x3F	; 63
    2420:	86 87       	std	Z+14, r24	; 0x0e
    2422:	97 87       	std	Z+15, r25	; 0x0f
    2424:	a0 8b       	std	Z+16, r26	; 0x10
    2426:	b1 8b       	std	Z+17, r27	; 0x11
    2428:	86 e0       	ldi	r24, 0x06	; 6
    242a:	9f e7       	ldi	r25, 0x7F	; 127
    242c:	af eb       	ldi	r26, 0xBF	; 191
    242e:	ba e3       	ldi	r27, 0x3A	; 58
    2430:	82 8b       	std	Z+18, r24	; 0x12
    2432:	93 8b       	std	Z+19, r25	; 0x13
    2434:	a4 8b       	std	Z+20, r26	; 0x14
    2436:	b5 8b       	std	Z+21, r27	; 0x15
    2438:	84 ec       	ldi	r24, 0xC4	; 196
    243a:	9d ec       	ldi	r25, 0xCD	; 205
    243c:	a9 e2       	ldi	r26, 0x29	; 41
    243e:	bb e3       	ldi	r27, 0x3B	; 59
    2440:	86 8b       	std	Z+22, r24	; 0x16
    2442:	97 8b       	std	Z+23, r25	; 0x17
    2444:	a0 8f       	std	Z+24, r26	; 0x18
    2446:	b1 8f       	std	Z+25, r27	; 0x19
    2448:	13 a2       	std	Z+35, r1	; 0x23
    244a:	12 a2       	std	Z+34, r1	; 0x22
    244c:	08 95       	ret

0000244e <_ZN17Adafruit_VEML607513writeRegisterEhj>:
    244e:	ff 92       	push	r15
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	cf 93       	push	r28
    2456:	df 93       	push	r29
    2458:	ec 01       	movw	r28, r24
    245a:	f6 2e       	mov	r15, r22
    245c:	8a 01       	movw	r16, r20
    245e:	8c a1       	ldd	r24, Y+36	; 0x24
    2460:	9d a1       	ldd	r25, Y+37	; 0x25
    2462:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <_ZN7TwoWire5beginEv>
    2466:	60 e1       	ldi	r22, 0x10	; 16
    2468:	70 e0       	ldi	r23, 0x00	; 0
    246a:	8c a1       	ldd	r24, Y+36	; 0x24
    246c:	9d a1       	ldd	r25, Y+37	; 0x25
    246e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN7TwoWire17beginTransmissionEi>
    2472:	8c a1       	ldd	r24, Y+36	; 0x24
    2474:	9d a1       	ldd	r25, Y+37	; 0x25
    2476:	dc 01       	movw	r26, r24
    2478:	ed 91       	ld	r30, X+
    247a:	fc 91       	ld	r31, X
    247c:	01 90       	ld	r0, Z+
    247e:	f0 81       	ld	r31, Z
    2480:	e0 2d       	mov	r30, r0
    2482:	6f 2d       	mov	r22, r15
    2484:	09 95       	icall
    2486:	b8 01       	movw	r22, r16
    2488:	77 27       	eor	r23, r23
    248a:	8c a1       	ldd	r24, Y+36	; 0x24
    248c:	9d a1       	ldd	r25, Y+37	; 0x25
    248e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <_ZN7TwoWire5writeEj>
    2492:	61 2f       	mov	r22, r17
    2494:	70 e0       	ldi	r23, 0x00	; 0
    2496:	8c a1       	ldd	r24, Y+36	; 0x24
    2498:	9d a1       	ldd	r25, Y+37	; 0x25
    249a:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <_ZN7TwoWire5writeEj>
    249e:	8c a1       	ldd	r24, Y+36	; 0x24
    24a0:	9d a1       	ldd	r25, Y+37	; 0x25
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	ff 90       	pop	r15
    24ac:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <_ZN7TwoWire15endTransmissionEv>

000024b0 <_ZN17Adafruit_VEML60758shutdownEb>:
    24b0:	fc 01       	movw	r30, r24
    24b2:	22 a1       	ldd	r18, Z+34	; 0x22
    24b4:	60 fb       	bst	r22, 0
    24b6:	20 f9       	bld	r18, 0
    24b8:	22 a3       	std	Z+34, r18	; 0x22
    24ba:	42 a1       	ldd	r20, Z+34	; 0x22
    24bc:	53 a1       	ldd	r21, Z+35	; 0x23
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	0c 94 27 12 	jmp	0x244e	; 0x244e <_ZN17Adafruit_VEML607513writeRegisterEhj>

000024c4 <_ZN17Adafruit_VEML607518setIntegrationTimeE24veml6075_integrationtime>:
    24c4:	1f 93       	push	r17
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	ec 01       	movw	r28, r24
    24cc:	16 2f       	mov	r17, r22
    24ce:	86 2f       	mov	r24, r22
    24d0:	83 70       	andi	r24, 0x03	; 3
    24d2:	98 2f       	mov	r25, r24
    24d4:	92 95       	swap	r25
    24d6:	99 0f       	add	r25, r25
    24d8:	90 7e       	andi	r25, 0xE0	; 224
    24da:	8a a1       	ldd	r24, Y+34	; 0x22
    24dc:	8f 79       	andi	r24, 0x9F	; 159
    24de:	89 2b       	or	r24, r25
    24e0:	8a a3       	std	Y+34, r24	; 0x22
    24e2:	4a a1       	ldd	r20, Y+34	; 0x22
    24e4:	5b a1       	ldd	r21, Y+35	; 0x23
    24e6:	60 e0       	ldi	r22, 0x00	; 0
    24e8:	ce 01       	movw	r24, r28
    24ea:	0e 94 27 12 	call	0x244e	; 0x244e <_ZN17Adafruit_VEML607513writeRegisterEhj>
    24ee:	12 30       	cpi	r17, 0x02	; 2
    24f0:	99 f0       	breq	.+38     	; 0x2518 <_ZN17Adafruit_VEML607518setIntegrationTimeE24veml6075_integrationtime+0x54>
    24f2:	28 f4       	brcc	.+10     	; 0x24fe <_ZN17Adafruit_VEML607518setIntegrationTimeE24veml6075_integrationtime+0x3a>
    24f4:	11 23       	and	r17, r17
    24f6:	51 f0       	breq	.+20     	; 0x250c <_ZN17Adafruit_VEML607518setIntegrationTimeE24veml6075_integrationtime+0x48>
    24f8:	11 30       	cpi	r17, 0x01	; 1
    24fa:	59 f0       	breq	.+22     	; 0x2512 <_ZN17Adafruit_VEML607518setIntegrationTimeE24veml6075_integrationtime+0x4e>
    24fc:	04 c0       	rjmp	.+8      	; 0x2506 <_ZN17Adafruit_VEML607518setIntegrationTimeE24veml6075_integrationtime+0x42>
    24fe:	13 30       	cpi	r17, 0x03	; 3
    2500:	71 f0       	breq	.+28     	; 0x251e <_ZN17Adafruit_VEML607518setIntegrationTimeE24veml6075_integrationtime+0x5a>
    2502:	14 30       	cpi	r17, 0x04	; 4
    2504:	79 f0       	breq	.+30     	; 0x2524 <_ZN17Adafruit_VEML607518setIntegrationTimeE24veml6075_integrationtime+0x60>
    2506:	19 82       	std	Y+1, r1	; 0x01
    2508:	18 82       	st	Y, r1
    250a:	10 c0       	rjmp	.+32     	; 0x252c <_ZN17Adafruit_VEML607518setIntegrationTimeE24veml6075_integrationtime+0x68>
    250c:	82 e3       	ldi	r24, 0x32	; 50
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	0b c0       	rjmp	.+22     	; 0x2528 <_ZN17Adafruit_VEML607518setIntegrationTimeE24veml6075_integrationtime+0x64>
    2512:	84 e6       	ldi	r24, 0x64	; 100
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	08 c0       	rjmp	.+16     	; 0x2528 <_ZN17Adafruit_VEML607518setIntegrationTimeE24veml6075_integrationtime+0x64>
    2518:	88 ec       	ldi	r24, 0xC8	; 200
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	05 c0       	rjmp	.+10     	; 0x2528 <_ZN17Adafruit_VEML607518setIntegrationTimeE24veml6075_integrationtime+0x64>
    251e:	80 e9       	ldi	r24, 0x90	; 144
    2520:	91 e0       	ldi	r25, 0x01	; 1
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <_ZN17Adafruit_VEML607518setIntegrationTimeE24veml6075_integrationtime+0x64>
    2524:	80 e2       	ldi	r24, 0x20	; 32
    2526:	93 e0       	ldi	r25, 0x03	; 3
    2528:	99 83       	std	Y+1, r25	; 0x01
    252a:	88 83       	st	Y, r24
    252c:	df 91       	pop	r29
    252e:	cf 91       	pop	r28
    2530:	1f 91       	pop	r17
    2532:	08 95       	ret

00002534 <_ZN17Adafruit_VEML607514setHighDynamicEb>:
    2534:	fc 01       	movw	r30, r24
    2536:	22 a1       	ldd	r18, Z+34	; 0x22
    2538:	60 fb       	bst	r22, 0
    253a:	24 f9       	bld	r18, 4
    253c:	22 a3       	std	Z+34, r18	; 0x22
    253e:	42 a1       	ldd	r20, Z+34	; 0x22
    2540:	53 a1       	ldd	r21, Z+35	; 0x23
    2542:	60 e0       	ldi	r22, 0x00	; 0
    2544:	0c 94 27 12 	jmp	0x244e	; 0x244e <_ZN17Adafruit_VEML607513writeRegisterEhj>

00002548 <_ZN17Adafruit_VEML607513setForcedModeEb>:
    2548:	fc 01       	movw	r30, r24
    254a:	22 a1       	ldd	r18, Z+34	; 0x22
    254c:	60 fb       	bst	r22, 0
    254e:	21 f9       	bld	r18, 1
    2550:	22 a3       	std	Z+34, r18	; 0x22
    2552:	42 a1       	ldd	r20, Z+34	; 0x22
    2554:	53 a1       	ldd	r21, Z+35	; 0x23
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	0c 94 27 12 	jmp	0x244e	; 0x244e <_ZN17Adafruit_VEML607513writeRegisterEhj>

0000255c <_ZN17Adafruit_VEML607512readRegisterEh>:
    255c:	0f 93       	push	r16
    255e:	1f 93       	push	r17
    2560:	cf 93       	push	r28
    2562:	df 93       	push	r29
    2564:	ec 01       	movw	r28, r24
    2566:	16 2f       	mov	r17, r22
    2568:	8c a1       	ldd	r24, Y+36	; 0x24
    256a:	9d a1       	ldd	r25, Y+37	; 0x25
    256c:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <_ZN7TwoWire5beginEv>
    2570:	60 e1       	ldi	r22, 0x10	; 16
    2572:	70 e0       	ldi	r23, 0x00	; 0
    2574:	8c a1       	ldd	r24, Y+36	; 0x24
    2576:	9d a1       	ldd	r25, Y+37	; 0x25
    2578:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN7TwoWire17beginTransmissionEi>
    257c:	8c a1       	ldd	r24, Y+36	; 0x24
    257e:	9d a1       	ldd	r25, Y+37	; 0x25
    2580:	dc 01       	movw	r26, r24
    2582:	ed 91       	ld	r30, X+
    2584:	fc 91       	ld	r31, X
    2586:	01 90       	ld	r0, Z+
    2588:	f0 81       	ld	r31, Z
    258a:	e0 2d       	mov	r30, r0
    258c:	61 2f       	mov	r22, r17
    258e:	09 95       	icall
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	8c a1       	ldd	r24, Y+36	; 0x24
    2594:	9d a1       	ldd	r25, Y+37	; 0x25
    2596:	0e 94 00 16 	call	0x2c00	; 0x2c00 <_ZN7TwoWire15endTransmissionEh>
    259a:	42 e0       	ldi	r20, 0x02	; 2
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	60 e1       	ldi	r22, 0x10	; 16
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	8c a1       	ldd	r24, Y+36	; 0x24
    25a4:	9d a1       	ldd	r25, Y+37	; 0x25
    25a6:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <_ZN7TwoWire11requestFromEii>
    25aa:	82 30       	cpi	r24, 0x02	; 2
    25ac:	39 f0       	breq	.+14     	; 0x25bc <_ZN17Adafruit_VEML607512readRegisterEh+0x60>
    25ae:	6a e0       	ldi	r22, 0x0A	; 10
    25b0:	70 e0       	ldi	r23, 0x00	; 0
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <delay>
    25ba:	ef cf       	rjmp	.-34     	; 0x259a <_ZN17Adafruit_VEML607512readRegisterEh+0x3e>
    25bc:	8c a1       	ldd	r24, Y+36	; 0x24
    25be:	9d a1       	ldd	r25, Y+37	; 0x25
    25c0:	dc 01       	movw	r26, r24
    25c2:	ed 91       	ld	r30, X+
    25c4:	fc 91       	ld	r31, X
    25c6:	02 84       	ldd	r0, Z+10	; 0x0a
    25c8:	f3 85       	ldd	r31, Z+11	; 0x0b
    25ca:	e0 2d       	mov	r30, r0
    25cc:	09 95       	icall
    25ce:	8c 01       	movw	r16, r24
    25d0:	8c a1       	ldd	r24, Y+36	; 0x24
    25d2:	9d a1       	ldd	r25, Y+37	; 0x25
    25d4:	dc 01       	movw	r26, r24
    25d6:	ed 91       	ld	r30, X+
    25d8:	fc 91       	ld	r31, X
    25da:	02 84       	ldd	r0, Z+10	; 0x0a
    25dc:	f3 85       	ldd	r31, Z+11	; 0x0b
    25de:	e0 2d       	mov	r30, r0
    25e0:	09 95       	icall
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	38 2f       	mov	r19, r24
    25e8:	c9 01       	movw	r24, r18
    25ea:	80 2b       	or	r24, r16
    25ec:	91 2b       	or	r25, r17
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	1f 91       	pop	r17
    25f4:	0f 91       	pop	r16
    25f6:	08 95       	ret

000025f8 <_ZN17Adafruit_VEML60755beginE24veml6075_integrationtimebbP7TwoWire>:
    25f8:	df 92       	push	r13
    25fa:	ef 92       	push	r14
    25fc:	ff 92       	push	r15
    25fe:	0f 93       	push	r16
    2600:	1f 93       	push	r17
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	ec 01       	movw	r28, r24
    2608:	e6 2e       	mov	r14, r22
    260a:	f4 2e       	mov	r15, r20
    260c:	d2 2e       	mov	r13, r18
    260e:	1d a3       	std	Y+37, r17	; 0x25
    2610:	0c a3       	std	Y+36, r16	; 0x24
    2612:	6c e0       	ldi	r22, 0x0C	; 12
    2614:	0e 94 ae 12 	call	0x255c	; 0x255c <_ZN17Adafruit_VEML607512readRegisterEh>
    2618:	86 32       	cpi	r24, 0x26	; 38
    261a:	c1 f4       	brne	.+48     	; 0x264c <_ZN17Adafruit_VEML60755beginE24veml6075_integrationtimebbP7TwoWire+0x54>
    261c:	1b a2       	std	Y+35, r1	; 0x23
    261e:	1a a2       	std	Y+34, r1	; 0x22
    2620:	61 e0       	ldi	r22, 0x01	; 1
    2622:	ce 01       	movw	r24, r28
    2624:	0e 94 58 12 	call	0x24b0	; 0x24b0 <_ZN17Adafruit_VEML60758shutdownEb>
    2628:	6d 2d       	mov	r22, r13
    262a:	ce 01       	movw	r24, r28
    262c:	0e 94 a4 12 	call	0x2548	; 0x2548 <_ZN17Adafruit_VEML607513setForcedModeEb>
    2630:	6e 2d       	mov	r22, r14
    2632:	ce 01       	movw	r24, r28
    2634:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN17Adafruit_VEML607518setIntegrationTimeE24veml6075_integrationtime>
    2638:	6f 2d       	mov	r22, r15
    263a:	ce 01       	movw	r24, r28
    263c:	0e 94 9a 12 	call	0x2534	; 0x2534 <_ZN17Adafruit_VEML607514setHighDynamicEb>
    2640:	60 e0       	ldi	r22, 0x00	; 0
    2642:	ce 01       	movw	r24, r28
    2644:	0e 94 58 12 	call	0x24b0	; 0x24b0 <_ZN17Adafruit_VEML60758shutdownEb>
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	01 c0       	rjmp	.+2      	; 0x264e <_ZN17Adafruit_VEML60755beginE24veml6075_integrationtimebbP7TwoWire+0x56>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	df 91       	pop	r29
    2650:	cf 91       	pop	r28
    2652:	1f 91       	pop	r17
    2654:	0f 91       	pop	r16
    2656:	ff 90       	pop	r15
    2658:	ef 90       	pop	r14
    265a:	df 90       	pop	r13
    265c:	08 95       	ret

0000265e <_ZN17Adafruit_VEML607513getForcedModeEv>:
    265e:	cf 93       	push	r28
    2660:	df 93       	push	r29
    2662:	ec 01       	movw	r28, r24
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	0e 94 ae 12 	call	0x255c	; 0x255c <_ZN17Adafruit_VEML607512readRegisterEh>
    266a:	8a a3       	std	Y+34, r24	; 0x22
    266c:	9b a3       	std	Y+35, r25	; 0x23
    266e:	86 95       	lsr	r24
    2670:	81 70       	andi	r24, 0x01	; 1
    2672:	df 91       	pop	r29
    2674:	cf 91       	pop	r28
    2676:	08 95       	ret

00002678 <_ZN17Adafruit_VEML607511takeReadingEv>:
    2678:	2f 92       	push	r2
    267a:	3f 92       	push	r3
    267c:	4f 92       	push	r4
    267e:	5f 92       	push	r5
    2680:	6f 92       	push	r6
    2682:	7f 92       	push	r7
    2684:	8f 92       	push	r8
    2686:	9f 92       	push	r9
    2688:	af 92       	push	r10
    268a:	bf 92       	push	r11
    268c:	cf 92       	push	r12
    268e:	df 92       	push	r13
    2690:	ef 92       	push	r14
    2692:	ff 92       	push	r15
    2694:	0f 93       	push	r16
    2696:	1f 93       	push	r17
    2698:	cf 93       	push	r28
    269a:	df 93       	push	r29
    269c:	ec 01       	movw	r28, r24
    269e:	0e 94 2f 13 	call	0x265e	; 0x265e <_ZN17Adafruit_VEML607513getForcedModeEv>
    26a2:	88 23       	and	r24, r24
    26a4:	d1 f0       	breq	.+52     	; 0x26da <_ZN17Adafruit_VEML607511takeReadingEv+0x62>
    26a6:	8a a1       	ldd	r24, Y+34	; 0x22
    26a8:	83 7f       	andi	r24, 0xF3	; 243
    26aa:	84 60       	ori	r24, 0x04	; 4
    26ac:	8a a3       	std	Y+34, r24	; 0x22
    26ae:	4a a1       	ldd	r20, Y+34	; 0x22
    26b0:	5b a1       	ldd	r21, Y+35	; 0x23
    26b2:	60 e0       	ldi	r22, 0x00	; 0
    26b4:	ce 01       	movw	r24, r28
    26b6:	0e 94 27 12 	call	0x244e	; 0x244e <_ZN17Adafruit_VEML607513writeRegisterEhj>
    26ba:	68 81       	ld	r22, Y
    26bc:	79 81       	ldd	r23, Y+1	; 0x01
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 33 04 	call	0x866	; 0x866 <__floatunsisf>
    26c6:	2d ec       	ldi	r18, 0xCD	; 205
    26c8:	3c ec       	ldi	r19, 0xCC	; 204
    26ca:	4c e8       	ldi	r20, 0x8C	; 140
    26cc:	5f e3       	ldi	r21, 0x3F	; 63
    26ce:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
    26d2:	0e 94 b0 18 	call	0x3160	; 0x3160 <__fixunssfsi>
    26d6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <delay>
    26da:	67 e0       	ldi	r22, 0x07	; 7
    26dc:	ce 01       	movw	r24, r28
    26de:	0e 94 ae 12 	call	0x255c	; 0x255c <_ZN17Adafruit_VEML607512readRegisterEh>
    26e2:	8c 01       	movw	r16, r24
    26e4:	69 e0       	ldi	r22, 0x09	; 9
    26e6:	ce 01       	movw	r24, r28
    26e8:	0e 94 ae 12 	call	0x255c	; 0x255c <_ZN17Adafruit_VEML607512readRegisterEh>
    26ec:	1c 01       	movw	r2, r24
    26ee:	6a e0       	ldi	r22, 0x0A	; 10
    26f0:	ce 01       	movw	r24, r28
    26f2:	0e 94 ae 12 	call	0x255c	; 0x255c <_ZN17Adafruit_VEML607512readRegisterEh>
    26f6:	bc 01       	movw	r22, r24
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	0e 94 33 04 	call	0x866	; 0x866 <__floatunsisf>
    2700:	4b 01       	movw	r8, r22
    2702:	5c 01       	movw	r10, r24
    2704:	6b e0       	ldi	r22, 0x0B	; 11
    2706:	ce 01       	movw	r24, r28
    2708:	0e 94 ae 12 	call	0x255c	; 0x255c <_ZN17Adafruit_VEML607512readRegisterEh>
    270c:	bc 01       	movw	r22, r24
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	0e 94 33 04 	call	0x866	; 0x866 <__floatunsisf>
    2716:	6b 01       	movw	r12, r22
    2718:	7c 01       	movw	r14, r24
    271a:	b8 01       	movw	r22, r16
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	0e 94 33 04 	call	0x866	; 0x866 <__floatunsisf>
    2724:	2b 01       	movw	r4, r22
    2726:	3c 01       	movw	r6, r24
    2728:	2a 81       	ldd	r18, Y+2	; 0x02
    272a:	3b 81       	ldd	r19, Y+3	; 0x03
    272c:	4c 81       	ldd	r20, Y+4	; 0x04
    272e:	5d 81       	ldd	r21, Y+5	; 0x05
    2730:	c5 01       	movw	r24, r10
    2732:	b4 01       	movw	r22, r8
    2734:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
    2738:	9b 01       	movw	r18, r22
    273a:	ac 01       	movw	r20, r24
    273c:	c3 01       	movw	r24, r6
    273e:	b2 01       	movw	r22, r4
    2740:	0e 94 4f 03 	call	0x69e	; 0x69e <__subsf3>
    2744:	2b 01       	movw	r4, r22
    2746:	3c 01       	movw	r6, r24
    2748:	2e 81       	ldd	r18, Y+6	; 0x06
    274a:	3f 81       	ldd	r19, Y+7	; 0x07
    274c:	48 85       	ldd	r20, Y+8	; 0x08
    274e:	59 85       	ldd	r21, Y+9	; 0x09
    2750:	c7 01       	movw	r24, r14
    2752:	b6 01       	movw	r22, r12
    2754:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
    2758:	9b 01       	movw	r18, r22
    275a:	ac 01       	movw	r20, r24
    275c:	c3 01       	movw	r24, r6
    275e:	b2 01       	movw	r22, r4
    2760:	0e 94 4f 03 	call	0x69e	; 0x69e <__subsf3>
    2764:	6a 8f       	std	Y+26, r22	; 0x1a
    2766:	7b 8f       	std	Y+27, r23	; 0x1b
    2768:	8c 8f       	std	Y+28, r24	; 0x1c
    276a:	9d 8f       	std	Y+29, r25	; 0x1d
    276c:	b1 01       	movw	r22, r2
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e 94 33 04 	call	0x866	; 0x866 <__floatunsisf>
    2776:	2b 01       	movw	r4, r22
    2778:	3c 01       	movw	r6, r24
    277a:	2a 85       	ldd	r18, Y+10	; 0x0a
    277c:	3b 85       	ldd	r19, Y+11	; 0x0b
    277e:	4c 85       	ldd	r20, Y+12	; 0x0c
    2780:	5d 85       	ldd	r21, Y+13	; 0x0d
    2782:	c5 01       	movw	r24, r10
    2784:	b4 01       	movw	r22, r8
    2786:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
    278a:	9b 01       	movw	r18, r22
    278c:	ac 01       	movw	r20, r24
    278e:	c3 01       	movw	r24, r6
    2790:	b2 01       	movw	r22, r4
    2792:	0e 94 4f 03 	call	0x69e	; 0x69e <__subsf3>
    2796:	4b 01       	movw	r8, r22
    2798:	5c 01       	movw	r10, r24
    279a:	2e 85       	ldd	r18, Y+14	; 0x0e
    279c:	3f 85       	ldd	r19, Y+15	; 0x0f
    279e:	48 89       	ldd	r20, Y+16	; 0x10
    27a0:	59 89       	ldd	r21, Y+17	; 0x11
    27a2:	c7 01       	movw	r24, r14
    27a4:	b6 01       	movw	r22, r12
    27a6:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
    27aa:	9b 01       	movw	r18, r22
    27ac:	ac 01       	movw	r20, r24
    27ae:	c5 01       	movw	r24, r10
    27b0:	b4 01       	movw	r22, r8
    27b2:	0e 94 4f 03 	call	0x69e	; 0x69e <__subsf3>
    27b6:	6e 8f       	std	Y+30, r22	; 0x1e
    27b8:	7f 8f       	std	Y+31, r23	; 0x1f
    27ba:	88 a3       	std	Y+32, r24	; 0x20
    27bc:	99 a3       	std	Y+33, r25	; 0x21
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
    27c2:	1f 91       	pop	r17
    27c4:	0f 91       	pop	r16
    27c6:	ff 90       	pop	r15
    27c8:	ef 90       	pop	r14
    27ca:	df 90       	pop	r13
    27cc:	cf 90       	pop	r12
    27ce:	bf 90       	pop	r11
    27d0:	af 90       	pop	r10
    27d2:	9f 90       	pop	r9
    27d4:	8f 90       	pop	r8
    27d6:	7f 90       	pop	r7
    27d8:	6f 90       	pop	r6
    27da:	5f 90       	pop	r5
    27dc:	4f 90       	pop	r4
    27de:	3f 90       	pop	r3
    27e0:	2f 90       	pop	r2
    27e2:	08 95       	ret

000027e4 <_ZN17Adafruit_VEML60757readUVIEv>:
/*! 
    @brief  Read and calculate the approximate UV Index reading
    @return the UV Index as a floating point
*/
/**************************************************************************/
float Adafruit_VEML6075::readUVI() {
    27e4:	cf 92       	push	r12
    27e6:	df 92       	push	r13
    27e8:	ef 92       	push	r14
    27ea:	ff 92       	push	r15
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	ec 01       	movw	r28, r24
  takeReading();
    27f2:	0e 94 3c 13 	call	0x2678	; 0x2678 <_ZN17Adafruit_VEML607511takeReadingEv>
  return ((_uva_calc * _uva_resp) + (_uvb_calc * _uvb_resp)) / 2;
    27f6:	2a 89       	ldd	r18, Y+18	; 0x12
    27f8:	3b 89       	ldd	r19, Y+19	; 0x13
    27fa:	4c 89       	ldd	r20, Y+20	; 0x14
    27fc:	5d 89       	ldd	r21, Y+21	; 0x15
    27fe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2800:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2802:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2804:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2806:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
    280a:	6b 01       	movw	r12, r22
    280c:	7c 01       	movw	r14, r24
    280e:	2e 89       	ldd	r18, Y+22	; 0x16
    2810:	3f 89       	ldd	r19, Y+23	; 0x17
    2812:	48 8d       	ldd	r20, Y+24	; 0x18
    2814:	59 8d       	ldd	r21, Y+25	; 0x19
    2816:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2818:	7f 8d       	ldd	r23, Y+31	; 0x1f
    281a:	88 a1       	ldd	r24, Y+32	; 0x20
    281c:	99 a1       	ldd	r25, Y+33	; 0x21
    281e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
    2822:	9b 01       	movw	r18, r22
    2824:	ac 01       	movw	r20, r24
    2826:	c7 01       	movw	r24, r14
    2828:	b6 01       	movw	r22, r12
    282a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__addsf3>
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	5f e3       	ldi	r21, 0x3F	; 63
    2836:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3>
}
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	ff 90       	pop	r15
    2840:	ef 90       	pop	r14
    2842:	df 90       	pop	r13
    2844:	cf 90       	pop	r12
    2846:	08 95       	ret

00002848 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    2848:	cf 93       	push	r28
  uint8_t sreg = SREG;
    284a:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    284c:	f8 94       	cli
  if (!initialized) {
    284e:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <_ZN8SPIClass11initializedE>
    2852:	81 11       	cpse	r24, r1
    2854:	27 c0       	rjmp	.+78     	; 0x28a4 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    2856:	e4 eb       	ldi	r30, 0xB4	; 180
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    285c:	e0 ea       	ldi	r30, 0xA0	; 160
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    2862:	e8 2f       	mov	r30, r24
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	ee 0f       	add	r30, r30
    2868:	ff 1f       	adc	r31, r31
    286a:	ee 52       	subi	r30, 0x2E	; 46
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	a5 91       	lpm	r26, Z+
    2870:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    2872:	ec 91       	ld	r30, X
    2874:	e9 23       	and	r30, r25
    2876:	21 f4       	brne	.+8      	; 0x2880 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    2878:	61 e0       	ldi	r22, 0x01	; 1
    287a:	8a e0       	ldi	r24, 0x0A	; 10
    287c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    2880:	61 e0       	ldi	r22, 0x01	; 1
    2882:	8a e0       	ldi	r24, 0x0A	; 10
    2884:	0e 94 2e 0a 	call	0x145c	; 0x145c <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    2888:	8c b5       	in	r24, 0x2c	; 44
    288a:	80 61       	ori	r24, 0x10	; 16
    288c:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    288e:	8c b5       	in	r24, 0x2c	; 44
    2890:	80 64       	ori	r24, 0x40	; 64
    2892:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2894:	61 e0       	ldi	r22, 0x01	; 1
    2896:	8d e0       	ldi	r24, 0x0D	; 13
    2898:	0e 94 2e 0a 	call	0x145c	; 0x145c <pinMode>
    pinMode(MOSI, OUTPUT);
    289c:	61 e0       	ldi	r22, 0x01	; 1
    289e:	8b e0       	ldi	r24, 0x0B	; 11
    28a0:	0e 94 2e 0a 	call	0x145c	; 0x145c <pinMode>
  }
  initialized++; // reference count
    28a4:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <_ZN8SPIClass11initializedE>
    28a8:	8f 5f       	subi	r24, 0xFF	; 255
    28aa:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <_ZN8SPIClass11initializedE>
  SREG = sreg;
    28ae:	cf bf       	out	0x3f, r28	; 63
}
    28b0:	cf 91       	pop	r28
    28b2:	08 95       	ret

000028b4 <__vector_13>:
  else if(pin == 2 || pin == 10) {
    DDRB |= _BV(PORTB2);
    TCCR1A |= _BV(COM1B1);
  }
  setPwmDuty(pin, duty);
  resume();			// Lex - make sure the clock is running.  We don't want to restart the count, in case we are starting the second WGM
    28b4:	1f 92       	push	r1
    28b6:	0f 92       	push	r0
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	0f 92       	push	r0
    28bc:	11 24       	eor	r1, r1
    28be:	2f 93       	push	r18
    28c0:	3f 93       	push	r19
    28c2:	4f 93       	push	r20
    28c4:	5f 93       	push	r21
    28c6:	6f 93       	push	r22
    28c8:	7f 93       	push	r23
    28ca:	8f 93       	push	r24
    28cc:	9f 93       	push	r25
    28ce:	af 93       	push	r26
    28d0:	bf 93       	push	r27
    28d2:	ef 93       	push	r30
    28d4:	ff 93       	push	r31
    28d6:	e0 91 84 03 	lds	r30, 0x0384	; 0x800384 <Timer1+0x4>
    28da:	f0 91 85 03 	lds	r31, 0x0385	; 0x800385 <Timer1+0x5>
    28de:	09 95       	icall
    28e0:	ff 91       	pop	r31
    28e2:	ef 91       	pop	r30
    28e4:	bf 91       	pop	r27
    28e6:	af 91       	pop	r26
    28e8:	9f 91       	pop	r25
    28ea:	8f 91       	pop	r24
    28ec:	7f 91       	pop	r23
    28ee:	6f 91       	pop	r22
    28f0:	5f 91       	pop	r21
    28f2:	4f 91       	pop	r20
    28f4:	3f 91       	pop	r19
    28f6:	2f 91       	pop	r18
    28f8:	0f 90       	pop	r0
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	0f 90       	pop	r0
    28fe:	1f 90       	pop	r1
    2900:	18 95       	reti

00002902 <_ZN8TimerOne9setPeriodEl>:
    2902:	fc 01       	movw	r30, r24
    2904:	a3 e0       	ldi	r26, 0x03	; 3
    2906:	44 0f       	add	r20, r20
    2908:	55 1f       	adc	r21, r21
    290a:	66 1f       	adc	r22, r22
    290c:	77 1f       	adc	r23, r23
    290e:	aa 95       	dec	r26
    2910:	d1 f7       	brne	.-12     	; 0x2906 <_ZN8TimerOne9setPeriodEl+0x4>
    2912:	41 15       	cp	r20, r1
    2914:	51 05       	cpc	r21, r1
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	68 07       	cpc	r22, r24
    291a:	71 05       	cpc	r23, r1
    291c:	14 f4       	brge	.+4      	; 0x2922 <_ZN8TimerOne9setPeriodEl+0x20>
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	0e c0       	rjmp	.+28     	; 0x293e <_ZN8TimerOne9setPeriodEl+0x3c>
    2922:	33 e0       	ldi	r19, 0x03	; 3
    2924:	75 95       	asr	r23
    2926:	67 95       	ror	r22
    2928:	57 95       	ror	r21
    292a:	47 95       	ror	r20
    292c:	3a 95       	dec	r19
    292e:	d1 f7       	brne	.-12     	; 0x2924 <_ZN8TimerOne9setPeriodEl+0x22>
    2930:	41 15       	cp	r20, r1
    2932:	51 05       	cpc	r21, r1
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	68 07       	cpc	r22, r24
    2938:	71 05       	cpc	r23, r1
    293a:	1c f4       	brge	.+6      	; 0x2942 <_ZN8TimerOne9setPeriodEl+0x40>
    293c:	82 e0       	ldi	r24, 0x02	; 2
    293e:	82 83       	std	Z+2, r24	; 0x02
    2940:	31 c0       	rjmp	.+98     	; 0x29a4 <_ZN8TimerOne9setPeriodEl+0xa2>
    2942:	23 e0       	ldi	r18, 0x03	; 3
    2944:	75 95       	asr	r23
    2946:	67 95       	ror	r22
    2948:	57 95       	ror	r21
    294a:	47 95       	ror	r20
    294c:	2a 95       	dec	r18
    294e:	d1 f7       	brne	.-12     	; 0x2944 <_ZN8TimerOne9setPeriodEl+0x42>
    2950:	41 15       	cp	r20, r1
    2952:	51 05       	cpc	r21, r1
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	68 07       	cpc	r22, r24
    2958:	71 05       	cpc	r23, r1
    295a:	14 f4       	brge	.+4      	; 0x2960 <_ZN8TimerOne9setPeriodEl+0x5e>
    295c:	83 e0       	ldi	r24, 0x03	; 3
    295e:	ef cf       	rjmp	.-34     	; 0x293e <_ZN8TimerOne9setPeriodEl+0x3c>
    2960:	92 e0       	ldi	r25, 0x02	; 2
    2962:	75 95       	asr	r23
    2964:	67 95       	ror	r22
    2966:	57 95       	ror	r21
    2968:	47 95       	ror	r20
    296a:	9a 95       	dec	r25
    296c:	d1 f7       	brne	.-12     	; 0x2962 <_ZN8TimerOne9setPeriodEl+0x60>
    296e:	41 15       	cp	r20, r1
    2970:	51 05       	cpc	r21, r1
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	68 07       	cpc	r22, r24
    2976:	71 05       	cpc	r23, r1
    2978:	14 f4       	brge	.+4      	; 0x297e <_ZN8TimerOne9setPeriodEl+0x7c>
    297a:	84 e0       	ldi	r24, 0x04	; 4
    297c:	e0 cf       	rjmp	.-64     	; 0x293e <_ZN8TimerOne9setPeriodEl+0x3c>
    297e:	82 e0       	ldi	r24, 0x02	; 2
    2980:	75 95       	asr	r23
    2982:	67 95       	ror	r22
    2984:	57 95       	ror	r21
    2986:	47 95       	ror	r20
    2988:	8a 95       	dec	r24
    298a:	d1 f7       	brne	.-12     	; 0x2980 <_ZN8TimerOne9setPeriodEl+0x7e>
    298c:	85 e0       	ldi	r24, 0x05	; 5
    298e:	82 83       	std	Z+2, r24	; 0x02
    2990:	41 15       	cp	r20, r1
    2992:	51 05       	cpc	r21, r1
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	68 07       	cpc	r22, r24
    2998:	71 05       	cpc	r23, r1
    299a:	24 f0       	brlt	.+8      	; 0x29a4 <_ZN8TimerOne9setPeriodEl+0xa2>
    299c:	4f ef       	ldi	r20, 0xFF	; 255
    299e:	5f ef       	ldi	r21, 0xFF	; 255
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	70 e0       	ldi	r23, 0x00	; 0
    29a4:	8f b7       	in	r24, 0x3f	; 63
    29a6:	83 83       	std	Z+3, r24	; 0x03
    29a8:	f8 94       	cli
    29aa:	51 83       	std	Z+1, r21	; 0x01
    29ac:	40 83       	st	Z, r20
    29ae:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    29b2:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    29b6:	83 81       	ldd	r24, Z+3	; 0x03
    29b8:	8f bf       	out	0x3f, r24	; 63
    29ba:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    29be:	88 7f       	andi	r24, 0xF8	; 248
    29c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    29c4:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    29c8:	82 81       	ldd	r24, Z+2	; 0x02
    29ca:	89 2b       	or	r24, r25
    29cc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    29d0:	08 95       	ret

000029d2 <_ZN8TimerOne10initializeEl>:
    29d2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    29d6:	20 e1       	ldi	r18, 0x10	; 16
    29d8:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    29dc:	0c 94 81 14 	jmp	0x2902	; 0x2902 <_ZN8TimerOne9setPeriodEl>

000029e0 <_ZN8TimerOne6resumeEv>:
    29e0:	e1 e8       	ldi	r30, 0x81	; 129
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	20 81       	ld	r18, Z
    29e6:	dc 01       	movw	r26, r24
    29e8:	12 96       	adiw	r26, 0x02	; 2
    29ea:	8c 91       	ld	r24, X
    29ec:	82 2b       	or	r24, r18
    29ee:	80 83       	st	Z, r24
    29f0:	08 95       	ret

000029f2 <_ZN8TimerOne15attachInterruptEPFvvEl>:
  if(pin == 1 || pin == 9)       TCCR1A &= ~_BV(COM1A1);   // clear the bit that enables pwm on PB1
  else if(pin == 2 || pin == 10) TCCR1A &= ~_BV(COM1B1);   // clear the bit that enables pwm on PB2
}

void TimerOne::attachInterrupt(void (*isr)(), long microseconds)
{
    29f2:	0f 93       	push	r16
    29f4:	1f 93       	push	r17
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	ec 01       	movw	r28, r24
    29fc:	8b 01       	movw	r16, r22
    29fe:	ba 01       	movw	r22, r20
    2a00:	a9 01       	movw	r20, r18
  if(microseconds > 0) setPeriod(microseconds);
    2a02:	14 16       	cp	r1, r20
    2a04:	15 06       	cpc	r1, r21
    2a06:	16 06       	cpc	r1, r22
    2a08:	17 06       	cpc	r1, r23
    2a0a:	14 f4       	brge	.+4      	; 0x2a10 <_ZN8TimerOne15attachInterruptEPFvvEl+0x1e>
    2a0c:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN8TimerOne9setPeriodEl>
  isrCallback = isr;                                       // register the user's callback with the real ISR
    2a10:	1d 83       	std	Y+5, r17	; 0x05
    2a12:	0c 83       	std	Y+4, r16	; 0x04
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// might be running with interrupts disabled (eg inside an ISR), so don't touch the global state
//  sei();
  resume();												
    2a1a:	ce 01       	movw	r24, r28
}
    2a1c:	df 91       	pop	r29
    2a1e:	cf 91       	pop	r28
    2a20:	1f 91       	pop	r17
    2a22:	0f 91       	pop	r16
  if(microseconds > 0) setPeriod(microseconds);
  isrCallback = isr;                                       // register the user's callback with the real ISR
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
	// might be running with interrupts disabled (eg inside an ISR), so don't touch the global state
//  sei();
  resume();												
    2a24:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <_ZN8TimerOne6resumeEv>

00002a28 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2a28:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <_ZN7TwoWire14rxBufferLengthE>
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <_ZN7TwoWire13rxBufferIndexE>
    2a32:	82 1b       	sub	r24, r18
    2a34:	91 09       	sbc	r25, r1
    2a36:	08 95       	ret

00002a38 <_ZN7TwoWire4readEv>:
    2a38:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <_ZN7TwoWire13rxBufferIndexE>
    2a3c:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <_ZN7TwoWire14rxBufferLengthE>
    2a40:	98 17       	cp	r25, r24
    2a42:	50 f4       	brcc	.+20     	; 0x2a58 <_ZN7TwoWire4readEv+0x20>
    2a44:	e9 2f       	mov	r30, r25
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	e4 54       	subi	r30, 0x44	; 68
    2a4a:	fc 4f       	sbci	r31, 0xFC	; 252
    2a4c:	20 81       	ld	r18, Z
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	9f 5f       	subi	r25, 0xFF	; 255
    2a52:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <_ZN7TwoWire13rxBufferIndexE>
    2a56:	02 c0       	rjmp	.+4      	; 0x2a5c <_ZN7TwoWire4readEv+0x24>
    2a58:	2f ef       	ldi	r18, 0xFF	; 255
    2a5a:	3f ef       	ldi	r19, 0xFF	; 255
    2a5c:	c9 01       	movw	r24, r18
    2a5e:	08 95       	ret

00002a60 <_ZN7TwoWire4peekEv>:
    2a60:	e0 91 bb 03 	lds	r30, 0x03BB	; 0x8003bb <_ZN7TwoWire13rxBufferIndexE>
    2a64:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <_ZN7TwoWire14rxBufferLengthE>
    2a68:	e8 17       	cp	r30, r24
    2a6a:	30 f4       	brcc	.+12     	; 0x2a78 <_ZN7TwoWire4peekEv+0x18>
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	e4 54       	subi	r30, 0x44	; 68
    2a70:	fc 4f       	sbci	r31, 0xFC	; 252
    2a72:	80 81       	ld	r24, Z
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	08 95       	ret
    2a78:	8f ef       	ldi	r24, 0xFF	; 255
    2a7a:	9f ef       	ldi	r25, 0xFF	; 255
    2a7c:	08 95       	ret

00002a7e <_ZN7TwoWire5flushEv>:
    2a7e:	08 95       	ret

00002a80 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	ec 01       	movw	r28, r24
    2a86:	e0 91 92 03 	lds	r30, 0x0392	; 0x800392 <_ZN7TwoWire14user_onReceiveE>
    2a8a:	f0 91 93 03 	lds	r31, 0x0393	; 0x800393 <_ZN7TwoWire14user_onReceiveE+0x1>
    2a8e:	30 97       	sbiw	r30, 0x00	; 0
    2a90:	f1 f0       	breq	.+60     	; 0x2ace <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2a92:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <_ZN7TwoWire13rxBufferIndexE>
    2a96:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <_ZN7TwoWire14rxBufferLengthE>
    2a9a:	98 17       	cp	r25, r24
    2a9c:	c0 f0       	brcs	.+48     	; 0x2ace <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	29 2f       	mov	r18, r25
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	26 17       	cp	r18, r22
    2aa6:	37 07       	cpc	r19, r23
    2aa8:	54 f4       	brge	.+20     	; 0x2abe <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2aaa:	de 01       	movw	r26, r28
    2aac:	a2 0f       	add	r26, r18
    2aae:	b3 1f       	adc	r27, r19
    2ab0:	4c 91       	ld	r20, X
    2ab2:	d9 01       	movw	r26, r18
    2ab4:	a4 54       	subi	r26, 0x44	; 68
    2ab6:	bc 4f       	sbci	r27, 0xFC	; 252
    2ab8:	4c 93       	st	X, r20
    2aba:	9f 5f       	subi	r25, 0xFF	; 255
    2abc:	f1 cf       	rjmp	.-30     	; 0x2aa0 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2abe:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZN7TwoWire13rxBufferIndexE>
    2ac2:	60 93 ba 03 	sts	0x03BA, r22	; 0x8003ba <_ZN7TwoWire14rxBufferLengthE>
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	df 91       	pop	r29
    2aca:	cf 91       	pop	r28
    2acc:	09 94       	ijmp
    2ace:	df 91       	pop	r29
    2ad0:	cf 91       	pop	r28
    2ad2:	08 95       	ret

00002ad4 <_ZN7TwoWire16onRequestServiceEv>:
    2ad4:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <_ZN7TwoWire14user_onRequestE>
    2ad8:	f0 91 95 03 	lds	r31, 0x0395	; 0x800395 <_ZN7TwoWire14user_onRequestE+0x1>
    2adc:	30 97       	sbiw	r30, 0x00	; 0
    2ade:	29 f0       	breq	.+10     	; 0x2aea <_ZN7TwoWire16onRequestServiceEv+0x16>
    2ae0:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <_ZN7TwoWire13txBufferIndexE>
    2ae4:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <_ZN7TwoWire14txBufferLengthE>
    2ae8:	09 94       	ijmp
    2aea:	08 95       	ret

00002aec <_ZN7TwoWire5writeEPKhj>:
    2aec:	cf 92       	push	r12
    2aee:	df 92       	push	r13
    2af0:	ef 92       	push	r14
    2af2:	ff 92       	push	r15
    2af4:	0f 93       	push	r16
    2af6:	1f 93       	push	r17
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	7c 01       	movw	r14, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	8a 01       	movw	r16, r20
    2b02:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <_ZN7TwoWire12transmittingE>
    2b06:	22 23       	and	r18, r18
    2b08:	89 f0       	breq	.+34     	; 0x2b2c <_ZN7TwoWire5writeEPKhj+0x40>
    2b0a:	eb 01       	movw	r28, r22
    2b0c:	6b 01       	movw	r12, r22
    2b0e:	c4 0e       	add	r12, r20
    2b10:	d5 1e       	adc	r13, r21
    2b12:	cc 15       	cp	r28, r12
    2b14:	dd 05       	cpc	r29, r13
    2b16:	69 f0       	breq	.+26     	; 0x2b32 <_ZN7TwoWire5writeEPKhj+0x46>
    2b18:	69 91       	ld	r22, Y+
    2b1a:	d7 01       	movw	r26, r14
    2b1c:	ed 91       	ld	r30, X+
    2b1e:	fc 91       	ld	r31, X
    2b20:	01 90       	ld	r0, Z+
    2b22:	f0 81       	ld	r31, Z
    2b24:	e0 2d       	mov	r30, r0
    2b26:	c7 01       	movw	r24, r14
    2b28:	09 95       	icall
    2b2a:	f3 cf       	rjmp	.-26     	; 0x2b12 <_ZN7TwoWire5writeEPKhj+0x26>
    2b2c:	64 2f       	mov	r22, r20
    2b2e:	0e 94 41 17 	call	0x2e82	; 0x2e82 <twi_transmit>
    2b32:	c8 01       	movw	r24, r16
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	1f 91       	pop	r17
    2b3a:	0f 91       	pop	r16
    2b3c:	ff 90       	pop	r15
    2b3e:	ef 90       	pop	r14
    2b40:	df 90       	pop	r13
    2b42:	cf 90       	pop	r12
    2b44:	08 95       	ret

00002b46 <_ZN7TwoWire5writeEh>:
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
    2b4a:	1f 92       	push	r1
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62
    2b50:	69 83       	std	Y+1, r22	; 0x01
    2b52:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <_ZN7TwoWire12transmittingE>
    2b56:	22 23       	and	r18, r18
    2b58:	d1 f0       	breq	.+52     	; 0x2b8e <_ZN7TwoWire5writeEh+0x48>
    2b5a:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <_ZN7TwoWire14txBufferLengthE>
    2b5e:	20 32       	cpi	r18, 0x20	; 32
    2b60:	40 f0       	brcs	.+16     	; 0x2b72 <_ZN7TwoWire5writeEh+0x2c>
    2b62:	21 e0       	ldi	r18, 0x01	; 1
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	fc 01       	movw	r30, r24
    2b68:	33 83       	std	Z+3, r19	; 0x03
    2b6a:	22 83       	std	Z+2, r18	; 0x02
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	15 c0       	rjmp	.+42     	; 0x2b9c <_ZN7TwoWire5writeEh+0x56>
    2b72:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <_ZN7TwoWire13txBufferIndexE>
    2b76:	e8 2f       	mov	r30, r24
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	e7 56       	subi	r30, 0x67	; 103
    2b7c:	fc 4f       	sbci	r31, 0xFC	; 252
    2b7e:	99 81       	ldd	r25, Y+1	; 0x01
    2b80:	90 83       	st	Z, r25
    2b82:	8f 5f       	subi	r24, 0xFF	; 255
    2b84:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <_ZN7TwoWire13txBufferIndexE>
    2b88:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <_ZN7TwoWire14txBufferLengthE>
    2b8c:	05 c0       	rjmp	.+10     	; 0x2b98 <_ZN7TwoWire5writeEh+0x52>
    2b8e:	61 e0       	ldi	r22, 0x01	; 1
    2b90:	ce 01       	movw	r24, r28
    2b92:	01 96       	adiw	r24, 0x01	; 1
    2b94:	0e 94 41 17 	call	0x2e82	; 0x2e82 <twi_transmit>
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	0f 90       	pop	r0
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	08 95       	ret

00002ba4 <_ZN7TwoWireC1Ev>:
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	13 82       	std	Z+3, r1	; 0x03
    2ba8:	12 82       	std	Z+2, r1	; 0x02
    2baa:	88 ee       	ldi	r24, 0xE8	; 232
    2bac:	93 e0       	ldi	r25, 0x03	; 3
    2bae:	a0 e0       	ldi	r26, 0x00	; 0
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	84 83       	std	Z+4, r24	; 0x04
    2bb4:	95 83       	std	Z+5, r25	; 0x05
    2bb6:	a6 83       	std	Z+6, r26	; 0x06
    2bb8:	b7 83       	std	Z+7, r27	; 0x07
    2bba:	86 e4       	ldi	r24, 0x46	; 70
    2bbc:	92 e0       	ldi	r25, 0x02	; 2
    2bbe:	91 83       	std	Z+1, r25	; 0x01
    2bc0:	80 83       	st	Z, r24
    2bc2:	08 95       	ret

00002bc4 <_ZN7TwoWire5beginEv>:
    2bc4:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZN7TwoWire13rxBufferIndexE>
    2bc8:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <_ZN7TwoWire14rxBufferLengthE>
    2bcc:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <_ZN7TwoWire13txBufferIndexE>
    2bd0:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <_ZN7TwoWire14txBufferLengthE>
    2bd4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <twi_init>
    2bd8:	8a e6       	ldi	r24, 0x6A	; 106
    2bda:	95 e1       	ldi	r25, 0x15	; 21
    2bdc:	0e 94 6e 17 	call	0x2edc	; 0x2edc <twi_attachSlaveTxEvent>
    2be0:	80 e4       	ldi	r24, 0x40	; 64
    2be2:	95 e1       	ldi	r25, 0x15	; 21
    2be4:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <twi_attachSlaveRxEvent>

00002be8 <_ZN7TwoWire17beginTransmissionEh>:
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <_ZN7TwoWire12transmittingE>
    2bee:	60 93 b9 03 	sts	0x03B9, r22	; 0x8003b9 <_ZN7TwoWire9txAddressE>
    2bf2:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <_ZN7TwoWire13txBufferIndexE>
    2bf6:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <_ZN7TwoWire14txBufferLengthE>
    2bfa:	08 95       	ret

00002bfc <_ZN7TwoWire17beginTransmissionEi>:
    2bfc:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <_ZN7TwoWire17beginTransmissionEh>

00002c00 <_ZN7TwoWire15endTransmissionEh>:
    2c00:	0f 93       	push	r16
    2c02:	06 2f       	mov	r16, r22
    2c04:	21 e0       	ldi	r18, 0x01	; 1
    2c06:	40 91 97 03 	lds	r20, 0x0397	; 0x800397 <_ZN7TwoWire14txBufferLengthE>
    2c0a:	69 e9       	ldi	r22, 0x99	; 153
    2c0c:	73 e0       	ldi	r23, 0x03	; 3
    2c0e:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <_ZN7TwoWire9txAddressE>
    2c12:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <twi_writeTo>
    2c16:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <_ZN7TwoWire13txBufferIndexE>
    2c1a:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <_ZN7TwoWire14txBufferLengthE>
    2c1e:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <_ZN7TwoWire12transmittingE>
    2c22:	0f 91       	pop	r16
    2c24:	08 95       	ret

00002c26 <_ZN7TwoWire11requestFromEhhmhh>:
    2c26:	4f 92       	push	r4
    2c28:	5f 92       	push	r5
    2c2a:	6f 92       	push	r6
    2c2c:	7f 92       	push	r7
    2c2e:	af 92       	push	r10
    2c30:	bf 92       	push	r11
    2c32:	cf 92       	push	r12
    2c34:	ef 92       	push	r14
    2c36:	ff 92       	push	r15
    2c38:	0f 93       	push	r16
    2c3a:	1f 93       	push	r17
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
    2c40:	5c 01       	movw	r10, r24
    2c42:	f6 2e       	mov	r15, r22
    2c44:	d4 2f       	mov	r29, r20
    2c46:	28 01       	movw	r4, r16
    2c48:	39 01       	movw	r6, r18
    2c4a:	ee 20       	and	r14, r14
    2c4c:	21 f1       	breq	.+72     	; 0x2c96 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2c4e:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN7TwoWire17beginTransmissionEh>
    2c52:	ce 2d       	mov	r28, r14
    2c54:	c4 30       	cpi	r28, 0x04	; 4
    2c56:	08 f0       	brcs	.+2      	; 0x2c5a <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2c58:	c3 e0       	ldi	r28, 0x03	; 3
    2c5a:	c1 50       	subi	r28, 0x01	; 1
    2c5c:	c0 f0       	brcs	.+48     	; 0x2c8e <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2c5e:	28 e0       	ldi	r18, 0x08	; 8
    2c60:	c2 9f       	mul	r28, r18
    2c62:	c0 01       	movw	r24, r0
    2c64:	11 24       	eor	r1, r1
    2c66:	a3 01       	movw	r20, r6
    2c68:	92 01       	movw	r18, r4
    2c6a:	04 c0       	rjmp	.+8      	; 0x2c74 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2c6c:	56 95       	lsr	r21
    2c6e:	47 95       	ror	r20
    2c70:	37 95       	ror	r19
    2c72:	27 95       	ror	r18
    2c74:	8a 95       	dec	r24
    2c76:	d2 f7       	brpl	.-12     	; 0x2c6c <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2c78:	ca 01       	movw	r24, r20
    2c7a:	b9 01       	movw	r22, r18
    2c7c:	d5 01       	movw	r26, r10
    2c7e:	ed 91       	ld	r30, X+
    2c80:	fc 91       	ld	r31, X
    2c82:	01 90       	ld	r0, Z+
    2c84:	f0 81       	ld	r31, Z
    2c86:	e0 2d       	mov	r30, r0
    2c88:	c5 01       	movw	r24, r10
    2c8a:	09 95       	icall
    2c8c:	e6 cf       	rjmp	.-52     	; 0x2c5a <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2c8e:	60 e0       	ldi	r22, 0x00	; 0
    2c90:	c5 01       	movw	r24, r10
    2c92:	0e 94 00 16 	call	0x2c00	; 0x2c00 <_ZN7TwoWire15endTransmissionEh>
    2c96:	4d 2f       	mov	r20, r29
    2c98:	d1 32       	cpi	r29, 0x21	; 33
    2c9a:	08 f0       	brcs	.+2      	; 0x2c9e <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2c9c:	40 e2       	ldi	r20, 0x20	; 32
    2c9e:	2c 2d       	mov	r18, r12
    2ca0:	6c eb       	ldi	r22, 0xBC	; 188
    2ca2:	73 e0       	ldi	r23, 0x03	; 3
    2ca4:	8f 2d       	mov	r24, r15
    2ca6:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <twi_readFrom>
    2caa:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZN7TwoWire13rxBufferIndexE>
    2cae:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <_ZN7TwoWire14rxBufferLengthE>
    2cb2:	df 91       	pop	r29
    2cb4:	cf 91       	pop	r28
    2cb6:	1f 91       	pop	r17
    2cb8:	0f 91       	pop	r16
    2cba:	ff 90       	pop	r15
    2cbc:	ef 90       	pop	r14
    2cbe:	cf 90       	pop	r12
    2cc0:	bf 90       	pop	r11
    2cc2:	af 90       	pop	r10
    2cc4:	7f 90       	pop	r7
    2cc6:	6f 90       	pop	r6
    2cc8:	5f 90       	pop	r5
    2cca:	4f 90       	pop	r4
    2ccc:	08 95       	ret

00002cce <_ZN7TwoWire11requestFromEhhh>:
    2cce:	cf 92       	push	r12
    2cd0:	ef 92       	push	r14
    2cd2:	0f 93       	push	r16
    2cd4:	1f 93       	push	r17
    2cd6:	c2 2e       	mov	r12, r18
    2cd8:	e1 2c       	mov	r14, r1
    2cda:	00 e0       	ldi	r16, 0x00	; 0
    2cdc:	10 e0       	ldi	r17, 0x00	; 0
    2cde:	98 01       	movw	r18, r16
    2ce0:	0e 94 13 16 	call	0x2c26	; 0x2c26 <_ZN7TwoWire11requestFromEhhmhh>
    2ce4:	1f 91       	pop	r17
    2ce6:	0f 91       	pop	r16
    2ce8:	ef 90       	pop	r14
    2cea:	cf 90       	pop	r12
    2cec:	08 95       	ret

00002cee <_ZN7TwoWire11requestFromEhh>:
    2cee:	21 e0       	ldi	r18, 0x01	; 1
    2cf0:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <_ZN7TwoWire11requestFromEhhh>

00002cf4 <_ZN7TwoWire11requestFromEii>:
    2cf4:	21 e0       	ldi	r18, 0x01	; 1
    2cf6:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <_ZN7TwoWire11requestFromEhhh>

00002cfa <_ZN7TwoWire15endTransmissionEv>:
    2cfa:	61 e0       	ldi	r22, 0x01	; 1
    2cfc:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <_ZN7TwoWire15endTransmissionEh>

00002d00 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2d00:	86 e8       	ldi	r24, 0x86	; 134
    2d02:	93 e0       	ldi	r25, 0x03	; 3
    2d04:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <_ZN7TwoWireC1Ev>

00002d08 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2d08:	08 95       	ret

00002d0a <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d0a:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <twi_state>
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <twi_sendStop>
    2d14:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <twi_inRepStart>
    2d18:	61 e0       	ldi	r22, 0x01	; 1
    2d1a:	82 e1       	ldi	r24, 0x12	; 18
    2d1c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    2d20:	61 e0       	ldi	r22, 0x01	; 1
    2d22:	83 e1       	ldi	r24, 0x13	; 19
    2d24:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <digitalWrite>
    2d28:	e9 eb       	ldi	r30, 0xB9	; 185
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	8e 7f       	andi	r24, 0xFE	; 254
    2d30:	80 83       	st	Z, r24
    2d32:	80 81       	ld	r24, Z
    2d34:	8d 7f       	andi	r24, 0xFD	; 253
    2d36:	80 83       	st	Z, r24
    2d38:	88 e4       	ldi	r24, 0x48	; 72
    2d3a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2d3e:	85 e4       	ldi	r24, 0x45	; 69
    2d40:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d44:	08 95       	ret

00002d46 <twi_readFrom>:
    2d46:	41 32       	cpi	r20, 0x21	; 33
    2d48:	08 f0       	brcs	.+2      	; 0x2d4c <twi_readFrom+0x6>
    2d4a:	43 c0       	rjmp	.+134    	; 0x2dd2 <twi_readFrom+0x8c>
    2d4c:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <twi_state>
    2d50:	91 11       	cpse	r25, r1
    2d52:	fc cf       	rjmp	.-8      	; 0x2d4c <twi_readFrom+0x6>
    2d54:	91 e0       	ldi	r25, 0x01	; 1
    2d56:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <twi_state>
    2d5a:	20 93 47 04 	sts	0x0447, r18	; 0x800447 <twi_sendStop>
    2d5e:	2f ef       	ldi	r18, 0xFF	; 255
    2d60:	20 93 dc 03 	sts	0x03DC, r18	; 0x8003dc <twi_error>
    2d64:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <twi_masterBufferIndex>
    2d68:	24 0f       	add	r18, r20
    2d6a:	20 93 20 04 	sts	0x0420, r18	; 0x800420 <twi_masterBufferLength>
    2d6e:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <twi_slarw>
    2d72:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <twi_slarw>
    2d76:	88 0f       	add	r24, r24
    2d78:	89 2b       	or	r24, r25
    2d7a:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <twi_slarw>
    2d7e:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <twi_inRepStart>
    2d82:	81 30       	cpi	r24, 0x01	; 1
    2d84:	61 f4       	brne	.+24     	; 0x2d9e <twi_readFrom+0x58>
    2d86:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <twi_inRepStart>
    2d8a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <twi_slarw>
    2d8e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d92:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d96:	83 fd       	sbrc	r24, 3
    2d98:	f8 cf       	rjmp	.-16     	; 0x2d8a <twi_readFrom+0x44>
    2d9a:	85 ec       	ldi	r24, 0xC5	; 197
    2d9c:	01 c0       	rjmp	.+2      	; 0x2da0 <twi_readFrom+0x5a>
    2d9e:	85 ee       	ldi	r24, 0xE5	; 229
    2da0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2da4:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <twi_state>
    2da8:	81 30       	cpi	r24, 0x01	; 1
    2daa:	e1 f3       	breq	.-8      	; 0x2da4 <twi_readFrom+0x5e>
    2dac:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <twi_masterBufferIndex>
    2db0:	84 17       	cp	r24, r20
    2db2:	10 f4       	brcc	.+4      	; 0x2db8 <twi_readFrom+0x72>
    2db4:	40 91 21 04 	lds	r20, 0x0421	; 0x800421 <twi_masterBufferIndex>
    2db8:	a2 e2       	ldi	r26, 0x22	; 34
    2dba:	b4 e0       	ldi	r27, 0x04	; 4
    2dbc:	96 2f       	mov	r25, r22
    2dbe:	fb 01       	movw	r30, r22
    2dc0:	8e 2f       	mov	r24, r30
    2dc2:	89 1b       	sub	r24, r25
    2dc4:	84 17       	cp	r24, r20
    2dc6:	18 f4       	brcc	.+6      	; 0x2dce <twi_readFrom+0x88>
    2dc8:	8d 91       	ld	r24, X+
    2dca:	81 93       	st	Z+, r24
    2dcc:	f9 cf       	rjmp	.-14     	; 0x2dc0 <twi_readFrom+0x7a>
    2dce:	84 2f       	mov	r24, r20
    2dd0:	08 95       	ret
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	08 95       	ret

00002dd6 <twi_writeTo>:
    2dd6:	0f 93       	push	r16
    2dd8:	41 32       	cpi	r20, 0x21	; 33
    2dda:	08 f0       	brcs	.+2      	; 0x2dde <twi_writeTo+0x8>
    2ddc:	4a c0       	rjmp	.+148    	; 0x2e72 <twi_writeTo+0x9c>
    2dde:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <twi_state>
    2de2:	91 11       	cpse	r25, r1
    2de4:	fc cf       	rjmp	.-8      	; 0x2dde <twi_writeTo+0x8>
    2de6:	32 e0       	ldi	r19, 0x02	; 2
    2de8:	30 93 49 04 	sts	0x0449, r19	; 0x800449 <twi_state>
    2dec:	00 93 47 04 	sts	0x0447, r16	; 0x800447 <twi_sendStop>
    2df0:	3f ef       	ldi	r19, 0xFF	; 255
    2df2:	30 93 dc 03 	sts	0x03DC, r19	; 0x8003dc <twi_error>
    2df6:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <twi_masterBufferIndex>
    2dfa:	40 93 20 04 	sts	0x0420, r20	; 0x800420 <twi_masterBufferLength>
    2dfe:	56 2f       	mov	r21, r22
    2e00:	a2 e2       	ldi	r26, 0x22	; 34
    2e02:	b4 e0       	ldi	r27, 0x04	; 4
    2e04:	fb 01       	movw	r30, r22
    2e06:	3e 2f       	mov	r19, r30
    2e08:	35 1b       	sub	r19, r21
    2e0a:	34 17       	cp	r19, r20
    2e0c:	18 f4       	brcc	.+6      	; 0x2e14 <twi_writeTo+0x3e>
    2e0e:	31 91       	ld	r19, Z+
    2e10:	3d 93       	st	X+, r19
    2e12:	f9 cf       	rjmp	.-14     	; 0x2e06 <twi_writeTo+0x30>
    2e14:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <twi_slarw>
    2e18:	30 91 48 04 	lds	r19, 0x0448	; 0x800448 <twi_slarw>
    2e1c:	88 0f       	add	r24, r24
    2e1e:	83 2b       	or	r24, r19
    2e20:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <twi_slarw>
    2e24:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <twi_inRepStart>
    2e28:	81 30       	cpi	r24, 0x01	; 1
    2e2a:	61 f4       	brne	.+24     	; 0x2e44 <twi_writeTo+0x6e>
    2e2c:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <twi_inRepStart>
    2e30:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <twi_slarw>
    2e34:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2e38:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e3c:	83 fd       	sbrc	r24, 3
    2e3e:	f8 cf       	rjmp	.-16     	; 0x2e30 <twi_writeTo+0x5a>
    2e40:	85 ec       	ldi	r24, 0xC5	; 197
    2e42:	01 c0       	rjmp	.+2      	; 0x2e46 <twi_writeTo+0x70>
    2e44:	85 ee       	ldi	r24, 0xE5	; 229
    2e46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e4a:	22 23       	and	r18, r18
    2e4c:	21 f0       	breq	.+8      	; 0x2e56 <twi_writeTo+0x80>
    2e4e:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <twi_state>
    2e52:	82 30       	cpi	r24, 0x02	; 2
    2e54:	d1 f3       	breq	.-12     	; 0x2e4a <twi_writeTo+0x74>
    2e56:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <twi_error>
    2e5a:	8f 3f       	cpi	r24, 0xFF	; 255
    2e5c:	79 f0       	breq	.+30     	; 0x2e7c <twi_writeTo+0xa6>
    2e5e:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <twi_error>
    2e62:	80 32       	cpi	r24, 0x20	; 32
    2e64:	41 f0       	breq	.+16     	; 0x2e76 <twi_writeTo+0xa0>
    2e66:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <twi_error>
    2e6a:	80 33       	cpi	r24, 0x30	; 48
    2e6c:	31 f0       	breq	.+12     	; 0x2e7a <twi_writeTo+0xa4>
    2e6e:	94 e0       	ldi	r25, 0x04	; 4
    2e70:	05 c0       	rjmp	.+10     	; 0x2e7c <twi_writeTo+0xa6>
    2e72:	91 e0       	ldi	r25, 0x01	; 1
    2e74:	03 c0       	rjmp	.+6      	; 0x2e7c <twi_writeTo+0xa6>
    2e76:	92 e0       	ldi	r25, 0x02	; 2
    2e78:	01 c0       	rjmp	.+2      	; 0x2e7c <twi_writeTo+0xa6>
    2e7a:	93 e0       	ldi	r25, 0x03	; 3
    2e7c:	89 2f       	mov	r24, r25
    2e7e:	0f 91       	pop	r16
    2e80:	08 95       	ret

00002e82 <twi_transmit>:
    2e82:	40 91 fe 03 	lds	r20, 0x03FE	; 0x8003fe <twi_txBufferLength>
    2e86:	26 2f       	mov	r18, r22
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	24 0f       	add	r18, r20
    2e8c:	31 1d       	adc	r19, r1
    2e8e:	21 32       	cpi	r18, 0x21	; 33
    2e90:	31 05       	cpc	r19, r1
    2e92:	dc f4       	brge	.+54     	; 0x2eca <twi_transmit+0x48>
    2e94:	20 91 49 04 	lds	r18, 0x0449	; 0x800449 <twi_state>
    2e98:	24 30       	cpi	r18, 0x04	; 4
    2e9a:	c9 f4       	brne	.+50     	; 0x2ece <twi_transmit+0x4c>
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	86 17       	cp	r24, r22
    2ea4:	58 f4       	brcc	.+22     	; 0x2ebc <twi_transmit+0x3a>
    2ea6:	30 91 fe 03 	lds	r19, 0x03FE	; 0x8003fe <twi_txBufferLength>
    2eaa:	21 91       	ld	r18, Z+
    2eac:	dc 01       	movw	r26, r24
    2eae:	a0 50       	subi	r26, 0x00	; 0
    2eb0:	bc 4f       	sbci	r27, 0xFC	; 252
    2eb2:	a3 0f       	add	r26, r19
    2eb4:	b1 1d       	adc	r27, r1
    2eb6:	2c 93       	st	X, r18
    2eb8:	01 96       	adiw	r24, 0x01	; 1
    2eba:	f3 cf       	rjmp	.-26     	; 0x2ea2 <twi_transmit+0x20>
    2ebc:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <twi_txBufferLength>
    2ec0:	68 0f       	add	r22, r24
    2ec2:	60 93 fe 03 	sts	0x03FE, r22	; 0x8003fe <twi_txBufferLength>
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	08 95       	ret
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	08 95       	ret
    2ece:	82 e0       	ldi	r24, 0x02	; 2
    2ed0:	08 95       	ret

00002ed2 <twi_attachSlaveRxEvent>:
    2ed2:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <twi_onSlaveReceive+0x1>
    2ed6:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <twi_onSlaveReceive>
    2eda:	08 95       	ret

00002edc <twi_attachSlaveTxEvent>:
    2edc:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <twi_onSlaveTransmit+0x1>
    2ee0:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_onSlaveTransmit>
    2ee4:	08 95       	ret

00002ee6 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2ee6:	85 ed       	ldi	r24, 0xD5	; 213
    2ee8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2eec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2ef0:	84 fd       	sbrc	r24, 4
    2ef2:	fc cf       	rjmp	.-8      	; 0x2eec <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2ef4:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <twi_state>
    2ef8:	08 95       	ret

00002efa <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2efa:	85 ec       	ldi	r24, 0xC5	; 197
    2efc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2f00:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <twi_state>
    2f04:	08 95       	ret

00002f06 <__vector_24>:
}

ISR(TWI_vect)
{
    2f06:	1f 92       	push	r1
    2f08:	0f 92       	push	r0
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	0f 92       	push	r0
    2f0e:	11 24       	eor	r1, r1
    2f10:	2f 93       	push	r18
    2f12:	3f 93       	push	r19
    2f14:	4f 93       	push	r20
    2f16:	5f 93       	push	r21
    2f18:	6f 93       	push	r22
    2f1a:	7f 93       	push	r23
    2f1c:	8f 93       	push	r24
    2f1e:	9f 93       	push	r25
    2f20:	af 93       	push	r26
    2f22:	bf 93       	push	r27
    2f24:	ef 93       	push	r30
    2f26:	ff 93       	push	r31
  switch(TW_STATUS){
    2f28:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2f2c:	88 7f       	andi	r24, 0xF8	; 248
    2f2e:	80 36       	cpi	r24, 0x60	; 96
    2f30:	09 f4       	brne	.+2      	; 0x2f34 <__vector_24+0x2e>
    2f32:	9e c0       	rjmp	.+316    	; 0x3070 <__vector_24+0x16a>
    2f34:	78 f5       	brcc	.+94     	; 0x2f94 <__vector_24+0x8e>
    2f36:	88 32       	cpi	r24, 0x28	; 40
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <__vector_24+0x36>
    2f3a:	5d c0       	rjmp	.+186    	; 0x2ff6 <__vector_24+0xf0>
    2f3c:	90 f4       	brcc	.+36     	; 0x2f62 <__vector_24+0x5c>
    2f3e:	80 31       	cpi	r24, 0x10	; 16
    2f40:	09 f4       	brne	.+2      	; 0x2f44 <__vector_24+0x3e>
    2f42:	56 c0       	rjmp	.+172    	; 0x2ff0 <__vector_24+0xea>
    2f44:	38 f4       	brcc	.+14     	; 0x2f54 <__vector_24+0x4e>
    2f46:	88 23       	and	r24, r24
    2f48:	09 f4       	brne	.+2      	; 0x2f4c <__vector_24+0x46>
    2f4a:	f5 c0       	rjmp	.+490    	; 0x3136 <__vector_24+0x230>
    2f4c:	88 30       	cpi	r24, 0x08	; 8
    2f4e:	09 f4       	brne	.+2      	; 0x2f52 <__vector_24+0x4c>
    2f50:	4f c0       	rjmp	.+158    	; 0x2ff0 <__vector_24+0xea>
    2f52:	f5 c0       	rjmp	.+490    	; 0x313e <__vector_24+0x238>
    2f54:	88 31       	cpi	r24, 0x18	; 24
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <__vector_24+0x54>
    2f58:	4e c0       	rjmp	.+156    	; 0x2ff6 <__vector_24+0xf0>
    2f5a:	80 32       	cpi	r24, 0x20	; 32
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <__vector_24+0x5a>
    2f5e:	5f c0       	rjmp	.+190    	; 0x301e <__vector_24+0x118>
    2f60:	ee c0       	rjmp	.+476    	; 0x313e <__vector_24+0x238>
    2f62:	80 34       	cpi	r24, 0x40	; 64
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <__vector_24+0x62>
    2f66:	6a c0       	rjmp	.+212    	; 0x303c <__vector_24+0x136>
    2f68:	58 f4       	brcc	.+22     	; 0x2f80 <__vector_24+0x7a>
    2f6a:	80 33       	cpi	r24, 0x30	; 48
    2f6c:	09 f4       	brne	.+2      	; 0x2f70 <__vector_24+0x6a>
    2f6e:	57 c0       	rjmp	.+174    	; 0x301e <__vector_24+0x118>
    2f70:	88 33       	cpi	r24, 0x38	; 56
    2f72:	09 f0       	breq	.+2      	; 0x2f76 <__vector_24+0x70>
    2f74:	e4 c0       	rjmp	.+456    	; 0x313e <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2f76:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <twi_error>
      twi_releaseBus();
    2f7a:	0e 94 7d 17 	call	0x2efa	; 0x2efa <twi_releaseBus>
      break;
    2f7e:	df c0       	rjmp	.+446    	; 0x313e <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f80:	80 35       	cpi	r24, 0x50	; 80
    2f82:	09 f4       	brne	.+2      	; 0x2f86 <__vector_24+0x80>
    2f84:	4f c0       	rjmp	.+158    	; 0x3024 <__vector_24+0x11e>
    2f86:	88 35       	cpi	r24, 0x58	; 88
    2f88:	09 f4       	brne	.+2      	; 0x2f8c <__vector_24+0x86>
    2f8a:	5d c0       	rjmp	.+186    	; 0x3046 <__vector_24+0x140>
    2f8c:	88 34       	cpi	r24, 0x48	; 72
    2f8e:	09 f0       	breq	.+2      	; 0x2f92 <__vector_24+0x8c>
    2f90:	d6 c0       	rjmp	.+428    	; 0x313e <__vector_24+0x238>
    2f92:	d3 c0       	rjmp	.+422    	; 0x313a <__vector_24+0x234>
    2f94:	88 39       	cpi	r24, 0x98	; 152
    2f96:	09 f4       	brne	.+2      	; 0x2f9a <__vector_24+0x94>
    2f98:	c4 c0       	rjmp	.+392    	; 0x3122 <__vector_24+0x21c>
    2f9a:	a8 f4       	brcc	.+42     	; 0x2fc6 <__vector_24+0xc0>
    2f9c:	88 37       	cpi	r24, 0x78	; 120
    2f9e:	09 f4       	brne	.+2      	; 0x2fa2 <__vector_24+0x9c>
    2fa0:	67 c0       	rjmp	.+206    	; 0x3070 <__vector_24+0x16a>
    2fa2:	38 f4       	brcc	.+14     	; 0x2fb2 <__vector_24+0xac>
    2fa4:	88 36       	cpi	r24, 0x68	; 104
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <__vector_24+0xa4>
    2fa8:	63 c0       	rjmp	.+198    	; 0x3070 <__vector_24+0x16a>
    2faa:	80 37       	cpi	r24, 0x70	; 112
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <__vector_24+0xaa>
    2fae:	60 c0       	rjmp	.+192    	; 0x3070 <__vector_24+0x16a>
    2fb0:	c6 c0       	rjmp	.+396    	; 0x313e <__vector_24+0x238>
    2fb2:	88 38       	cpi	r24, 0x88	; 136
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <__vector_24+0xb2>
    2fb6:	b5 c0       	rjmp	.+362    	; 0x3122 <__vector_24+0x21c>
    2fb8:	80 39       	cpi	r24, 0x90	; 144
    2fba:	09 f4       	brne	.+2      	; 0x2fbe <__vector_24+0xb8>
    2fbc:	5f c0       	rjmp	.+190    	; 0x307c <__vector_24+0x176>
    2fbe:	80 38       	cpi	r24, 0x80	; 128
    2fc0:	09 f0       	breq	.+2      	; 0x2fc4 <__vector_24+0xbe>
    2fc2:	bd c0       	rjmp	.+378    	; 0x313e <__vector_24+0x238>
    2fc4:	5b c0       	rjmp	.+182    	; 0x307c <__vector_24+0x176>
    2fc6:	80 3b       	cpi	r24, 0xB0	; 176
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <__vector_24+0xc6>
    2fca:	83 c0       	rjmp	.+262    	; 0x30d2 <__vector_24+0x1cc>
    2fcc:	38 f4       	brcc	.+14     	; 0x2fdc <__vector_24+0xd6>
    2fce:	80 3a       	cpi	r24, 0xA0	; 160
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <__vector_24+0xce>
    2fd2:	66 c0       	rjmp	.+204    	; 0x30a0 <__vector_24+0x19a>
    2fd4:	88 3a       	cpi	r24, 0xA8	; 168
    2fd6:	09 f4       	brne	.+2      	; 0x2fda <__vector_24+0xd4>
    2fd8:	7c c0       	rjmp	.+248    	; 0x30d2 <__vector_24+0x1cc>
    2fda:	b1 c0       	rjmp	.+354    	; 0x313e <__vector_24+0x238>
    2fdc:	80 3c       	cpi	r24, 0xC0	; 192
    2fde:	09 f4       	brne	.+2      	; 0x2fe2 <__vector_24+0xdc>
    2fe0:	a4 c0       	rjmp	.+328    	; 0x312a <__vector_24+0x224>
    2fe2:	88 3c       	cpi	r24, 0xC8	; 200
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <__vector_24+0xe2>
    2fe6:	a1 c0       	rjmp	.+322    	; 0x312a <__vector_24+0x224>
    2fe8:	88 3b       	cpi	r24, 0xB8	; 184
    2fea:	09 f4       	brne	.+2      	; 0x2fee <__vector_24+0xe8>
    2fec:	87 c0       	rjmp	.+270    	; 0x30fc <__vector_24+0x1f6>
    2fee:	a7 c0       	rjmp	.+334    	; 0x313e <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2ff0:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <twi_slarw>
    2ff4:	10 c0       	rjmp	.+32     	; 0x3016 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2ff6:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <twi_masterBufferIndex>
    2ffa:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <twi_masterBufferLength>
    2ffe:	98 17       	cp	r25, r24
    3000:	70 f5       	brcc	.+92     	; 0x305e <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3002:	e0 91 21 04 	lds	r30, 0x0421	; 0x800421 <twi_masterBufferIndex>
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	8e 0f       	add	r24, r30
    300a:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <twi_masterBufferIndex>
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	ee 5d       	subi	r30, 0xDE	; 222
    3012:	fb 4f       	sbci	r31, 0xFB	; 251
    3014:	80 81       	ld	r24, Z
    3016:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    301a:	85 ec       	ldi	r24, 0xC5	; 197
    301c:	83 c0       	rjmp	.+262    	; 0x3124 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    301e:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <twi_error>
    3022:	8b c0       	rjmp	.+278    	; 0x313a <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3024:	e0 91 21 04 	lds	r30, 0x0421	; 0x800421 <twi_masterBufferIndex>
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	8e 0f       	add	r24, r30
    302c:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <twi_masterBufferIndex>
    3030:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	ee 5d       	subi	r30, 0xDE	; 222
    3038:	fb 4f       	sbci	r31, 0xFB	; 251
    303a:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    303c:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <twi_masterBufferIndex>
    3040:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <twi_masterBufferLength>
    3044:	6b c0       	rjmp	.+214    	; 0x311c <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3046:	e0 91 21 04 	lds	r30, 0x0421	; 0x800421 <twi_masterBufferIndex>
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	8e 0f       	add	r24, r30
    304e:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <twi_masterBufferIndex>
    3052:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	ee 5d       	subi	r30, 0xDE	; 222
    305a:	fb 4f       	sbci	r31, 0xFB	; 251
    305c:	80 83       	st	Z, r24
	if (twi_sendStop)
    305e:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <twi_sendStop>
    3062:	81 11       	cpse	r24, r1
    3064:	6a c0       	rjmp	.+212    	; 0x313a <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    306c:	84 ea       	ldi	r24, 0xA4	; 164
    306e:	5e c0       	rjmp	.+188    	; 0x312c <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3070:	83 e0       	ldi	r24, 0x03	; 3
    3072:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3076:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <twi_rxBufferIndex>
    307a:	cf cf       	rjmp	.-98     	; 0x301a <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    307c:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <twi_rxBufferIndex>
    3080:	80 32       	cpi	r24, 0x20	; 32
    3082:	08 f0       	brcs	.+2      	; 0x3086 <__vector_24+0x180>
    3084:	4e c0       	rjmp	.+156    	; 0x3122 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3086:	e0 91 dd 03 	lds	r30, 0x03DD	; 0x8003dd <twi_rxBufferIndex>
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	8e 0f       	add	r24, r30
    308e:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <twi_rxBufferIndex>
    3092:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	e2 52       	subi	r30, 0x22	; 34
    309a:	fc 4f       	sbci	r31, 0xFC	; 252
    309c:	80 83       	st	Z, r24
    309e:	bd cf       	rjmp	.-134    	; 0x301a <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    30a0:	0e 94 7d 17 	call	0x2efa	; 0x2efa <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    30a4:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <twi_rxBufferIndex>
    30a8:	80 32       	cpi	r24, 0x20	; 32
    30aa:	30 f4       	brcc	.+12     	; 0x30b8 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    30ac:	e0 91 dd 03 	lds	r30, 0x03DD	; 0x8003dd <twi_rxBufferIndex>
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	e2 52       	subi	r30, 0x22	; 34
    30b4:	fc 4f       	sbci	r31, 0xFC	; 252
    30b6:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    30b8:	60 91 dd 03 	lds	r22, 0x03DD	; 0x8003dd <twi_rxBufferIndex>
    30bc:	70 e0       	ldi	r23, 0x00	; 0
    30be:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <twi_onSlaveReceive>
    30c2:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <twi_onSlaveReceive+0x1>
    30c6:	8e ed       	ldi	r24, 0xDE	; 222
    30c8:	93 e0       	ldi	r25, 0x03	; 3
    30ca:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    30cc:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <twi_rxBufferIndex>
      break;
    30d0:	36 c0       	rjmp	.+108    	; 0x313e <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    30d2:	84 e0       	ldi	r24, 0x04	; 4
    30d4:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    30d8:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    30dc:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    30e0:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <twi_onSlaveTransmit>
    30e4:	f0 91 45 04 	lds	r31, 0x0445	; 0x800445 <twi_onSlaveTransmit+0x1>
    30e8:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    30ea:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <twi_txBufferLength>
    30ee:	81 11       	cpse	r24, r1
    30f0:	05 c0       	rjmp	.+10     	; 0x30fc <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    30f8:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    30fc:	e0 91 ff 03 	lds	r30, 0x03FF	; 0x8003ff <twi_txBufferIndex>
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	8e 0f       	add	r24, r30
    3104:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <twi_txBufferIndex>
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	e0 50       	subi	r30, 0x00	; 0
    310c:	fc 4f       	sbci	r31, 0xFC	; 252
    310e:	80 81       	ld	r24, Z
    3110:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3114:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <twi_txBufferIndex>
    3118:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <twi_txBufferLength>
    311c:	98 17       	cp	r25, r24
    311e:	08 f4       	brcc	.+2      	; 0x3122 <__vector_24+0x21c>
    3120:	7c cf       	rjmp	.-264    	; 0x301a <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3122:	85 e8       	ldi	r24, 0x85	; 133
    3124:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3128:	0a c0       	rjmp	.+20     	; 0x313e <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    312a:	85 ec       	ldi	r24, 0xC5	; 197
    312c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3130:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <twi_state>
      break;
    3134:	04 c0       	rjmp	.+8      	; 0x313e <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3136:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <twi_error>
      twi_stop();
    313a:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <twi_stop>
      break;
  }
}
    313e:	ff 91       	pop	r31
    3140:	ef 91       	pop	r30
    3142:	bf 91       	pop	r27
    3144:	af 91       	pop	r26
    3146:	9f 91       	pop	r25
    3148:	8f 91       	pop	r24
    314a:	7f 91       	pop	r23
    314c:	6f 91       	pop	r22
    314e:	5f 91       	pop	r21
    3150:	4f 91       	pop	r20
    3152:	3f 91       	pop	r19
    3154:	2f 91       	pop	r18
    3156:	0f 90       	pop	r0
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	0f 90       	pop	r0
    315c:	1f 90       	pop	r1
    315e:	18 95       	reti

00003160 <__fixunssfsi>:
    3160:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_splitA>
    3164:	88 f0       	brcs	.+34     	; 0x3188 <__fixunssfsi+0x28>
    3166:	9f 57       	subi	r25, 0x7F	; 127
    3168:	98 f0       	brcs	.+38     	; 0x3190 <__fixunssfsi+0x30>
    316a:	b9 2f       	mov	r27, r25
    316c:	99 27       	eor	r25, r25
    316e:	b7 51       	subi	r27, 0x17	; 23
    3170:	b0 f0       	brcs	.+44     	; 0x319e <__fixunssfsi+0x3e>
    3172:	e1 f0       	breq	.+56     	; 0x31ac <__fixunssfsi+0x4c>
    3174:	66 0f       	add	r22, r22
    3176:	77 1f       	adc	r23, r23
    3178:	88 1f       	adc	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	1a f0       	brmi	.+6      	; 0x3184 <__fixunssfsi+0x24>
    317e:	ba 95       	dec	r27
    3180:	c9 f7       	brne	.-14     	; 0x3174 <__fixunssfsi+0x14>
    3182:	14 c0       	rjmp	.+40     	; 0x31ac <__fixunssfsi+0x4c>
    3184:	b1 30       	cpi	r27, 0x01	; 1
    3186:	91 f0       	breq	.+36     	; 0x31ac <__fixunssfsi+0x4c>
    3188:	0e 94 de 04 	call	0x9bc	; 0x9bc <__fp_zero>
    318c:	b1 e0       	ldi	r27, 0x01	; 1
    318e:	08 95       	ret
    3190:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_zero>
    3194:	67 2f       	mov	r22, r23
    3196:	78 2f       	mov	r23, r24
    3198:	88 27       	eor	r24, r24
    319a:	b8 5f       	subi	r27, 0xF8	; 248
    319c:	39 f0       	breq	.+14     	; 0x31ac <__fixunssfsi+0x4c>
    319e:	b9 3f       	cpi	r27, 0xF9	; 249
    31a0:	cc f3       	brlt	.-14     	; 0x3194 <__fixunssfsi+0x34>
    31a2:	86 95       	lsr	r24
    31a4:	77 95       	ror	r23
    31a6:	67 95       	ror	r22
    31a8:	b3 95       	inc	r27
    31aa:	d9 f7       	brne	.-10     	; 0x31a2 <__fixunssfsi+0x42>
    31ac:	3e f4       	brtc	.+14     	; 0x31bc <__fixunssfsi+0x5c>
    31ae:	90 95       	com	r25
    31b0:	80 95       	com	r24
    31b2:	70 95       	com	r23
    31b4:	61 95       	neg	r22
    31b6:	7f 4f       	sbci	r23, 0xFF	; 255
    31b8:	8f 4f       	sbci	r24, 0xFF	; 255
    31ba:	9f 4f       	sbci	r25, 0xFF	; 255
    31bc:	08 95       	ret

000031be <__floatdisf>:
    31be:	97 fb       	bst	r25, 7
    31c0:	16 f4       	brtc	.+4      	; 0x31c6 <__floatdisf+0x8>
    31c2:	0e 94 23 19 	call	0x3246	; 0x3246 <__fp_negdi>
    31c6:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <__fp_di2sf>

000031ca <__floatundisf>:
    31ca:	e8 94       	clt

000031cc <__fp_di2sf>:
    31cc:	f9 2f       	mov	r31, r25
    31ce:	96 eb       	ldi	r25, 0xB6	; 182
    31d0:	ff 23       	and	r31, r31
    31d2:	81 f0       	breq	.+32     	; 0x31f4 <__fp_di2sf+0x28>
    31d4:	12 16       	cp	r1, r18
    31d6:	13 06       	cpc	r1, r19
    31d8:	14 06       	cpc	r1, r20
    31da:	44 0b       	sbc	r20, r20
    31dc:	93 95       	inc	r25
    31de:	f6 95       	lsr	r31
    31e0:	87 95       	ror	r24
    31e2:	77 95       	ror	r23
    31e4:	67 95       	ror	r22
    31e6:	57 95       	ror	r21
    31e8:	40 40       	sbci	r20, 0x00	; 0
    31ea:	ff 23       	and	r31, r31
    31ec:	b9 f7       	brne	.-18     	; 0x31dc <__fp_di2sf+0x10>
    31ee:	1b c0       	rjmp	.+54     	; 0x3226 <__fp_di2sf+0x5a>
    31f0:	99 27       	eor	r25, r25
    31f2:	08 95       	ret
    31f4:	88 23       	and	r24, r24
    31f6:	51 f4       	brne	.+20     	; 0x320c <__fp_di2sf+0x40>
    31f8:	98 50       	subi	r25, 0x08	; 8
    31fa:	d2 f7       	brpl	.-12     	; 0x31f0 <__fp_di2sf+0x24>
    31fc:	87 2b       	or	r24, r23
    31fe:	76 2f       	mov	r23, r22
    3200:	65 2f       	mov	r22, r21
    3202:	54 2f       	mov	r21, r20
    3204:	43 2f       	mov	r20, r19
    3206:	32 2f       	mov	r19, r18
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	b1 f3       	breq	.-20     	; 0x31f8 <__fp_di2sf+0x2c>
    320c:	12 16       	cp	r1, r18
    320e:	13 06       	cpc	r1, r19
    3210:	14 06       	cpc	r1, r20
    3212:	44 0b       	sbc	r20, r20
    3214:	88 23       	and	r24, r24
    3216:	3a f0       	brmi	.+14     	; 0x3226 <__fp_di2sf+0x5a>
    3218:	9a 95       	dec	r25
    321a:	44 0f       	add	r20, r20
    321c:	55 1f       	adc	r21, r21
    321e:	66 1f       	adc	r22, r22
    3220:	77 1f       	adc	r23, r23
    3222:	88 1f       	adc	r24, r24
    3224:	ca f7       	brpl	.-14     	; 0x3218 <__fp_di2sf+0x4c>
    3226:	55 23       	and	r21, r21
    3228:	4a f4       	brpl	.+18     	; 0x323c <__fp_di2sf+0x70>
    322a:	44 0f       	add	r20, r20
    322c:	55 1f       	adc	r21, r21
    322e:	11 f4       	brne	.+4      	; 0x3234 <__fp_di2sf+0x68>
    3230:	60 ff       	sbrs	r22, 0
    3232:	04 c0       	rjmp	.+8      	; 0x323c <__fp_di2sf+0x70>
    3234:	6f 5f       	subi	r22, 0xFF	; 255
    3236:	7f 4f       	sbci	r23, 0xFF	; 255
    3238:	8f 4f       	sbci	r24, 0xFF	; 255
    323a:	9f 4f       	sbci	r25, 0xFF	; 255
    323c:	88 0f       	add	r24, r24
    323e:	96 95       	lsr	r25
    3240:	87 95       	ror	r24
    3242:	97 f9       	bld	r25, 7
    3244:	08 95       	ret

00003246 <__fp_negdi>:
    3246:	90 95       	com	r25
    3248:	80 95       	com	r24
    324a:	70 95       	com	r23
    324c:	60 95       	com	r22
    324e:	50 95       	com	r21
    3250:	40 95       	com	r20
    3252:	30 95       	com	r19
    3254:	21 95       	neg	r18
    3256:	3f 4f       	sbci	r19, 0xFF	; 255
    3258:	4f 4f       	sbci	r20, 0xFF	; 255
    325a:	5f 4f       	sbci	r21, 0xFF	; 255
    325c:	6f 4f       	sbci	r22, 0xFF	; 255
    325e:	7f 4f       	sbci	r23, 0xFF	; 255
    3260:	8f 4f       	sbci	r24, 0xFF	; 255
    3262:	9f 4f       	sbci	r25, 0xFF	; 255
    3264:	08 95       	ret

00003266 <__gesf2>:
    3266:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__fp_cmp>
    326a:	08 f4       	brcc	.+2      	; 0x326e <__gesf2+0x8>
    326c:	8f ef       	ldi	r24, 0xFF	; 255
    326e:	08 95       	ret

00003270 <__unordsf2>:
    3270:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__fp_cmp>
    3274:	88 0b       	sbc	r24, r24
    3276:	99 0b       	sbc	r25, r25
    3278:	08 95       	ret

0000327a <__mulsi3>:
    327a:	db 01       	movw	r26, r22
    327c:	8f 93       	push	r24
    327e:	9f 93       	push	r25
    3280:	0e 94 6f 19 	call	0x32de	; 0x32de <__muluhisi3>
    3284:	bf 91       	pop	r27
    3286:	af 91       	pop	r26
    3288:	a2 9f       	mul	r26, r18
    328a:	80 0d       	add	r24, r0
    328c:	91 1d       	adc	r25, r1
    328e:	a3 9f       	mul	r26, r19
    3290:	90 0d       	add	r25, r0
    3292:	b2 9f       	mul	r27, r18
    3294:	90 0d       	add	r25, r0
    3296:	11 24       	eor	r1, r1
    3298:	08 95       	ret

0000329a <__udivmodsi4>:
    329a:	a1 e2       	ldi	r26, 0x21	; 33
    329c:	1a 2e       	mov	r1, r26
    329e:	aa 1b       	sub	r26, r26
    32a0:	bb 1b       	sub	r27, r27
    32a2:	fd 01       	movw	r30, r26
    32a4:	0d c0       	rjmp	.+26     	; 0x32c0 <__udivmodsi4_ep>

000032a6 <__udivmodsi4_loop>:
    32a6:	aa 1f       	adc	r26, r26
    32a8:	bb 1f       	adc	r27, r27
    32aa:	ee 1f       	adc	r30, r30
    32ac:	ff 1f       	adc	r31, r31
    32ae:	a2 17       	cp	r26, r18
    32b0:	b3 07       	cpc	r27, r19
    32b2:	e4 07       	cpc	r30, r20
    32b4:	f5 07       	cpc	r31, r21
    32b6:	20 f0       	brcs	.+8      	; 0x32c0 <__udivmodsi4_ep>
    32b8:	a2 1b       	sub	r26, r18
    32ba:	b3 0b       	sbc	r27, r19
    32bc:	e4 0b       	sbc	r30, r20
    32be:	f5 0b       	sbc	r31, r21

000032c0 <__udivmodsi4_ep>:
    32c0:	66 1f       	adc	r22, r22
    32c2:	77 1f       	adc	r23, r23
    32c4:	88 1f       	adc	r24, r24
    32c6:	99 1f       	adc	r25, r25
    32c8:	1a 94       	dec	r1
    32ca:	69 f7       	brne	.-38     	; 0x32a6 <__udivmodsi4_loop>
    32cc:	60 95       	com	r22
    32ce:	70 95       	com	r23
    32d0:	80 95       	com	r24
    32d2:	90 95       	com	r25
    32d4:	9b 01       	movw	r18, r22
    32d6:	ac 01       	movw	r20, r24
    32d8:	bd 01       	movw	r22, r26
    32da:	cf 01       	movw	r24, r30
    32dc:	08 95       	ret

000032de <__muluhisi3>:
    32de:	0e 94 0d 1b 	call	0x361a	; 0x361a <__umulhisi3>
    32e2:	a5 9f       	mul	r26, r21
    32e4:	90 0d       	add	r25, r0
    32e6:	b4 9f       	mul	r27, r20
    32e8:	90 0d       	add	r25, r0
    32ea:	a4 9f       	mul	r26, r20
    32ec:	80 0d       	add	r24, r0
    32ee:	91 1d       	adc	r25, r1
    32f0:	11 24       	eor	r1, r1
    32f2:	08 95       	ret

000032f4 <__mulshisi3>:
    32f4:	b7 ff       	sbrs	r27, 7
    32f6:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__muluhisi3>

000032fa <__mulohisi3>:
    32fa:	0e 94 6f 19 	call	0x32de	; 0x32de <__muluhisi3>
    32fe:	82 1b       	sub	r24, r18
    3300:	93 0b       	sbc	r25, r19
    3302:	08 95       	ret

00003304 <__muldi3>:
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	1f 93       	push	r17
    330a:	0f 93       	push	r16
    330c:	9a 9d       	mul	r25, r10
    330e:	f0 2d       	mov	r31, r0
    3310:	21 9f       	mul	r18, r17
    3312:	f0 0d       	add	r31, r0
    3314:	8b 9d       	mul	r24, r11
    3316:	f0 0d       	add	r31, r0
    3318:	8a 9d       	mul	r24, r10
    331a:	e0 2d       	mov	r30, r0
    331c:	f1 0d       	add	r31, r1
    331e:	03 9f       	mul	r16, r19
    3320:	f0 0d       	add	r31, r0
    3322:	02 9f       	mul	r16, r18
    3324:	e0 0d       	add	r30, r0
    3326:	f1 1d       	adc	r31, r1
    3328:	4e 9d       	mul	r20, r14
    332a:	e0 0d       	add	r30, r0
    332c:	f1 1d       	adc	r31, r1
    332e:	5e 9d       	mul	r21, r14
    3330:	f0 0d       	add	r31, r0
    3332:	4f 9d       	mul	r20, r15
    3334:	f0 0d       	add	r31, r0
    3336:	7f 93       	push	r23
    3338:	6f 93       	push	r22
    333a:	bf 92       	push	r11
    333c:	af 92       	push	r10
    333e:	5f 93       	push	r21
    3340:	4f 93       	push	r20
    3342:	d5 01       	movw	r26, r10
    3344:	0e 94 0d 1b 	call	0x361a	; 0x361a <__umulhisi3>
    3348:	8b 01       	movw	r16, r22
    334a:	ac 01       	movw	r20, r24
    334c:	d7 01       	movw	r26, r14
    334e:	0e 94 0d 1b 	call	0x361a	; 0x361a <__umulhisi3>
    3352:	eb 01       	movw	r28, r22
    3354:	e8 0f       	add	r30, r24
    3356:	f9 1f       	adc	r31, r25
    3358:	d6 01       	movw	r26, r12
    335a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__muldi3_6>
    335e:	2f 91       	pop	r18
    3360:	3f 91       	pop	r19
    3362:	d6 01       	movw	r26, r12
    3364:	0e 94 0d 1b 	call	0x361a	; 0x361a <__umulhisi3>
    3368:	c6 0f       	add	r28, r22
    336a:	d7 1f       	adc	r29, r23
    336c:	e8 1f       	adc	r30, r24
    336e:	f9 1f       	adc	r31, r25
    3370:	af 91       	pop	r26
    3372:	bf 91       	pop	r27
    3374:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__muldi3_6>
    3378:	2f 91       	pop	r18
    337a:	3f 91       	pop	r19
    337c:	0e 94 0d 1b 	call	0x361a	; 0x361a <__umulhisi3>
    3380:	c6 0f       	add	r28, r22
    3382:	d7 1f       	adc	r29, r23
    3384:	e8 1f       	adc	r30, r24
    3386:	f9 1f       	adc	r31, r25
    3388:	d6 01       	movw	r26, r12
    338a:	0e 94 0d 1b 	call	0x361a	; 0x361a <__umulhisi3>
    338e:	e6 0f       	add	r30, r22
    3390:	f7 1f       	adc	r31, r23
    3392:	98 01       	movw	r18, r16
    3394:	be 01       	movw	r22, r28
    3396:	cf 01       	movw	r24, r30
    3398:	11 24       	eor	r1, r1
    339a:	0f 91       	pop	r16
    339c:	1f 91       	pop	r17
    339e:	cf 91       	pop	r28
    33a0:	df 91       	pop	r29
    33a2:	08 95       	ret

000033a4 <__muldi3_6>:
    33a4:	0e 94 0d 1b 	call	0x361a	; 0x361a <__umulhisi3>
    33a8:	46 0f       	add	r20, r22
    33aa:	57 1f       	adc	r21, r23
    33ac:	c8 1f       	adc	r28, r24
    33ae:	d9 1f       	adc	r29, r25
    33b0:	08 f4       	brcc	.+2      	; 0x33b4 <__muldi3_6+0x10>
    33b2:	31 96       	adiw	r30, 0x01	; 1
    33b4:	08 95       	ret

000033b6 <__moddi3>:
    33b6:	68 94       	set
    33b8:	01 c0       	rjmp	.+2      	; 0x33bc <__divdi3_moddi3>

000033ba <__divdi3>:
    33ba:	e8 94       	clt

000033bc <__divdi3_moddi3>:
    33bc:	f9 2f       	mov	r31, r25
    33be:	f1 2b       	or	r31, r17
    33c0:	12 f0       	brmi	.+4      	; 0x33c6 <__divdi3_moddi3+0xa>
    33c2:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__udivdi3_umoddi3>
    33c6:	a0 e0       	ldi	r26, 0x00	; 0
    33c8:	b0 e0       	ldi	r27, 0x00	; 0
    33ca:	e9 ee       	ldi	r30, 0xE9	; 233
    33cc:	f9 e1       	ldi	r31, 0x19	; 25
    33ce:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__prologue_saves__+0xc>
    33d2:	09 2e       	mov	r0, r25
    33d4:	05 94       	asr	r0
    33d6:	22 f4       	brpl	.+8      	; 0x33e0 <__divdi3_moddi3+0x24>
    33d8:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__negdi2>
    33dc:	11 23       	and	r17, r17
    33de:	92 f4       	brpl	.+36     	; 0x3404 <__divdi3_moddi3+0x48>
    33e0:	f0 e8       	ldi	r31, 0x80	; 128
    33e2:	0f 26       	eor	r0, r31
    33e4:	ff ef       	ldi	r31, 0xFF	; 255
    33e6:	e0 94       	com	r14
    33e8:	f0 94       	com	r15
    33ea:	00 95       	com	r16
    33ec:	10 95       	com	r17
    33ee:	b0 94       	com	r11
    33f0:	c0 94       	com	r12
    33f2:	d0 94       	com	r13
    33f4:	a1 94       	neg	r10
    33f6:	bf 0a       	sbc	r11, r31
    33f8:	cf 0a       	sbc	r12, r31
    33fa:	df 0a       	sbc	r13, r31
    33fc:	ef 0a       	sbc	r14, r31
    33fe:	ff 0a       	sbc	r15, r31
    3400:	0f 0b       	sbc	r16, r31
    3402:	1f 0b       	sbc	r17, r31
    3404:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__udivmod64>
    3408:	07 fc       	sbrc	r0, 7
    340a:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__negdi2>
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
    3412:	ec e0       	ldi	r30, 0x0C	; 12
    3414:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__epilogue_restores__+0xc>

00003418 <__umoddi3>:
    3418:	68 94       	set
    341a:	01 c0       	rjmp	.+2      	; 0x341e <__udivdi3_umoddi3>

0000341c <__udivdi3>:
    341c:	e8 94       	clt

0000341e <__udivdi3_umoddi3>:
    341e:	8f 92       	push	r8
    3420:	9f 92       	push	r9
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__udivmod64>
    342a:	df 91       	pop	r29
    342c:	cf 91       	pop	r28
    342e:	9f 90       	pop	r9
    3430:	8f 90       	pop	r8
    3432:	08 95       	ret

00003434 <__udivmod64>:
    3434:	88 24       	eor	r8, r8
    3436:	99 24       	eor	r9, r9
    3438:	f4 01       	movw	r30, r8
    343a:	e4 01       	movw	r28, r8
    343c:	b0 e4       	ldi	r27, 0x40	; 64
    343e:	9f 93       	push	r25
    3440:	aa 27       	eor	r26, r26
    3442:	9a 15       	cp	r25, r10
    3444:	8b 04       	cpc	r8, r11
    3446:	9c 04       	cpc	r9, r12
    3448:	ed 05       	cpc	r30, r13
    344a:	fe 05       	cpc	r31, r14
    344c:	cf 05       	cpc	r28, r15
    344e:	d0 07       	cpc	r29, r16
    3450:	a1 07       	cpc	r26, r17
    3452:	98 f4       	brcc	.+38     	; 0x347a <__udivmod64+0x46>
    3454:	ad 2f       	mov	r26, r29
    3456:	dc 2f       	mov	r29, r28
    3458:	cf 2f       	mov	r28, r31
    345a:	fe 2f       	mov	r31, r30
    345c:	e9 2d       	mov	r30, r9
    345e:	98 2c       	mov	r9, r8
    3460:	89 2e       	mov	r8, r25
    3462:	98 2f       	mov	r25, r24
    3464:	87 2f       	mov	r24, r23
    3466:	76 2f       	mov	r23, r22
    3468:	65 2f       	mov	r22, r21
    346a:	54 2f       	mov	r21, r20
    346c:	43 2f       	mov	r20, r19
    346e:	32 2f       	mov	r19, r18
    3470:	22 27       	eor	r18, r18
    3472:	b8 50       	subi	r27, 0x08	; 8
    3474:	31 f7       	brne	.-52     	; 0x3442 <__udivmod64+0xe>
    3476:	bf 91       	pop	r27
    3478:	27 c0       	rjmp	.+78     	; 0x34c8 <__udivmod64+0x94>
    347a:	1b 2e       	mov	r1, r27
    347c:	bf 91       	pop	r27
    347e:	bb 27       	eor	r27, r27
    3480:	22 0f       	add	r18, r18
    3482:	33 1f       	adc	r19, r19
    3484:	44 1f       	adc	r20, r20
    3486:	55 1f       	adc	r21, r21
    3488:	66 1f       	adc	r22, r22
    348a:	77 1f       	adc	r23, r23
    348c:	88 1f       	adc	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	88 1c       	adc	r8, r8
    3492:	99 1c       	adc	r9, r9
    3494:	ee 1f       	adc	r30, r30
    3496:	ff 1f       	adc	r31, r31
    3498:	cc 1f       	adc	r28, r28
    349a:	dd 1f       	adc	r29, r29
    349c:	aa 1f       	adc	r26, r26
    349e:	bb 1f       	adc	r27, r27
    34a0:	8a 14       	cp	r8, r10
    34a2:	9b 04       	cpc	r9, r11
    34a4:	ec 05       	cpc	r30, r12
    34a6:	fd 05       	cpc	r31, r13
    34a8:	ce 05       	cpc	r28, r14
    34aa:	df 05       	cpc	r29, r15
    34ac:	a0 07       	cpc	r26, r16
    34ae:	b1 07       	cpc	r27, r17
    34b0:	48 f0       	brcs	.+18     	; 0x34c4 <__udivmod64+0x90>
    34b2:	8a 18       	sub	r8, r10
    34b4:	9b 08       	sbc	r9, r11
    34b6:	ec 09       	sbc	r30, r12
    34b8:	fd 09       	sbc	r31, r13
    34ba:	ce 09       	sbc	r28, r14
    34bc:	df 09       	sbc	r29, r15
    34be:	a0 0b       	sbc	r26, r16
    34c0:	b1 0b       	sbc	r27, r17
    34c2:	21 60       	ori	r18, 0x01	; 1
    34c4:	1a 94       	dec	r1
    34c6:	e1 f6       	brne	.-72     	; 0x3480 <__udivmod64+0x4c>
    34c8:	2e f4       	brtc	.+10     	; 0x34d4 <__udivmod64+0xa0>
    34ca:	94 01       	movw	r18, r8
    34cc:	af 01       	movw	r20, r30
    34ce:	be 01       	movw	r22, r28
    34d0:	cd 01       	movw	r24, r26
    34d2:	00 0c       	add	r0, r0
    34d4:	08 95       	ret

000034d6 <__negdi2>:
    34d6:	60 95       	com	r22
    34d8:	70 95       	com	r23
    34da:	80 95       	com	r24
    34dc:	90 95       	com	r25
    34de:	30 95       	com	r19
    34e0:	40 95       	com	r20
    34e2:	50 95       	com	r21
    34e4:	21 95       	neg	r18
    34e6:	3f 4f       	sbci	r19, 0xFF	; 255
    34e8:	4f 4f       	sbci	r20, 0xFF	; 255
    34ea:	5f 4f       	sbci	r21, 0xFF	; 255
    34ec:	6f 4f       	sbci	r22, 0xFF	; 255
    34ee:	7f 4f       	sbci	r23, 0xFF	; 255
    34f0:	8f 4f       	sbci	r24, 0xFF	; 255
    34f2:	9f 4f       	sbci	r25, 0xFF	; 255
    34f4:	08 95       	ret

000034f6 <__prologue_saves__>:
    34f6:	2f 92       	push	r2
    34f8:	3f 92       	push	r3
    34fa:	4f 92       	push	r4
    34fc:	5f 92       	push	r5
    34fe:	6f 92       	push	r6
    3500:	7f 92       	push	r7
    3502:	8f 92       	push	r8
    3504:	9f 92       	push	r9
    3506:	af 92       	push	r10
    3508:	bf 92       	push	r11
    350a:	cf 92       	push	r12
    350c:	df 92       	push	r13
    350e:	ef 92       	push	r14
    3510:	ff 92       	push	r15
    3512:	0f 93       	push	r16
    3514:	1f 93       	push	r17
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	ca 1b       	sub	r28, r26
    3520:	db 0b       	sbc	r29, r27
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	09 94       	ijmp

0000352e <__epilogue_restores__>:
    352e:	2a 88       	ldd	r2, Y+18	; 0x12
    3530:	39 88       	ldd	r3, Y+17	; 0x11
    3532:	48 88       	ldd	r4, Y+16	; 0x10
    3534:	5f 84       	ldd	r5, Y+15	; 0x0f
    3536:	6e 84       	ldd	r6, Y+14	; 0x0e
    3538:	7d 84       	ldd	r7, Y+13	; 0x0d
    353a:	8c 84       	ldd	r8, Y+12	; 0x0c
    353c:	9b 84       	ldd	r9, Y+11	; 0x0b
    353e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3540:	b9 84       	ldd	r11, Y+9	; 0x09
    3542:	c8 84       	ldd	r12, Y+8	; 0x08
    3544:	df 80       	ldd	r13, Y+7	; 0x07
    3546:	ee 80       	ldd	r14, Y+6	; 0x06
    3548:	fd 80       	ldd	r15, Y+5	; 0x05
    354a:	0c 81       	ldd	r16, Y+4	; 0x04
    354c:	1b 81       	ldd	r17, Y+3	; 0x03
    354e:	aa 81       	ldd	r26, Y+2	; 0x02
    3550:	b9 81       	ldd	r27, Y+1	; 0x01
    3552:	ce 0f       	add	r28, r30
    3554:	d1 1d       	adc	r29, r1
    3556:	0f b6       	in	r0, 0x3f	; 63
    3558:	f8 94       	cli
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	0f be       	out	0x3f, r0	; 63
    355e:	cd bf       	out	0x3d, r28	; 61
    3560:	ed 01       	movw	r28, r26
    3562:	08 95       	ret

00003564 <__ashldi3>:
    3564:	0f 93       	push	r16
    3566:	08 30       	cpi	r16, 0x08	; 8
    3568:	90 f0       	brcs	.+36     	; 0x358e <__ashldi3+0x2a>
    356a:	98 2f       	mov	r25, r24
    356c:	87 2f       	mov	r24, r23
    356e:	76 2f       	mov	r23, r22
    3570:	65 2f       	mov	r22, r21
    3572:	54 2f       	mov	r21, r20
    3574:	43 2f       	mov	r20, r19
    3576:	32 2f       	mov	r19, r18
    3578:	22 27       	eor	r18, r18
    357a:	08 50       	subi	r16, 0x08	; 8
    357c:	f4 cf       	rjmp	.-24     	; 0x3566 <__ashldi3+0x2>
    357e:	22 0f       	add	r18, r18
    3580:	33 1f       	adc	r19, r19
    3582:	44 1f       	adc	r20, r20
    3584:	55 1f       	adc	r21, r21
    3586:	66 1f       	adc	r22, r22
    3588:	77 1f       	adc	r23, r23
    358a:	88 1f       	adc	r24, r24
    358c:	99 1f       	adc	r25, r25
    358e:	0a 95       	dec	r16
    3590:	b2 f7       	brpl	.-20     	; 0x357e <__ashldi3+0x1a>
    3592:	0f 91       	pop	r16
    3594:	08 95       	ret

00003596 <__ashrdi3>:
    3596:	97 fb       	bst	r25, 7
    3598:	10 f8       	bld	r1, 0

0000359a <__lshrdi3>:
    359a:	16 94       	lsr	r1
    359c:	00 08       	sbc	r0, r0
    359e:	0f 93       	push	r16
    35a0:	08 30       	cpi	r16, 0x08	; 8
    35a2:	98 f0       	brcs	.+38     	; 0x35ca <__lshrdi3+0x30>
    35a4:	08 50       	subi	r16, 0x08	; 8
    35a6:	23 2f       	mov	r18, r19
    35a8:	34 2f       	mov	r19, r20
    35aa:	45 2f       	mov	r20, r21
    35ac:	56 2f       	mov	r21, r22
    35ae:	67 2f       	mov	r22, r23
    35b0:	78 2f       	mov	r23, r24
    35b2:	89 2f       	mov	r24, r25
    35b4:	90 2d       	mov	r25, r0
    35b6:	f4 cf       	rjmp	.-24     	; 0x35a0 <__lshrdi3+0x6>
    35b8:	05 94       	asr	r0
    35ba:	97 95       	ror	r25
    35bc:	87 95       	ror	r24
    35be:	77 95       	ror	r23
    35c0:	67 95       	ror	r22
    35c2:	57 95       	ror	r21
    35c4:	47 95       	ror	r20
    35c6:	37 95       	ror	r19
    35c8:	27 95       	ror	r18
    35ca:	0a 95       	dec	r16
    35cc:	aa f7       	brpl	.-22     	; 0x35b8 <__lshrdi3+0x1e>
    35ce:	0f 91       	pop	r16
    35d0:	08 95       	ret

000035d2 <__adddi3>:
    35d2:	2a 0d       	add	r18, r10
    35d4:	3b 1d       	adc	r19, r11
    35d6:	4c 1d       	adc	r20, r12
    35d8:	5d 1d       	adc	r21, r13
    35da:	6e 1d       	adc	r22, r14
    35dc:	7f 1d       	adc	r23, r15
    35de:	80 1f       	adc	r24, r16
    35e0:	91 1f       	adc	r25, r17
    35e2:	08 95       	ret

000035e4 <__subdi3>:
    35e4:	2a 19       	sub	r18, r10
    35e6:	3b 09       	sbc	r19, r11
    35e8:	4c 09       	sbc	r20, r12
    35ea:	5d 09       	sbc	r21, r13
    35ec:	6e 09       	sbc	r22, r14
    35ee:	7f 09       	sbc	r23, r15
    35f0:	80 0b       	sbc	r24, r16
    35f2:	91 0b       	sbc	r25, r17
    35f4:	08 95       	ret

000035f6 <__cmpdi2_s8>:
    35f6:	00 24       	eor	r0, r0
    35f8:	a7 fd       	sbrc	r26, 7
    35fa:	00 94       	com	r0
    35fc:	2a 17       	cp	r18, r26
    35fe:	30 05       	cpc	r19, r0
    3600:	40 05       	cpc	r20, r0
    3602:	50 05       	cpc	r21, r0
    3604:	60 05       	cpc	r22, r0
    3606:	70 05       	cpc	r23, r0
    3608:	80 05       	cpc	r24, r0
    360a:	90 05       	cpc	r25, r0
    360c:	08 95       	ret

0000360e <__tablejump2__>:
    360e:	ee 0f       	add	r30, r30
    3610:	ff 1f       	adc	r31, r31
    3612:	05 90       	lpm	r0, Z+
    3614:	f4 91       	lpm	r31, Z
    3616:	e0 2d       	mov	r30, r0
    3618:	09 94       	ijmp

0000361a <__umulhisi3>:
    361a:	a2 9f       	mul	r26, r18
    361c:	b0 01       	movw	r22, r0
    361e:	b3 9f       	mul	r27, r19
    3620:	c0 01       	movw	r24, r0
    3622:	a3 9f       	mul	r26, r19
    3624:	70 0d       	add	r23, r0
    3626:	81 1d       	adc	r24, r1
    3628:	11 24       	eor	r1, r1
    362a:	91 1d       	adc	r25, r1
    362c:	b2 9f       	mul	r27, r18
    362e:	70 0d       	add	r23, r0
    3630:	81 1d       	adc	r24, r1
    3632:	11 24       	eor	r1, r1
    3634:	91 1d       	adc	r25, r1
    3636:	08 95       	ret

00003638 <_exit>:
    3638:	f8 94       	cli

0000363a <__stop_program>:
    363a:	ff cf       	rjmp	.-2      	; 0x363a <__stop_program>
